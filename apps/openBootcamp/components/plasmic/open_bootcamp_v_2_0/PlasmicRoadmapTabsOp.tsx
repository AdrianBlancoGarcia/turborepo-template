// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qJhJbLN2Wy56BDK1v9VeHg
// Component: hvwW6mZKEkS
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import RoadmapSection from "../../RoadmapSection"; // plasmic-import: xSj-Ozd4Dq/component
import Roadmap from "../../Roadmap"; // plasmic-import: SFQJUY_7j6t/component
import Button from "../../Button"; // plasmic-import: W52igaDMzA10w6/component

import { useScreenVariants as useScreenVariantsgfTNvlXeClRRx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GfTNvlXE_ClRRx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_bootcamp_v_2_0.module.css"; // plasmic-import: qJhJbLN2Wy56BDK1v9VeHg/projectcss
import sty from "./PlasmicRoadmapTabsOp.module.css"; // plasmic-import: hvwW6mZKEkS/css

export type PlasmicRoadmapTabsOp__VariantMembers = {};

export type PlasmicRoadmapTabsOp__VariantsArgs = {};
type VariantPropType = keyof PlasmicRoadmapTabsOp__VariantsArgs;
export const PlasmicRoadmapTabsOp__VariantProps = new Array<VariantPropType>();

export type PlasmicRoadmapTabsOp__ArgsType = {
  roadmapTabs?: React.ReactNode;
  roadmap?: React.ReactNode;
};

type ArgPropType = keyof PlasmicRoadmapTabsOp__ArgsType;
export const PlasmicRoadmapTabsOp__ArgProps = new Array<ArgPropType>(
  "roadmapTabs",
  "roadmap"
);

export type PlasmicRoadmapTabsOp__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  sectionHeading8?: p.Flex<"div">;
  sectionTitle8?: p.Flex<"div">;
  description18?: p.Flex<"p">;
  roadmapSection?: p.Flex<typeof RoadmapSection>;
};

export interface DefaultRoadmapTabsOpProps {
  roadmapTabs?: React.ReactNode;
  roadmap?: React.ReactNode;
  className?: string;
}

function PlasmicRoadmapTabsOp__RenderFunc(props: {
  variants: PlasmicRoadmapTabsOp__VariantsArgs;
  args: PlasmicRoadmapTabsOp__ArgsType;
  overrides: PlasmicRoadmapTabsOp__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgfTNvlXeClRRx()
  });

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
        id={"" as const}
      >
        {(
          hasVariant(globalVariants, "screen", "laptop")
            ? true
            : hasVariant(globalVariants, "screen", "laptopL")
            ? true
            : true
        ) ? (
          <div className={classNames(projectcss.all, sty.freeBox__jaAr0)}>
            <div className={classNames(projectcss.all, sty.freeBox__hfbrO)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__kGvCj)}>
                  <p.PlasmicImg
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"306px" as const}
                    loader={"plasmic"}
                    loading={"lazy" as const}
                    src={{
                      src: "https://img.plasmic.app/img-optimizer/v1/img/d33a8375fc9aec3d4146fb3ce25cde97.png",
                      fullWidth: 748,
                      fullHeight: 612
                    }}
                  />
                </div>
              ) : null}
            </div>
          </div>
        ) : null}
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___9Oq0C)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__cmdH)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"sectionHeading8"}
                  data-plasmic-override={overrides.sectionHeading8}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.sectionHeading8)}
                >
                  <div
                    data-plasmic-name={"sectionTitle8"}
                    data-plasmic-override={overrides.sectionTitle8}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.sectionTitle8
                    )}
                  >
                    {"Encuentra el nivel que se adapte a ti"}
                  </div>

                  <p
                    data-plasmic-name={"description18"}
                    data-plasmic-override={overrides.description18}
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.description18
                    )}
                  >
                    {
                      "Tenemos hojas de ruta confeccionadas para cada tipo de alumno, tanto los que empiezan en el mundo del desarrollo como los que ya tienen conocimientos avanzados y solo necesitan un último empujón que les lance al entorno laboral."
                    }
                  </p>
                </p.Stack>
              </p.Stack>
            ) : null}
            {true ? (
              <RoadmapSection
                data-plasmic-name={"roadmapSection"}
                data-plasmic-override={overrides.roadmapSection}
                className={classNames("__wab_instance", sty.roadmapSection)}
                roadmap={p.renderPlasmicSlot({
                  defaultContents: (
                    <Roadmap
                      className={classNames(
                        "__wab_instance",
                        sty.roadmap__oiFvq
                      )}
                    />
                  ),

                  value: args.roadmap
                })}
                roadmapTabs={p.renderPlasmicSlot({
                  defaultContents: null,
                  value: args.roadmapTabs
                })}
              />
            ) : null}
          </p.Stack>
        ) : null}
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "sectionHeading8",
    "sectionTitle8",
    "description18",
    "roadmapSection"
  ],
  img: ["img"],
  sectionHeading8: ["sectionHeading8", "sectionTitle8", "description18"],
  sectionTitle8: ["sectionTitle8"],
  description18: ["description18"],
  roadmapSection: ["roadmapSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  sectionHeading8: "div";
  sectionTitle8: "div";
  description18: "p";
  roadmapSection: typeof RoadmapSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRoadmapTabsOp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRoadmapTabsOp__VariantsArgs;
    args?: PlasmicRoadmapTabsOp__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRoadmapTabsOp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRoadmapTabsOp__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRoadmapTabsOp__ArgProps,
          internalVariantPropNames: PlasmicRoadmapTabsOp__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicRoadmapTabsOp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRoadmapTabsOp";
  } else {
    func.displayName = `PlasmicRoadmapTabsOp.${nodeName}`;
  }
  return func;
}

export const PlasmicRoadmapTabsOp = Object.assign(
  // Top-level PlasmicRoadmapTabsOp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    sectionHeading8: makeNodeComponent("sectionHeading8"),
    sectionTitle8: makeNodeComponent("sectionTitle8"),
    description18: makeNodeComponent("description18"),
    roadmapSection: makeNodeComponent("roadmapSection"),

    // Metadata about props expected for PlasmicRoadmapTabsOp
    internalVariantProps: PlasmicRoadmapTabsOp__VariantProps,
    internalArgProps: PlasmicRoadmapTabsOp__ArgProps
  }
);

export default PlasmicRoadmapTabsOp;
/* prettier-ignore-end */
