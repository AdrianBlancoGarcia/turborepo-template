// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qJhJbLN2Wy56BDK1v9VeHg
// Component: kMaRrdSS2k
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: -CnkElqEbFOKi/component
import Button from "../../Button"; // plasmic-import: W52igaDMzA10w6/component
import LinkOb from "../../LinkOb"; // plasmic-import: MCZw6vVbPKy/component
import CourseLandingItem from "../../CourseLandingItem"; // plasmic-import: iOaw7i5C2By/component
import TestimonialsTexts from "../../TestimonialsTexts"; // plasmic-import: PZVpznDmWug/component
import ProfileImage from "../../ProfileImage"; // plasmic-import: 2Y7usthzRd/component
import CourseLandingFaq from "../../CourseLandingFaq"; // plasmic-import: Mmwxop3xQ3/component
import Footer from "../../Footer"; // plasmic-import: b5lOT72QRjzHLq/component

import { useScreenVariants as useScreenVariantsgfTNvlXeClRRx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GfTNvlXE_ClRRx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_bootcamp_v_2_0.module.css"; // plasmic-import: qJhJbLN2Wy56BDK1v9VeHg/projectcss
import sty from "./PlasmicLandingCursos.module.css"; // plasmic-import: kMaRrdSS2k/css

import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: MPKmKXARKW/icon
import Vector8Icon from "./icons/PlasmicIcon__Vector8"; // plasmic-import: icZS_od47y/icon
import Vector9Icon from "./icons/PlasmicIcon__Vector9"; // plasmic-import: mVwYU7p2e/icon
import Vector11Icon from "./icons/PlasmicIcon__Vector11"; // plasmic-import: aDS2HTetYW/icon
import Icon27Icon from "./icons/PlasmicIcon__Icon27"; // plasmic-import: hKJX8YlwbG9/icon
import Icon30Icon from "./icons/PlasmicIcon__Icon30"; // plasmic-import: L0hZU5Oak/icon

export type PlasmicLandingCursos__VariantMembers = {};

export type PlasmicLandingCursos__VariantsArgs = {};
type VariantPropType = keyof PlasmicLandingCursos__VariantsArgs;
export const PlasmicLandingCursos__VariantProps = new Array<VariantPropType>();

export type PlasmicLandingCursos__ArgsType = {
  heroButton?: React.ReactNode;
  testimonialsUsers?: React.ReactNode;
  leftArrow?: React.ReactNode;
  rightArrow?: React.ReactNode;
  testimonialsText?: React.ReactNode;
  faq?: React.ReactNode;
  navbar?: React.ReactNode;
  breadcrumb?: React.ReactNode;
  courseList?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLandingCursos__ArgsType;
export const PlasmicLandingCursos__ArgProps = new Array<ArgPropType>(
  "heroButton",
  "testimonialsUsers",
  "leftArrow",
  "rightArrow",
  "testimonialsText",
  "faq",
  "navbar",
  "breadcrumb",
  "courseList"
);

export type PlasmicLandingCursos__OverridesType = {
  root?: p.Flex<"div">;
  hero?: p.Flex<"div">;
  header?: p.Flex<"div">;
  breadcrumb?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  frame?: p.Flex<"div">;
  openBootcamp?: p.Flex<"div">;
  leftSide?: p.Flex<"div">;
  sectionHeading?: p.Flex<"div">;
  item1?: p.Flex<"div">;
  item2?: p.Flex<"div">;
  item3?: p.Flex<"div">;
  item4?: p.Flex<"div">;
  rightSide?: p.Flex<"div">;
  process?: p.Flex<"div">;
  feature1?: p.Flex<"div">;
  heading?: p.Flex<"div">;
  feature12?: p.Flex<"div">;
  heading2?: p.Flex<"div">;
  feature13?: p.Flex<"div">;
  heading3?: p.Flex<"div">;
  feature14?: p.Flex<"div">;
  heading4?: p.Flex<"div">;
  feature15?: p.Flex<"div">;
  heading5?: p.Flex<"div">;
  feature16?: p.Flex<"div">;
  heading6?: p.Flex<"div">;
  svg2?: p.Flex<"div">;
  svg3?: p.Flex<"div">;
  svg4?: p.Flex<"div">;
  courses?: p.Flex<"div">;
  testimonial?: p.Flex<"div">;
  leftColumn?: p.Flex<"div">;
  rightColumn?: p.Flex<"div">;
  faq?: p.Flex<"div">;
  content?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultLandingCursosProps {}

function PlasmicLandingCursos__RenderFunc(props: {
  variants: PlasmicLandingCursos__VariantsArgs;
  args: PlasmicLandingCursos__ArgsType;
  overrides: PlasmicLandingCursos__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgfTNvlXeClRRx()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__ln9Bl)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <Navbar
                  className={classNames("__wab_instance", sty.navbar__d087S)}
                />
              ),

              value: args.navbar
            })}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            hasGap={true}
            className={classNames(projectcss.all, sty.hero)}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___4Q8Ls)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__dQ6CG)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"header"}
                      data-plasmic-override={overrides.header}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.header)}
                    >
                      <div
                        data-plasmic-name={"breadcrumb"}
                        data-plasmic-override={overrides.breadcrumb}
                        className={classNames(projectcss.all, sty.breadcrumb)}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: null,
                          value: args.breadcrumb
                        })}
                      </div>

                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          <React.Fragment>
                            <React.Fragment>
                              {"Curso de programación\n"}
                            </React.Fragment>
                            {
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.span__rOzTm
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "gratuito"
                                  : "gratuito"}
                              </span>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        ) : hasVariant(globalVariants, "screen", "laptop") ? (
                          <React.Fragment>
                            <React.Fragment>
                              {"Cursos de programación\n"}
                            </React.Fragment>
                            {
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.span__sdEYa
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "gratuito"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "laptop"
                                    )
                                  ? "gratuito"
                                  : "gratuito"}
                              </span>
                            }
                            <React.Fragment> </React.Fragment>
                          </React.Fragment>
                        ) : hasVariant(globalVariants, "screen", "laptopL") ? (
                          <React.Fragment>
                            <React.Fragment>
                              {"Cursos de programación "}
                            </React.Fragment>
                            {
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.span__ljy6P
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "gratuito"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "laptopL"
                                    )
                                  ? "gratis"
                                  : "gratuito"}
                              </span>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            <React.Fragment>
                              {"Cursos de programación\n"}
                            </React.Fragment>
                            {
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  projectcss.plasmic_default__inline,
                                  sty.span__yDA6
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "gratuito"
                                  : "gratis"}
                              </span>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        )}
                      </h1>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nxO0W
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Descubre una gran variedad de cursos gratuitos para adentrarte en el apasionante mundo de la programación."
                          : hasVariant(globalVariants, "screen", "laptop")
                          ? "Descubre una gran variedad de cursos gratuitos para adentrarte en el apasionante mundo de la programación."
                          : hasVariant(globalVariants, "screen", "laptopL")
                          ? "Descubre una gran variedad de cursos gratuitos para adentrarte en el apasionante mundo de la programación."
                          : "Descubre una gran variedad de cursos \ngratuitos para adentrarte en el apasionante \nmundo de la programación."}
                      </div>
                    </p.Stack>

                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__ib6SC
                          )}
                          color={"darkGray" as const}
                          endIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__nFv9
                              )}
                              role={"img"}
                            />
                          }
                          link={
                            "https://campus.open-bootcamp.com/register" as const
                          }
                          startIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__kEobb
                              )}
                              role={"img"}
                            />
                          }
                        >
                          {"Empieza ya"}
                        </Button>
                      ),

                      value: args.heroButton
                    })}
                  </p.Stack>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    alt={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("Desarrollador probando App" as const)
                        : hasVariant(globalVariants, "screen", "laptop")
                        ? ("Desarrollador probando App" as const)
                        : hasVariant(globalVariants, "screen", "laptopL")
                        ? ("Desarrollador probando App" as const)
                        : ("Desarrollador probando App" as const)
                    }
                    className={classNames(projectcss.all, sty.freeBox__lzpm6)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "laptopL")
                        ? true
                        : true
                    ) ? (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___3RJrj)}
                        displayHeight={"100%" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("100%" as const)
                            : ("auto" as const)
                        }
                        loader={"plasmic"}
                        loading={"lazy" as const}
                        src={
                          hasVariant(globalVariants, "screen", "laptopL")
                            ? {
                                src: "https://img.plasmic.app/img-optimizer/v1/img/7fb412b448facfc5881f6117367a81d1.png",
                                fullWidth: 1444,
                                fullHeight: 1606
                              }
                            : {
                                src: "https://img.plasmic.app/img-optimizer/v1/img/7fb412b448facfc5881f6117367a81d1.png",
                                fullWidth: 1444,
                                fullHeight: 1606
                              }
                        }
                      />
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : hasVariant(globalVariants, "screen", "laptopM")
                        ? true
                        : hasVariant(globalVariants, "screen", "laptopL")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xmA7E
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__r2AKy
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img___5PzBx)}
                            displayHeight={"25px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"25px" as const}
                            loader={"plasmic"}
                            loading={"lazy" as const}
                            src={{
                              src: "https://img.plasmic.app/img-optimizer/v1/img/422b543405a1642c3e7c03e7ef76c4f8.png",
                              fullWidth: 461,
                              fullHeight: 460
                            }}
                          />
                        </p.Stack>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__chBey
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__sd9RS
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Python"
                              : hasVariant(globalVariants, "screen", "laptopL")
                              ? "Python"
                              : "Python"}
                          </div>
                        </div>
                      </p.Stack>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__n3WdS
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lZoYs
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__iNkqL)}
                              displayHeight={"25px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"100%" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"25px" as const}
                              loader={"plasmic"}
                              loading={"lazy" as const}
                              src={{
                                src: "https://img.plasmic.app/img-optimizer/v1/img/cf3c73de3e2bc739172e535ee264cdd4.png",
                                fullWidth: 461,
                                fullHeight: 460
                              }}
                            />
                          </p.Stack>
                        ) : null}

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__y0Yc4
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "ReactJS"
                            : "ReactJS"}
                        </div>
                      </p.Stack>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rKpOp
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___1IzKx
                          )}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          ) ? (
                            <p.Stack
                              as={"div"}
                              data-plasmic-name={"frame"}
                              data-plasmic-override={overrides.frame}
                              hasGap={true}
                              className={classNames(projectcss.all, sty.frame)}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qf7Er
                                )}
                              >
                                {"JS"}
                              </div>
                            </p.Stack>
                          ) : null}
                        </p.Stack>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nsskZ
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fmY2I
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Javascript"
                              : "Javascript"}
                          </div>
                        </div>
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                ) : null}
              </p.Stack>
            ) : null}
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"openBootcamp"}
            data-plasmic-override={overrides.openBootcamp}
            hasGap={true}
            className={classNames(projectcss.all, sty.openBootcamp)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___3U8A2)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"leftSide"}
                data-plasmic-override={overrides.leftSide}
                hasGap={true}
                className={classNames(projectcss.all, sty.leftSide)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"sectionHeading"}
                  data-plasmic-override={overrides.sectionHeading}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.sectionHeading)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dOx37
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "laptopL")
                      ? "¿Qué es OpenBootcamp?"
                      : "¿Qué es OpenBootcamp?"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yjnKg
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Un programa pionero en el que recibirás toda la formación que necesites hasta que encuentres un mejor empleo."
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? "Un programa pionero en el que recibirás toda la formación\nque necesites hasta que encuentres un mejor empleo."
                      : "Un programa pionero en el que recibirás toda la formación que necesites para que encuentres un mejor empleo."}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__nzrfZ)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"item1"}
                    data-plasmic-override={overrides.item1}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.item1)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vRvzp)}
                    >
                      <Vector8Icon
                        className={classNames(projectcss.all, sty.svg__we90U)}
                        role={"img"}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__yo5Rg)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__phJjM
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fxEdi
                          )}
                        >
                          {"Formación"}
                        </div>

                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            sty.span__ar8It
                          )}
                        >
                          {"100% gratuita"}
                        </span>
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__e67As
                        )}
                      >
                        {
                          "Nuestras empresas asumen el coste de tu \nformación una vez te contraten."
                        }
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"item2"}
                    data-plasmic-override={overrides.item2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.item2)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__u2K1D)}
                    >
                      <Vector9Icon
                        className={classNames(projectcss.all, sty.svg__ccUI)}
                        role={"img"}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__y2NtZ)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dfOZ
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bmqUd
                          )}
                        >
                          {"Flexibilidad total"}
                        </div>
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__n3JV9
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          <React.Fragment>
                            <React.Fragment>
                              {"Puedes formarte durante 12 meses en remoto "}
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"a tu ritmo."}
                            </span>
                          </React.Fragment>
                        ) : (
                          "Podrás formarte para siempre en remoto a tu ritmo."
                        )}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"item3"}
                    data-plasmic-override={overrides.item3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.item3)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fmnon)}
                    >
                      <Vector11Icon
                        className={classNames(projectcss.all, sty.svg__vhGxC)}
                        role={"img"}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__dCD4)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__f9RUl
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__djSn6
                          )}
                        >
                          {"Tutorización"}
                        </div>
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dnQ2C
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "laptop") ? (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Dispondrás de la ayuda de profesionales"}
                            </span>
                            <React.Fragment>
                              {
                                " en todo momento para hacer de tu formación, una experiencia única."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Dispondrás de la ayuda de profesionales"}
                            </span>
                            <React.Fragment>
                              {
                                " en \ntodo momento para hacer de tu formación, \nuna experiencia única."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        )}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"item4"}
                    data-plasmic-override={overrides.item4}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.item4)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qhf5P)}
                    >
                      <Icon27Icon
                        className={classNames(projectcss.all, sty.svg__rdImG)}
                        role={"img"}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__cmuwO)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7XcTc
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__f1H7C
                          )}
                        >
                          {"Oportunidades"}
                        </div>

                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            sty.span__fHoq
                          )}
                        >
                          {"laborales"}
                        </span>
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__f42Cv
                        )}
                      >
                        {
                          "Cuando quieras, te presentamos a ofertas laborales que encajan contigo en base a tus gustos y requisitos."
                        }
                      </div>
                    </p.Stack>
                  </p.Stack>

                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4H5Mt
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lkInC
                        )}
                      >
                        {true ? (
                          <Icon30Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__zS8O7
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </div>
                    </div>
                  ) : null}
                </p.Stack>
              </p.Stack>

              <div
                data-plasmic-name={"rightSide"}
                data-plasmic-override={overrides.rightSide}
                className={classNames(projectcss.all, sty.rightSide)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__zTr7)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("356px" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("555px" as const)
                      : ("822px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0%" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100vw" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("100vw" as const)
                      : ("826px" as const)
                  }
                  loader={"plasmic"}
                  loading={"lazy" as const}
                  src={{
                    src: "https://img.plasmic.app/img-optimizer/v1/img/35024b4d6c8f20f8c6104fb4e5a860b2.png",
                    fullWidth: 752,
                    fullHeight: 1013
                  }}
                />
              </div>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"process"}
            data-plasmic-override={overrides.process}
            hasGap={true}
            className={classNames(projectcss.all, sty.process)}
            id={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ("caracteristicas" as const)
                : hasVariant(globalVariants, "screen", "laptop")
                ? ("caracteristicas" as const)
                : hasVariant(globalVariants, "screen", "laptopL")
                ? ("caracteristicas" as const)
                : ("caracteristicas" as const)
            }
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___3IUo)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wN6R7)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4Ur7G
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Descubre todos nuestros cursos"
                    : hasVariant(globalVariants, "screen", "laptop")
                    ? "Descubre todos nuestros cursos"
                    : hasVariant(globalVariants, "screen", "laptopL")
                    ? "¿Cómo funciona OpenBootcamp?"
                    : "¿Cómo funciona OpenBootcamp ?"}
                </div>
              </p.Stack>

              <div className={classNames(projectcss.all, sty.freeBox__ghmpU)}>
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"feature1"}
                  data-plasmic-override={overrides.feature1}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.feature1)}
                >
                  <div
                    data-plasmic-name={"heading"}
                    data-plasmic-override={overrides.heading}
                    className={classNames(projectcss.all, sty.heading)}
                  >
                    <p
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p___1Yr5P
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "1"
                        : "1"}
                    </p>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aWgqB
                      )}
                    >
                      {"Registro en 2min"}
                    </div>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zPph
                    )}
                  >
                    {
                      "Pasarás a formar parte de OpenBootcamp en tan sólo 2 minutos."
                    }
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"feature12"}
                  data-plasmic-override={overrides.feature12}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.feature12)}
                >
                  <div
                    data-plasmic-name={"heading2"}
                    data-plasmic-override={overrides.heading2}
                    className={classNames(projectcss.all, sty.heading2)}
                  >
                    <p
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p__qgKrl
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "2"
                        : "2"}
                    </p>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__auyVm
                      )}
                    >
                      {"Elige tu especialización"}
                    </div>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gHeg7
                    )}
                  >
                    {
                      "Pasarás a formar parte deOpenBootcamp en tan sólo 2 minutos."
                    }
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"feature13"}
                  data-plasmic-override={overrides.feature13}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.feature13)}
                >
                  <div
                    data-plasmic-name={"heading3"}
                    data-plasmic-override={overrides.heading3}
                    className={classNames(projectcss.all, sty.heading3)}
                  >
                    <p
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p__qmutm
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "3"
                        : "3"}
                    </p>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__icc4O
                      )}
                    >
                      {"Empieza a formarte"}
                    </div>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ep5Kc
                    )}
                  >
                    {"Selecciona uno de los muchos cursos disponibles."}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"feature14"}
                  data-plasmic-override={overrides.feature14}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.feature14)}
                >
                  <div
                    data-plasmic-name={"heading4"}
                    data-plasmic-override={overrides.heading4}
                    className={classNames(projectcss.all, sty.heading4)}
                  >
                    <p
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p__cbbSn
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "4"
                        : "4"}
                    </p>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qPxOx
                      )}
                    >
                      {"Examínate "}
                    </div>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7HbU
                    )}
                  >
                    {"Pon a prueba tus \nhabilidades."}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"feature15"}
                  data-plasmic-override={overrides.feature15}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.feature15)}
                >
                  <div
                    data-plasmic-name={"heading5"}
                    data-plasmic-override={overrides.heading5}
                    className={classNames(projectcss.all, sty.heading5)}
                  >
                    <p
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p__zOuGc
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "5"
                        : "5"}
                    </p>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__b05H4
                      )}
                    >
                      {"Fase de aceleración"}
                    </div>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lakS7
                    )}
                  >
                    {"Continúa tu desarrollo con prácticas y tutorías."}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"feature16"}
                  data-plasmic-override={overrides.feature16}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.feature16)}
                >
                  <div
                    data-plasmic-name={"heading6"}
                    data-plasmic-override={overrides.heading6}
                    className={classNames(projectcss.all, sty.heading6)}
                  >
                    <p
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p___0VmEh
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "6"
                        : "6"}
                    </p>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qIHg4
                      )}
                    >
                      {"Acceso al mercado laboral"}
                    </div>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pnxy6
                    )}
                  >
                    {
                      "Selecciona una oferta laboral y conviértete en developer."
                    }
                  </div>
                </p.Stack>

                <div className={classNames(projectcss.all, sty.freeBox__kofVk)}>
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      data-plasmic-name={"svg2"}
                      data-plasmic-override={overrides.svg2}
                      className={classNames(projectcss.all, sty.svg2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__n1AZn
                        )}
                      >
                        {true ? (
                          <Icon30Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___7Js8O
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </div>
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      data-plasmic-name={"svg3"}
                      data-plasmic-override={overrides.svg3}
                      className={classNames(projectcss.all, sty.svg3)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yfeNa
                        )}
                      >
                        {true ? (
                          <Icon30Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__onXqt
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </div>
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? true
                      : false
                  ) ? (
                    <div
                      data-plasmic-name={"svg4"}
                      data-plasmic-override={overrides.svg4}
                      className={classNames(projectcss.all, sty.svg4)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___5RTLt
                        )}
                      >
                        {true ? (
                          <Icon30Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__up0B1
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </div>
                    </div>
                  ) : null}
                </div>
              </div>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"courses"}
            data-plasmic-override={overrides.courses}
            hasGap={true}
            className={classNames(projectcss.all, sty.courses)}
            id={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ("caracteristicas" as const)
                : hasVariant(globalVariants, "screen", "laptop")
                ? ("caracteristicas" as const)
                : hasVariant(globalVariants, "screen", "laptopM")
                ? ("caracteristicas" as const)
                : hasVariant(globalVariants, "screen", "laptopL")
                ? ("caracteristicas" as const)
                : ("caracteristicas" as const)
            }
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__qzh9E)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vvsFf)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qpZkC
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Descubre todos nuestros cursos"
                    : hasVariant(globalVariants, "screen", "laptop")
                    ? "Descubre todos nuestros cursos"
                    : hasVariant(globalVariants, "screen", "laptopL")
                    ? "Descubre todos nuestros cursos"
                    : "Descubre todos nuestros cursos"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aEb6H
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "OpenBootcamp cuenta con una amplia oferta formativa que te permitirá formarte en las últimas tecnologías que el mercado laboral demanda."
                    : hasVariant(globalVariants, "screen", "laptop")
                    ? "OpenBootcamp cuenta con una amplia oferta formativa que te permitirá formarte en las últimas tecnologías que el mercado laboral demanda."
                    : hasVariant(globalVariants, "screen", "laptopL")
                    ? "OpenBootcamp cuenta con una amplia oferta formativa que te permitirá formarte en las últimas tecnologías que el mercado laboral demanda."
                    : "OpenBootcamp cuenta con una amplia oferta formativa que te permitirá formarte en las últimas tecnologías que el mercado laboral demanda."}
                </div>
              </p.Stack>

              <div className={classNames(projectcss.all, sty.freeBox__kHtOs)}>
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <React.Fragment>
                      <CourseLandingItem
                        className={classNames(
                          "__wab_instance",
                          sty.courseLandingItem___2SyUu
                        )}
                        courseImg={
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__ngCg0)}
                            displayHeight={"60px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"60px" as const}
                            loader={"plasmic"}
                            loading={"lazy" as const}
                            src={{
                              src: "https://img.plasmic.app/img-optimizer/v1/img/5d7f22ab1e6be7dd663e6edae8d70075.png",
                              fullWidth: 60,
                              fullHeight: 60
                            }}
                          />
                        }
                        courseTitle={"Java Script"}
                      />

                      <CourseLandingItem
                        className={classNames(
                          "__wab_instance",
                          sty.courseLandingItem__oiPyz
                        )}
                        courseImg={
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img___5Wim)}
                            displayHeight={"60px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"60px" as const}
                            loader={"plasmic"}
                            loading={"lazy" as const}
                            src={{
                              src: "https://img.plasmic.app/img-optimizer/v1/img/6d3b599e67ad9c11f429a750c6682a9c.png",
                              fullWidth: 60,
                              fullHeight: 60
                            }}
                          />
                        }
                        courseTitle={"Spring"}
                      />

                      <CourseLandingItem
                        className={classNames(
                          "__wab_instance",
                          sty.courseLandingItem__yCbDn
                        )}
                        courseImg={
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__xgJmn)}
                            displayHeight={"60px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"60px" as const}
                            loader={"plasmic"}
                            loading={"lazy" as const}
                            src={{
                              src: "https://img.plasmic.app/img-optimizer/v1/img/86adce8a4da5af9dc5c370f9f4e29ffc.png",
                              fullWidth: 60,
                              fullHeight: 60
                            }}
                          />
                        }
                        courseTitle={"ReactJS"}
                      />

                      <CourseLandingItem
                        className={classNames(
                          "__wab_instance",
                          sty.courseLandingItem__ndVo2
                        )}
                        courseImg={
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__rXj66)}
                            displayHeight={"60px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"60px" as const}
                            loader={"plasmic"}
                            loading={"lazy" as const}
                            src={{
                              src: "https://img.plasmic.app/img-optimizer/v1/img/b5a4efb4575d17e55e133fd522e522ad.png",
                              fullWidth: 60,
                              fullHeight: 60
                            }}
                          />
                        }
                        courseTitle={"Angular"}
                      />

                      <CourseLandingItem
                        className={classNames(
                          "__wab_instance",
                          sty.courseLandingItem__cXj5A
                        )}
                        courseImg={
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__sGit)}
                            displayHeight={"60px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"60px" as const}
                            loader={"plasmic"}
                            loading={"lazy" as const}
                            src={{
                              src: "https://img.plasmic.app/img-optimizer/v1/img/5bdd4a38664225329c199ab3f5a48a07.png",
                              fullWidth: 60,
                              fullHeight: 60
                            }}
                          />
                        }
                        courseTitle={"HTML & CSS"}
                      />

                      <CourseLandingItem
                        className={classNames(
                          "__wab_instance",
                          sty.courseLandingItem__xhVc
                        )}
                        courseImg={
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__sR79)}
                            displayHeight={"60px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"60px" as const}
                            loader={"plasmic"}
                            loading={"lazy" as const}
                            src={{
                              src: "https://img.plasmic.app/img-optimizer/v1/img/f361240d02f2b7e798a6343bd5d5a525.png",
                              fullWidth: 60,
                              fullHeight: 60
                            }}
                          />
                        }
                        courseTitle={"Java básico"}
                      />

                      <CourseLandingItem
                        className={classNames(
                          "__wab_instance",
                          sty.courseLandingItem__wL8FS
                        )}
                        courseImg={
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__ewsOm)}
                            displayHeight={"60px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"60px" as const}
                            loader={"plasmic"}
                            loading={"lazy" as const}
                            src={{
                              src: "https://img.plasmic.app/img-optimizer/v1/img/b5a4efb4575d17e55e133fd522e522ad.png",
                              fullWidth: 60,
                              fullHeight: 60
                            }}
                          />
                        }
                        courseTitle={"Angular"}
                      />

                      <CourseLandingItem
                        className={classNames(
                          "__wab_instance",
                          sty.courseLandingItem__zwWe7
                        )}
                        courseImg={
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__xrSsv)}
                            displayHeight={"60px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"60px" as const}
                            loader={"plasmic"}
                            loading={"lazy" as const}
                            src={{
                              src: "https://img.plasmic.app/img-optimizer/v1/img/d5afd7bbe9f8c188587d3b51bd67801f.png",
                              fullWidth: 60,
                              fullHeight: 60
                            }}
                          />
                        }
                        courseTitle={"Hibernate"}
                      />

                      <CourseLandingItem
                        className={classNames(
                          "__wab_instance",
                          sty.courseLandingItem__kTbVc
                        )}
                        courseImg={
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img___40Yd3)}
                            displayHeight={"60px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"60px" as const}
                            loader={"plasmic"}
                            loading={"lazy" as const}
                            src={{
                              src: "https://img.plasmic.app/img-optimizer/v1/img/86adce8a4da5af9dc5c370f9f4e29ffc.png",
                              fullWidth: 60,
                              fullHeight: 60
                            }}
                          />
                        }
                        courseTitle={"React avanzado"}
                      />

                      <CourseLandingItem
                        className={classNames(
                          "__wab_instance",
                          sty.courseLandingItem__uD29G
                        )}
                        courseImg={
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__uJjwA)}
                            displayHeight={"60px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"60px" as const}
                            loader={"plasmic"}
                            loading={"lazy" as const}
                            src={{
                              src: "https://img.plasmic.app/img-optimizer/v1/img/5d7f22ab1e6be7dd663e6edae8d70075.png",
                              fullWidth: 60,
                              fullHeight: 60
                            }}
                          />
                        }
                        courseTitle={"Java Script"}
                      />

                      <CourseLandingItem
                        className={classNames(
                          "__wab_instance",
                          sty.courseLandingItem__d6F0
                        )}
                        courseImg={
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__epdZp)}
                            displayHeight={"60px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"60px" as const}
                            loader={"plasmic"}
                            loading={"lazy" as const}
                            src={{
                              src: "https://img.plasmic.app/img-optimizer/v1/img/6d3b599e67ad9c11f429a750c6682a9c.png",
                              fullWidth: 60,
                              fullHeight: 60
                            }}
                          />
                        }
                        courseTitle={"Spring"}
                      />

                      <CourseLandingItem
                        className={classNames(
                          "__wab_instance",
                          sty.courseLandingItem__mLzYq
                        )}
                        courseImg={
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img___234Jt)}
                            displayHeight={"60px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"60px" as const}
                            loader={"plasmic"}
                            loading={"lazy" as const}
                            src={{
                              src: "https://img.plasmic.app/img-optimizer/v1/img/5bdd4a38664225329c199ab3f5a48a07.png",
                              fullWidth: 60,
                              fullHeight: 60
                            }}
                          />
                        }
                        courseTitle={"HTML & CSS"}
                      />
                    </React.Fragment>
                  ),
                  value: args.courseList
                })}
              </div>
            </p.Stack>
          </p.Stack>

          <div
            data-plasmic-name={"testimonial"}
            data-plasmic-override={overrides.testimonial}
            className={classNames(projectcss.all, sty.testimonial)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__z5Cl)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"leftColumn"}
                data-plasmic-override={overrides.leftColumn}
                hasGap={true}
                className={classNames(projectcss.all, sty.leftColumn)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__blfjp
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"¿Qué opinan nuestros "}</React.Fragment>
                    {
                      <span
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.span__odFs
                        )}
                      >
                        {"alumnos?"}
                      </span>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__sTbp)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__ev5N1
                        )}
                        previousNextPage={"previousPageLastChild" as const}
                      />
                    ),

                    value: args.leftArrow
                  })}

                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__h9SB
                        )}
                        previousNextPage={"nextPage" as const}
                      />
                    ),

                    value: args.rightArrow
                  })}
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"rightColumn"}
                data-plasmic-override={overrides.rightColumn}
                hasGap={true}
                className={classNames(projectcss.all, sty.rightColumn)}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___8RhWe)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <TestimonialsTexts
                          className={classNames(
                            "__wab_instance",
                            sty.testimonialsTexts__w0Hpe
                          )}
                        />
                      ),

                      value: args.testimonialsText
                    })}
                  </p.Stack>
                ) : null}

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wnHs)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <React.Fragment>
                        <ProfileImage
                          active={true}
                          className={classNames(
                            "__wab_instance",
                            sty.profileImage___7Voh0
                          )}
                        />

                        <ProfileImage
                          className={classNames(
                            "__wab_instance",
                            sty.profileImage__mz9Fe
                          )}
                        />

                        <ProfileImage
                          className={classNames(
                            "__wab_instance",
                            sty.profileImage__xcgWx
                          )}
                        />

                        <ProfileImage
                          className={classNames(
                            "__wab_instance",
                            sty.profileImage__swHld
                          )}
                        />
                      </React.Fragment>
                    ),
                    value: args.testimonialsUsers
                  })}
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"faq"}
            data-plasmic-override={overrides.faq}
            className={classNames(projectcss.all, sty.faq)}
          >
            <div
              data-plasmic-name={"content"}
              data-plasmic-override={overrides.content}
              className={classNames(projectcss.all, sty.content)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <CourseLandingFaq
                    className={classNames(
                      "__wab_instance",
                      sty.courseLandingFaq__uSr4X
                    )}
                    subtitle={"Resolvamos tus dudas"}
                    title={
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__pfInI
                        )}
                      >
                        {"¿Tienes más preguntas? ¡Aquí te las respondemos!"}
                      </h2>
                    }
                  />
                ),

                value: args.faq
              })}
            </div>
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero",
    "header",
    "breadcrumb",
    "h1",
    "frame",
    "openBootcamp",
    "leftSide",
    "sectionHeading",
    "item1",
    "item2",
    "item3",
    "item4",
    "rightSide",
    "process",
    "feature1",
    "heading",
    "feature12",
    "heading2",
    "feature13",
    "heading3",
    "feature14",
    "heading4",
    "feature15",
    "heading5",
    "feature16",
    "heading6",
    "svg2",
    "svg3",
    "svg4",
    "courses",
    "testimonial",
    "leftColumn",
    "rightColumn",
    "faq",
    "content",
    "footer"
  ],
  hero: ["hero", "header", "breadcrumb", "h1", "frame"],
  header: ["header", "breadcrumb", "h1"],
  breadcrumb: ["breadcrumb"],
  h1: ["h1"],
  frame: ["frame"],
  openBootcamp: [
    "openBootcamp",
    "leftSide",
    "sectionHeading",
    "item1",
    "item2",
    "item3",
    "item4",
    "rightSide"
  ],
  leftSide: ["leftSide", "sectionHeading", "item1", "item2", "item3", "item4"],
  sectionHeading: ["sectionHeading"],
  item1: ["item1"],
  item2: ["item2"],
  item3: ["item3"],
  item4: ["item4"],
  rightSide: ["rightSide"],
  process: [
    "process",
    "feature1",
    "heading",
    "feature12",
    "heading2",
    "feature13",
    "heading3",
    "feature14",
    "heading4",
    "feature15",
    "heading5",
    "feature16",
    "heading6",
    "svg2",
    "svg3",
    "svg4"
  ],
  feature1: ["feature1", "heading"],
  heading: ["heading"],
  feature12: ["feature12", "heading2"],
  heading2: ["heading2"],
  feature13: ["feature13", "heading3"],
  heading3: ["heading3"],
  feature14: ["feature14", "heading4"],
  heading4: ["heading4"],
  feature15: ["feature15", "heading5"],
  heading5: ["heading5"],
  feature16: ["feature16", "heading6"],
  heading6: ["heading6"],
  svg2: ["svg2"],
  svg3: ["svg3"],
  svg4: ["svg4"],
  courses: ["courses"],
  testimonial: ["testimonial", "leftColumn", "rightColumn"],
  leftColumn: ["leftColumn"],
  rightColumn: ["rightColumn"],
  faq: ["faq", "content"],
  content: ["content"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  hero: "div";
  header: "div";
  breadcrumb: "div";
  h1: "h1";
  frame: "div";
  openBootcamp: "div";
  leftSide: "div";
  sectionHeading: "div";
  item1: "div";
  item2: "div";
  item3: "div";
  item4: "div";
  rightSide: "div";
  process: "div";
  feature1: "div";
  heading: "div";
  feature12: "div";
  heading2: "div";
  feature13: "div";
  heading3: "div";
  feature14: "div";
  heading4: "div";
  feature15: "div";
  heading5: "div";
  feature16: "div";
  heading6: "div";
  svg2: "div";
  svg3: "div";
  svg4: "div";
  courses: "div";
  testimonial: "div";
  leftColumn: "div";
  rightColumn: "div";
  faq: "div";
  content: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLandingCursos__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLandingCursos__VariantsArgs;
    args?: PlasmicLandingCursos__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLandingCursos__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLandingCursos__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLandingCursos__ArgProps,
          internalVariantPropNames: PlasmicLandingCursos__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLandingCursos__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLandingCursos";
  } else {
    func.displayName = `PlasmicLandingCursos.${nodeName}`;
  }
  return func;
}

export const PlasmicLandingCursos = Object.assign(
  // Top-level PlasmicLandingCursos renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    header: makeNodeComponent("header"),
    breadcrumb: makeNodeComponent("breadcrumb"),
    h1: makeNodeComponent("h1"),
    frame: makeNodeComponent("frame"),
    openBootcamp: makeNodeComponent("openBootcamp"),
    leftSide: makeNodeComponent("leftSide"),
    sectionHeading: makeNodeComponent("sectionHeading"),
    item1: makeNodeComponent("item1"),
    item2: makeNodeComponent("item2"),
    item3: makeNodeComponent("item3"),
    item4: makeNodeComponent("item4"),
    rightSide: makeNodeComponent("rightSide"),
    process: makeNodeComponent("process"),
    feature1: makeNodeComponent("feature1"),
    heading: makeNodeComponent("heading"),
    feature12: makeNodeComponent("feature12"),
    heading2: makeNodeComponent("heading2"),
    feature13: makeNodeComponent("feature13"),
    heading3: makeNodeComponent("heading3"),
    feature14: makeNodeComponent("feature14"),
    heading4: makeNodeComponent("heading4"),
    feature15: makeNodeComponent("feature15"),
    heading5: makeNodeComponent("heading5"),
    feature16: makeNodeComponent("feature16"),
    heading6: makeNodeComponent("heading6"),
    svg2: makeNodeComponent("svg2"),
    svg3: makeNodeComponent("svg3"),
    svg4: makeNodeComponent("svg4"),
    courses: makeNodeComponent("courses"),
    testimonial: makeNodeComponent("testimonial"),
    leftColumn: makeNodeComponent("leftColumn"),
    rightColumn: makeNodeComponent("rightColumn"),
    faq: makeNodeComponent("faq"),
    content: makeNodeComponent("content"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicLandingCursos
    internalVariantProps: PlasmicLandingCursos__VariantProps,
    internalArgProps: PlasmicLandingCursos__ArgProps
  }
);

export default PlasmicLandingCursos;
/* prettier-ignore-end */
