// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qJhJbLN2Wy56BDK1v9VeHg
// Component: N0SUR0mx8DpoE
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: -CnkElqEbFOKi/component
import Button from "../../Button"; // plasmic-import: W52igaDMzA10w6/component
import OfferItem from "../../OfferItem"; // plasmic-import: vMzCpGhRHn-/component
import TestimonialsLinkedin from "../../TestimonialsLinkedin"; // plasmic-import: br33Q-v40l8/component
import TestimonialItem from "../../TestimonialItem"; // plasmic-import: ZOePmbDjbr/component
import Footer from "../../Footer"; // plasmic-import: b5lOT72QRjzHLq/component

import { useScreenVariants as useScreenVariantsgfTNvlXeClRRx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GfTNvlXE_ClRRx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_bootcamp_v_2_0.module.css"; // plasmic-import: qJhJbLN2Wy56BDK1v9VeHg/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: N0SUR0mx8DpoE/css

import Group3Icon from "./icons/PlasmicIcon__Group3"; // plasmic-import: TSgwY4wyZHvI3q/icon
import NoLockIconIcon from "./icons/PlasmicIcon__NoLockIcon"; // plasmic-import: Ix2-73vMDr7_RT/icon
import Group4Icon from "./icons/PlasmicIcon__Group4"; // plasmic-import: 6Gam-izRFby8Oa/icon
import ExploreIconIcon from "./icons/PlasmicIcon__ExploreIcon"; // plasmic-import: i4jkC5OS9x/icon
import DiscordIconIcon from "./icons/PlasmicIcon__DiscordIcon"; // plasmic-import: N4DIrPBUx1/icon
import QuestionIconIcon from "./icons/PlasmicIcon__QuestionIcon"; // plasmic-import: QOmsQw0pu_/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: vVZm8N2wdn/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: MPKmKXARKW/icon
import Icon18Icon from "./icons/PlasmicIcon__Icon18"; // plasmic-import: yoyOd9c2bb/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: qiYpeOfka/icon
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: DJUuZGdWd7/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  testimonialsBox?: React.ReactNode;
  heroButton?: React.ReactNode;
  offersButton?: React.ReactNode;
  trainersButton?: React.ReactNode;
  platformButton?: React.ReactNode;
  communityButton?: React.ReactNode;
  button5?: React.ReactNode;
  empresasButton?: React.ReactNode;
  navbar?: React.ReactNode;
  roadmapTestAb?: React.ReactNode;
  testimoniosTestAb?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>(
  "testimonialsBox",
  "heroButton",
  "offersButton",
  "trainersButton",
  "platformButton",
  "communityButton",
  "button5",
  "empresasButton",
  "navbar",
  "roadmapTestAb",
  "testimoniosTestAb"
);

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  hero?: p.Flex<"div">;
  header?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  offers?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  trainers?: p.Flex<"div">;
  profile4?: p.Flex<"div">;
  container8?: p.Flex<"div">;
  sectionHeading5?: p.Flex<"div">;
  sectionTitle5?: p.Flex<"h3">;
  description5?: p.Flex<"p">;
  platform?: p.Flex<"div">;
  community?: p.Flex<"div">;
  testimonialsLinkedin?: p.Flex<typeof TestimonialsLinkedin>;
  testimonios?: p.Flex<"div">;
  empresas?: p.Flex<"div">;
  h5?: p.Flex<"h5">;
  sectionTitle?: p.Flex<"p">;
  sectionTitle2?: p.Flex<"p">;
  sectionTitle3?: p.Flex<"p">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgfTNvlXeClRRx()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />

        <meta
          key="og:image"
          property="og:image"
          content={
            "https://site-assets.plasmic.app/b47874ab2074ca70e2314275f73e0a28.png"
          }
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={
            "https://site-assets.plasmic.app/b47874ab2074ca70e2314275f73e0a28.png"
          }
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__hNJmn)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <Navbar
                  className={classNames("__wab_instance", sty.navbar__mKqe8)}
                  links={
                    <React.Fragment>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__aFipo
                        )}
                        color={"navLink" as const}
                        endIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg___0CZk
                            )}
                            role={"img"}
                          />
                        }
                        link={
                          "https://imagina-formacion.typeform.com/openmarketers" as const
                        }
                        size={"small" as const}
                        startIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__hy449
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"Consigue trabajo"}
                      </Button>

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__vsqRb
                        )}
                        color={"navLink" as const}
                        endIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__eMJz6
                            )}
                            role={"img"}
                          />
                        }
                        link={
                          "https://imagina-formacion.typeform.com/openmarketers" as const
                        }
                        size={"small" as const}
                        startIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__ru0Wl
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"Opiniones"}
                      </Button>

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__gFAsH
                        )}
                        color={"navLink" as const}
                        endIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__ghwSc
                            )}
                            role={"img"}
                          />
                        }
                        link={
                          "https://imagina-formacion.typeform.com/openmarketers" as const
                        }
                        size={"small" as const}
                        startIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__yaHnU
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"Especializaciones"}
                      </Button>
                    </React.Fragment>
                  }
                />
              ),

              value: args.navbar
            })}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            hasGap={true}
            className={classNames(projectcss.all, sty.hero)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__qxEfp)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                alt={"Desarrollador probando App" as const}
                className={classNames(projectcss.all, sty.freeBox__lCrHu)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.PlasmicImg
                    alt={"" as const}
                    className={classNames(sty.img__nhYpc)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "laptop")
                        ? ("100%" as const)
                        : hasVariant(globalVariants, "screen", "laptopL")
                        ? ("100%" as const)
                        : ("580px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("100%" as const)
                        : ("500px" as const)
                    }
                    loader={"plasmic"}
                    loading={"lazy" as const}
                    src={{
                      src: "https://img.plasmic.app/img-optimizer/v1/img/5fc8c319beca87bfc95d188be8d58260.png",
                      fullWidth: 722,
                      fullHeight: 803
                    }}
                  />
                ) : null}

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__cxUBg)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__kDjdP)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__o9CLi)}
                    >
                      <Group3Icon
                        className={classNames(projectcss.all, sty.svg___9VjQn)}
                        role={"img"}
                      />
                    </div>
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__igXFy)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gyQjM
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Personalizable"
                        : "Personalizable"}
                    </div>
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___9KHqk)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__miovz)}
                  >
                    <NoLockIconIcon
                      className={classNames(projectcss.all, sty.svg__i1EPx)}
                      role={"img"}
                    />
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__b6G8)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__a3GJi
                      )}
                    >
                      {"Sin compromisos"}
                    </div>
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__aQ37K)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xgnrX
                    )}
                  >
                    {"A tu ritmo"}
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__sLMs)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__uy3Xq)}
                    >
                      <Group4Icon
                        className={classNames(projectcss.all, sty.svg__jxAxH)}
                        role={"img"}
                      />
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__i3YGk)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"header"}
                  data-plasmic-override={overrides.header}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.header)}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"El bootcamp "}</React.Fragment>
                      {
                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.span__sX7Vr
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "laptop")
                            ? "gratuito"
                            : "gratuito"}
                        </span>
                      }
                      <React.Fragment>{" que se adapta a ti"}</React.Fragment>
                    </React.Fragment>
                  </h1>

                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p__oNiOl
                    )}
                  >
                    {
                      "Especialízate en desarrollo independientemente de tu nivel de conocimientos y experiencia, nosotros nos adaptaremos a tus objetivos."
                    }
                  </p>
                </p.Stack>

                {p.renderPlasmicSlot({
                  defaultContents: (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__ewn50
                      )}
                      color={"darkGray" as const}
                      endIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg___4ZMC)}
                          role={"img"}
                        />
                      }
                      link={
                        "https://campus.open-bootcamp.com/register" as const
                      }
                      startIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__qQUwl)}
                          role={"img"}
                        />
                      }
                    >
                      {"Empieza ya"}
                    </Button>
                  ),

                  value: args.heroButton
                })}
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"offers"}
            data-plasmic-override={overrides.offers}
            hasGap={true}
            className={classNames(projectcss.all, sty.offers)}
            id={"trabajo" as const}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__yfXag)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__eOHj5)}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__dr3ET)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wsp1L)}
                    >
                      <h2
                        data-plasmic-name={"h2"}
                        data-plasmic-override={overrides.h2}
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Te ayudamos a encontrar trabajo"
                          : "Te ayudamos a encontrar trabajo"}
                      </h2>

                      <p
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.p___1Nirb
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "A lo largo de tu formación recibirás asesoramiento para mejorar tu CV y te prepararemos para realizar entrevistas con nuestras empresas colaboradoras.\n\nEsta formación es gratuita para ti y NO se te descontará nada del salario de la oferta de trabajo que consigas."
                          : hasVariant(globalVariants, "screen", "laptop")
                          ? "A lo largo de tu formación recibirás asesoramiento para mejorar tu CV y te prepararemos para realizar entrevistas con nuestras empresas colaboradoras. Esta formación es gratuita para ti y NO se te descontará nada del salario de la oferta de trabajo que consigas."
                          : hasVariant(globalVariants, "screen", "laptopM")
                          ? "A lo largo de tu formación recibirás asesoramiento para mejorar tu CV y te prepararemos para realizar entrevistas con nuestras empresas colaboradoras. Esta formación es gratuita para ti y NO se te descontará nada del salario de la oferta de trabajo que consigas."
                          : "A lo largo de tu formación recibirás asesoramiento para mejorar tu CV y te prepararemos para realizar entrevistas con nuestras empresas colaboradoras.\n\nEsta formación es gratuita para ti y NO se te descontará nada del salario de la oferta de trabajo que consigas."}
                      </p>
                    </p.Stack>

                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__eRE
                          )}
                          color={"blue" as const}
                          endIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__tmuYb
                              )}
                              role={"img"}
                            />
                          }
                          link={
                            "https://campus.open-bootcamp.com/register" as const
                          }
                          startIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__gtxWo
                              )}
                              role={"img"}
                            />
                          }
                        >
                          {"Empieza ya"}
                        </Button>
                      ),

                      value: args.offersButton
                    })}
                  </p.Stack>
                ) : null}
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__v8DBg)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ec3HQ)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hWgN
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Te preparamos para diversos puestos:"}
                      </span>
                    </React.Fragment>
                  </div>

                  <OfferItem
                    className={classNames(
                      "__wab_instance",
                      sty.offerItem___98Gmd
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jc7Td
                        )}
                      >
                        {"FullStack Developer"}
                      </div>
                    }
                    slot2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__l1Ee8
                        )}
                      >
                        {"Git  |  JavaScript  |  Python  |  Angular..."}
                      </div>
                    }
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__bAs4V)}
                      displayHeight={"62px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"50px" as const}
                      loader={"plasmic"}
                      loading={"lazy" as const}
                      src={{
                        src: "https://img.plasmic.app/img-optimizer/v1/img/35bf1438cd89de20e42b8afb4150bc37.png",
                        fullWidth: 460,
                        fullHeight: 460
                      }}
                    />
                  </OfferItem>

                  <OfferItem
                    className={classNames(
                      "__wab_instance",
                      sty.offerItem__dbEPr
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fIcD
                        )}
                      >
                        {"Front-End Developer"}
                      </div>
                    }
                    slot2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8WiUs
                        )}
                      >
                        {"React  |  HTML y CSS  |  Angular  |  JavaScript..."}
                      </div>
                    }
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__pjOXb)}
                      displayHeight={"62px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"50px" as const}
                      loader={"plasmic"}
                      loading={"lazy" as const}
                      src={{
                        src: "https://img.plasmic.app/img-optimizer/v1/img/556fafcc720ba2d27aae47a17efdab34.png",
                        fullWidth: 460,
                        fullHeight: 460
                      }}
                    />
                  </OfferItem>

                  <OfferItem
                    className={classNames(
                      "__wab_instance",
                      sty.offerItem__uj7OY
                    )}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cD2JC
                        )}
                      >
                        {"Back-End Developer"}
                      </div>
                    }
                    slot2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kvhHa
                        )}
                      >
                        {"Spring  |  JUnit  |  Java  |  Git  |  Python..."}
                      </div>
                    }
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__agWti)}
                      displayHeight={"62px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"50px" as const}
                      loader={"plasmic"}
                      loading={"lazy" as const}
                      src={{
                        src: "https://img.plasmic.app/img-optimizer/v1/img/6445b650949a602ffc0abe924dd1c78d.png",
                        fullWidth: 460,
                        fullHeight: 460
                      }}
                    />
                  </OfferItem>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"trainers"}
            data-plasmic-override={overrides.trainers}
            hasGap={true}
            className={classNames(projectcss.all, sty.trainers)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__aNfne)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"profile4"}
                data-plasmic-override={overrides.profile4}
                hasGap={true}
                className={classNames(projectcss.all, sty.profile4)}
              >
                <p.PlasmicImg
                  alt={"Profesores de la Plataforma" as const}
                  className={classNames(sty.img__xyAJm)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("auto" as const)
                      : ("520px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("70vw" as const)
                      : hasVariant(globalVariants, "screen", "laptopM")
                      ? ("47vw" as const)
                      : hasVariant(globalVariants, "screen", "laptopL")
                      ? ("100%" as const)
                      : ("100%" as const)
                  }
                  loader={"plasmic"}
                  src={{
                    src: "https://img.plasmic.app/img-optimizer/v1/img/7264b76abfbc067992279b813d0110fc.png",
                    fullWidth: 861,
                    fullHeight: 798
                  }}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"container8"}
                data-plasmic-override={overrides.container8}
                hasGap={true}
                className={classNames(projectcss.all, sty.container8)}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__yoeee)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"sectionHeading5"}
                      data-plasmic-override={overrides.sectionHeading5}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.sectionHeading5
                      )}
                    >
                      <h3
                        data-plasmic-name={"sectionTitle5"}
                        data-plasmic-override={overrides.sectionTitle5}
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.sectionTitle5
                        )}
                      >
                        {"Los mejores profesores"}
                      </h3>

                      <p
                        data-plasmic-name={"description5"}
                        data-plasmic-override={overrides.description5}
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.description5
                        )}
                      >
                        {
                          "Contamos con los mejores profesionales del sector de la formación, encargados de crear el contenido de los cursos de nuestra plataforma junto a nuestros técnicos y desarrolladores."
                        }
                      </p>
                    </p.Stack>
                  </p.Stack>
                ) : null}
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__luX6E
                      )}
                      color={"blue" as const}
                      endIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg___1TIy)}
                          role={"img"}
                        />
                      }
                      link={
                        "https://campus.open-bootcamp.com/register" as const
                      }
                      startIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__fqAri)}
                          role={"img"}
                        />
                      }
                    >
                      {"Empieza ya"}
                    </Button>
                  ),

                  value: args.trainersButton
                })}
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"platform"}
            data-plasmic-override={overrides.platform}
            hasGap={true}
            className={classNames(projectcss.all, sty.platform)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__hyidR)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___13ECw)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__n5MG5)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__gRdCd
                      )}
                    >
                      {"Una plataforma única"}
                    </h3>

                    <p
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p__eYmu0
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Nuestro campus diseñado por formadores expertos permite vivir la mejor experiencia de aprendizaje."
                        : "Nuestro campus diseñado por formadores expertos permite vivir la mejor experiencia de aprendizaje."}
                    </p>
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__t2CeD)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__qM1Uh
                          )}
                          color={"white" as const}
                          endIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__d3GJs
                              )}
                              role={"img"}
                            />
                          }
                          link={
                            "https://campus.open-bootcamp.com/register" as const
                          }
                          startIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__z9ZIb
                              )}
                              role={"img"}
                            />
                          }
                        >
                          {"Empieza ya"}
                        </Button>
                      ),

                      value: args.platformButton
                    })}
                  </div>
                </p.Stack>
              ) : null}

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nf7Fq)}
              >
                <p.PlasmicImg
                  alt={"Diseño Plataforma" as const}
                  className={classNames(sty.img___5Fbnv)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("492px" as const)
                      : hasVariant(globalVariants, "screen", "laptopM")
                      ? ("595px" as const)
                      : ("620px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100vw" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("100vw" as const)
                      : hasVariant(globalVariants, "screen", "laptopM")
                      ? ("100%" as const)
                      : hasVariant(globalVariants, "screen", "laptopL")
                      ? ("57vw" as const)
                      : ("59vw" as const)
                  }
                  loader={"plasmic"}
                  src={{
                    src: "https://img.plasmic.app/img-optimizer/v1/img/88acad0b601a7f4e5e4ef52a5d5f6438.png",
                    fullWidth: 2880,
                    fullHeight: 1696
                  }}
                />
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"community"}
            data-plasmic-override={overrides.community}
            hasGap={true}
            className={classNames(projectcss.all, sty.community)}
          >
            {(hasVariant(globalVariants, "screen", "laptopL") ? true : true) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__v68SM)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wcvoV)}
                >
                  <p.PlasmicImg
                    alt={"Comunidad Diferencial" as const}
                    className={classNames(sty.img__sqcTu)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("176px" as const)
                        : hasVariant(globalVariants, "screen", "laptop")
                        ? ("550px" as const)
                        : ("445px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("334px" as const)
                        : hasVariant(globalVariants, "screen", "laptop")
                        ? ("674px" as const)
                        : hasVariant(globalVariants, "screen", "laptopL")
                        ? ("1080px" as const)
                        : ("1082px" as const)
                    }
                    loader={"plasmic"}
                    src={{
                      src: "https://img.plasmic.app/img-optimizer/v1/img/a87fbe0cccbefaa67eff33a1be51dc9b.png",
                      fullWidth: 1619,
                      fullHeight: 852
                    }}
                  />
                </p.Stack>

                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___8GzHp)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__nmWlr)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__ms72Z
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "laptop")
                          ? "Una comunidad diferencial"
                          : "Una comunidad diferencial"}
                      </h3>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__azfbe
                        )}
                      >
                        <ExploreIconIcon
                          className={classNames(projectcss.all, sty.svg__bIy4U)}
                          role={"img"}
                        />

                        <p
                          className={classNames(
                            projectcss.all,
                            projectcss.p,
                            projectcss.__wab_text,
                            sty.p__xBa2
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "laptop") ? (
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <span
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.span,
                                    projectcss.__wab_text,
                                    projectcss.plasmic_default__inline,
                                    sty.span___4Elde
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "laptop"
                                  )
                                    ? "Explora"
                                    : "Explora"}
                                </span>
                              }
                              <React.Fragment>
                                {
                                  " los foros de cada una de las tecnologías que impartimos."
                                }
                              </React.Fragment>
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <span
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.span,
                                    projectcss.__wab_text,
                                    projectcss.plasmic_default__inline,
                                    sty.span___4Elde
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "laptop"
                                  )
                                    ? "Explora"
                                    : "Explora"}
                                </span>
                              }
                              <React.Fragment>
                                {
                                  " los foros de cada una de las tecnologías que impartimos."
                                }
                              </React.Fragment>
                            </React.Fragment>
                          )}
                        </p>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__y3Xdm
                        )}
                      >
                        <DiscordIconIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___4KqhX
                          )}
                          role={"img"}
                        />

                        <p
                          className={classNames(
                            projectcss.all,
                            projectcss.p,
                            projectcss.__wab_text,
                            sty.p__c6Pj
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <span
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.span,
                                    projectcss.__wab_text,
                                    projectcss.plasmic_default__inline,
                                    sty.span__nPzZe
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "Comparte"
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "laptop"
                                      )
                                    ? "Comparte"
                                    : "Comparte"}
                                </span>
                              }
                              <React.Fragment>
                                {
                                  " conocimientos en los canales de Discord de los que desees formar parte. "
                                }
                              </React.Fragment>
                            </React.Fragment>
                          ) : hasVariant(globalVariants, "screen", "laptop") ? (
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <span
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.span,
                                    projectcss.__wab_text,
                                    projectcss.plasmic_default__inline,
                                    sty.span__nPzZe
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "Comparte"
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "laptop"
                                      )
                                    ? "Comparte"
                                    : "Comparte"}
                                </span>
                              }
                              <React.Fragment>
                                {
                                  " conocimientos en los canales de Discord de los que desees formar parte. "
                                }
                              </React.Fragment>
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <span
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.span,
                                    projectcss.__wab_text,
                                    projectcss.plasmic_default__inline,
                                    sty.span__nPzZe
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "Comparte"
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "laptop"
                                      )
                                    ? "Comparte"
                                    : "Comparte"}
                                </span>
                              }
                              <React.Fragment>
                                {
                                  " conocimientos en los canales de Discord de los que desees formar parte. "
                                }
                              </React.Fragment>
                            </React.Fragment>
                          )}
                        </p>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__clH4D
                        )}
                      >
                        <QuestionIconIcon
                          className={classNames(projectcss.all, sty.svg__zg4Wj)}
                          role={"img"}
                        />

                        <p
                          className={classNames(
                            projectcss.all,
                            projectcss.p,
                            projectcss.__wab_text,
                            sty.p__zrxnd
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "laptop") ? (
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <span
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.span,
                                    projectcss.__wab_text,
                                    projectcss.plasmic_default__inline,
                                    sty.span__whAz4
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "laptop"
                                  )
                                    ? "Resuelve"
                                    : "Resuelve"}
                                </span>
                              }
                              <React.Fragment>
                                {
                                  " tus dudas con tutorías en tiempo real con nuestros formadores."
                                }
                              </React.Fragment>
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <span
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.span,
                                    projectcss.__wab_text,
                                    projectcss.plasmic_default__inline,
                                    sty.span__whAz4
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "laptop"
                                  )
                                    ? "Resuelve"
                                    : "Resuelve"}
                                </span>
                              }
                              <React.Fragment>
                                {
                                  " tus dudas con tutorías en tiempo real con nuestros formadores."
                                }
                              </React.Fragment>
                            </React.Fragment>
                          )}
                        </p>
                      </p.Stack>
                    </p.Stack>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__hT60B)}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__dipZc
                            )}
                            color={"blue" as const}
                            endIcon={
                              <svg
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__j2Fu6
                                )}
                                role={"img"}
                              />
                            }
                            link={
                              "https://campus.open-bootcamp.com/register" as const
                            }
                            startIcon={
                              <svg
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__b935N
                                )}
                                role={"img"}
                              />
                            }
                          >
                            {"Empieza ya"}
                          </Button>
                        ),

                        value: args.communityButton
                      })}
                    </div>
                  </p.Stack>
                ) : null}
              </p.Stack>
            ) : null}
          </p.Stack>

          {(hasVariant(globalVariants, "screen", "laptopL") ? true : true) ? (
            <TestimonialsLinkedin
              data-plasmic-name={"testimonialsLinkedin"}
              data-plasmic-override={overrides.testimonialsLinkedin}
              button5={p.renderPlasmicSlot({
                defaultContents: (
                  <Button
                    className={classNames("__wab_instance", sty.button__vGpHv)}
                    color={"blue" as const}
                    endIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__gyUpa)}
                        role={"img"}
                      />
                    }
                    link={"https://campus.open-bootcamp.com/register" as const}
                    startIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__cxns4)}
                        role={"img"}
                      />
                    }
                  >
                    {"Empieza ya"}
                  </Button>
                ),

                value: args.button5
              })}
              className={classNames("__wab_instance", sty.testimonialsLinkedin)}
              testimonialsBox={p.renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    <TestimonialItem
                      className={classNames(
                        "__wab_instance",
                        sty.testimonialItem__klSrG
                      )}
                      description={
                        <p
                          className={classNames(
                            projectcss.all,
                            projectcss.p,
                            projectcss.__wab_text,
                            sty.p__ziK5L
                          )}
                        >
                          {
                            '"Gracias a OpenBootcamp en 4 meses pude actualizarme y conocer nuevas tecnologías con las que conseguí un trabajo como FullStack en el que estoy muy contenta".'
                          }
                        </p>
                      }
                      linkedin={
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__hqJwo
                          )}
                          link={
                            "https://www.linkedin.com/in/mar%C3%ADa-beatriz-vivanco-marrero-a8b30421b/" as const
                          }
                          socialIcons={"linkedin" as const}
                        />
                      }
                      title={"María Beatriz Vivanco"}
                      userImage={
                        <p.PlasmicImg
                          alt={"Beatriz Vivanco" as const}
                          className={classNames(sty.img__jYtci)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://img.plasmic.app/img-optimizer/v1/img/e9b32061c4bb1e216c6ffc5ce88fa928.png",
                            fullWidth: 50,
                            fullHeight: 50
                          }}
                        />
                      }
                    />

                    <TestimonialItem
                      className={classNames(
                        "__wab_instance",
                        sty.testimonialItem__xnajX
                      )}
                      description={
                        <p
                          className={classNames(
                            projectcss.all,
                            projectcss.p,
                            projectcss.__wab_text,
                            sty.p__ol3RQ
                          )}
                        >
                          {
                            '"Vengo de la rama del diseño gráfico y he estado estudiando en OpenBootcamp 2-3 meses y gracias a esta formación, estoy trabajando de desarrolladora web en una empresa".'
                          }
                        </p>
                      }
                      linkedin={
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__nw2Wf
                          )}
                          link={
                            "https://www.linkedin.com/in/anafernandezvaldes/" as const
                          }
                          socialIcons={"linkedin" as const}
                        />
                      }
                      title={"Ana Fernández"}
                      userImage={
                        <p.PlasmicImg
                          alt={"Ana Fernández" as const}
                          className={classNames(sty.img___19Iq1)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://img.plasmic.app/img-optimizer/v1/img/35ec1f1c468cd69559a35e7d7322324b.png",
                            fullWidth: 75,
                            fullHeight: 75
                          }}
                        />
                      }
                      videoSlot={
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qIfQg
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__lYdRp
                            )}
                          >
                            <Icon9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__ie6I
                              )}
                              role={"img"}
                            />
                          </p.Stack>
                        </p.Stack>
                      }
                    />

                    <TestimonialItem
                      className={classNames(
                        "__wab_instance",
                        sty.testimonialItem__jDlk4
                      )}
                      description={
                        <p
                          className={classNames(
                            projectcss.all,
                            projectcss.p,
                            projectcss.__wab_text,
                            sty.p__yfYoe
                          )}
                        >
                          {
                            '"Entré a principios de Octubre cuando empezó OB y el 10 de Enero ya estaba firmando el contrato como programador".'
                          }
                        </p>
                      }
                      linkedin={
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__gD7S
                          )}
                          link={"https://www.linkedin.com/in/ibatz/" as const}
                          socialIcons={"linkedin" as const}
                        />
                      }
                      title={"Ignacio de Bats"}
                      userImage={
                        <p.PlasmicImg
                          alt={"Ignacio Bats" as const}
                          className={classNames(sty.img__ycRyg)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://img.plasmic.app/img-optimizer/v1/img/1c15226b4fe0cf3b7e26794fd30cffd3.png",
                            fullWidth: 50,
                            fullHeight: 50
                          }}
                        />
                      }
                      videoSlot={
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__rpNaY
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___0WkrM
                            )}
                          >
                            <Icon9Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__dvvq3
                              )}
                              role={"img"}
                            />
                          </p.Stack>
                        </p.Stack>
                      }
                    />
                  </React.Fragment>
                ),
                value: args.testimonialsBox
              })}
            />
          ) : null}
          {(hasVariant(globalVariants, "screen", "laptopL") ? true : true) ? (
            <div
              data-plasmic-name={"testimonios"}
              data-plasmic-override={overrides.testimonios}
              className={classNames(projectcss.all, sty.testimonios)}
            >
              {p.renderPlasmicSlot({
                defaultContents: null,
                value: args.testimoniosTestAb
              })}
            </div>
          ) : null}

          <div
            className={classNames(projectcss.all, sty.freeBox__oP2Pq)}
            id={"" as const}
          >
            {p.renderPlasmicSlot({
              defaultContents: null,
              value: args.roadmapTestAb
            })}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"empresas"}
            data-plasmic-override={overrides.empresas}
            hasGap={true}
            className={classNames(projectcss.all, sty.empresas)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___2E5J)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__spVys)}
              >
                <p.PlasmicImg
                  alt={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("Empresa buscando trabajadores" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("Diseño Plataforma" as const)
                      : hasVariant(globalVariants, "screen", "laptopL")
                      ? ("Empresa buscando trabajadores" as const)
                      : ("Empresa buscando trabajadores" as const)
                  }
                  className={classNames(sty.img__lQxy)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("492px" as const)
                      : hasVariant(globalVariants, "screen", "laptopL")
                      ? ("775px" as const)
                      : ("800px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100vw" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("100vw" as const)
                      : hasVariant(globalVariants, "screen", "laptopL")
                      ? ("52vw" as const)
                      : ("52vw" as const)
                  }
                  loader={"plasmic"}
                  src={{
                    src: "https://img.plasmic.app/img-optimizer/v1/img/33d76f89076fc9f3f0179a28d002cd39.png",
                    fullWidth: 1300,
                    fullHeight: 946
                  }}
                />
              </p.Stack>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptop")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptopL")
                  ? true
                  : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qdfQ3)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ejKpm)}
                  >
                    <h5
                      data-plasmic-name={"h5"}
                      data-plasmic-override={overrides.h5}
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5
                      )}
                    >
                      {"¿Eres una empresa? "}
                    </h5>

                    <p
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p___69M0H
                      )}
                    >
                      {
                        "OpenBootcamp te ofrece a los mejores profesionales del sector para incorporarse a tu plantilla."
                      }
                    </p>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__fV5M)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__hGhzb)}
                    >
                      <Icon18Icon
                        className={classNames(projectcss.all, sty.svg__uKtB7)}
                        role={"img"}
                      />

                      <p
                        data-plasmic-name={"sectionTitle"}
                        data-plasmic-override={overrides.sectionTitle}
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.sectionTitle
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "laptopL")
                          ? "Desarrolladores comprometidos"
                          : "Desarrolladores comprometidos"}
                      </p>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__cczf0)}
                    >
                      <Icon19Icon
                        className={classNames(projectcss.all, sty.svg__cIg6S)}
                        role={"img"}
                      />

                      <p
                        data-plasmic-name={"sectionTitle2"}
                        data-plasmic-override={overrides.sectionTitle2}
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.sectionTitle2
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "laptopL")
                          ? "Elimina la rotación"
                          : "Elimina la rotación"}
                      </p>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__uAAnv)}
                    >
                      <Icon20Icon
                        className={classNames(projectcss.all, sty.svg__imJNl)}
                        role={"img"}
                      />

                      <p
                        data-plasmic-name={"sectionTitle3"}
                        data-plasmic-override={overrides.sectionTitle3}
                        className={classNames(
                          projectcss.all,
                          projectcss.p,
                          projectcss.__wab_text,
                          sty.sectionTitle3
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "laptopL")
                          ? "Desarrolladores en 1 semana"
                          : "Desarrolladores en 1 semana"}
                      </p>
                    </p.Stack>
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.freeBox___0DX9G)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__dvza7
                          )}
                          color={"white" as const}
                          endIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__bbysU
                              )}
                              role={"img"}
                            />
                          }
                          link={"/empresas" as const}
                          startIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__vo5Z
                              )}
                              role={"img"}
                            />
                          }
                        >
                          {"Contrata desarrolladores"}
                        </Button>
                      ),

                      value: args.empresasButton
                    })}
                  </div>
                </p.Stack>
              ) : null}
            </p.Stack>
          </p.Stack>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero",
    "header",
    "h1",
    "offers",
    "h2",
    "trainers",
    "profile4",
    "container8",
    "sectionHeading5",
    "sectionTitle5",
    "description5",
    "platform",
    "community",
    "testimonialsLinkedin",
    "testimonios",
    "empresas",
    "h5",
    "sectionTitle",
    "sectionTitle2",
    "sectionTitle3",
    "footer"
  ],
  hero: ["hero", "header", "h1"],
  header: ["header", "h1"],
  h1: ["h1"],
  offers: ["offers", "h2"],
  h2: ["h2"],
  trainers: [
    "trainers",
    "profile4",
    "container8",
    "sectionHeading5",
    "sectionTitle5",
    "description5"
  ],
  profile4: ["profile4"],
  container8: [
    "container8",
    "sectionHeading5",
    "sectionTitle5",
    "description5"
  ],
  sectionHeading5: ["sectionHeading5", "sectionTitle5", "description5"],
  sectionTitle5: ["sectionTitle5"],
  description5: ["description5"],
  platform: ["platform"],
  community: ["community"],
  testimonialsLinkedin: ["testimonialsLinkedin"],
  testimonios: ["testimonios"],
  empresas: [
    "empresas",
    "h5",
    "sectionTitle",
    "sectionTitle2",
    "sectionTitle3"
  ],
  h5: ["h5"],
  sectionTitle: ["sectionTitle"],
  sectionTitle2: ["sectionTitle2"],
  sectionTitle3: ["sectionTitle3"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  hero: "div";
  header: "div";
  h1: "h1";
  offers: "div";
  h2: "h2";
  trainers: "div";
  profile4: "div";
  container8: "div";
  sectionHeading5: "div";
  sectionTitle5: "h3";
  description5: "p";
  platform: "div";
  community: "div";
  testimonialsLinkedin: typeof TestimonialsLinkedin;
  testimonios: "div";
  empresas: "div";
  h5: "h5";
  sectionTitle: "p";
  sectionTitle2: "p";
  sectionTitle3: "p";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    header: makeNodeComponent("header"),
    h1: makeNodeComponent("h1"),
    offers: makeNodeComponent("offers"),
    h2: makeNodeComponent("h2"),
    trainers: makeNodeComponent("trainers"),
    profile4: makeNodeComponent("profile4"),
    container8: makeNodeComponent("container8"),
    sectionHeading5: makeNodeComponent("sectionHeading5"),
    sectionTitle5: makeNodeComponent("sectionTitle5"),
    description5: makeNodeComponent("description5"),
    platform: makeNodeComponent("platform"),
    community: makeNodeComponent("community"),
    testimonialsLinkedin: makeNodeComponent("testimonialsLinkedin"),
    testimonios: makeNodeComponent("testimonios"),
    empresas: makeNodeComponent("empresas"),
    h5: makeNodeComponent("h5"),
    sectionTitle: makeNodeComponent("sectionTitle"),
    sectionTitle2: makeNodeComponent("sectionTitle2"),
    sectionTitle3: makeNodeComponent("sectionTitle3"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
