// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qJhJbLN2Wy56BDK1v9VeHg
// Component: TnIQZSsKCQf
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: -CnkElqEbFOKi/component
import Button from "../../Button"; // plasmic-import: W52igaDMzA10w6/component
import LinkOb from "../../LinkOb"; // plasmic-import: MCZw6vVbPKy/component
import TestimonialsTexts from "../../TestimonialsTexts"; // plasmic-import: PZVpznDmWug/component
import ProfileImage from "../../ProfileImage"; // plasmic-import: 2Y7usthzRd/component
import CourseLandingFaq from "../../CourseLandingFaq"; // plasmic-import: Mmwxop3xQ3/component
import Footer from "../../Footer"; // plasmic-import: b5lOT72QRjzHLq/component

import { useScreenVariants as useScreenVariantsgfTNvlXeClRRx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GfTNvlXE_ClRRx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_bootcamp_v_2_0.module.css"; // plasmic-import: qJhJbLN2Wy56BDK1v9VeHg/projectcss
import sty from "./PlasmicLandingProgramacion.module.css"; // plasmic-import: TnIQZSsKCQf/css

import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: MPKmKXARKW/icon
import UnionIcon from "./icons/PlasmicIcon__Union"; // plasmic-import: tlsIAHVBd4/icon
import Vector8Icon from "./icons/PlasmicIcon__Vector8"; // plasmic-import: icZS_od47y/icon
import Vector9Icon from "./icons/PlasmicIcon__Vector9"; // plasmic-import: mVwYU7p2e/icon
import Vector11Icon from "./icons/PlasmicIcon__Vector11"; // plasmic-import: aDS2HTetYW/icon
import Icon27Icon from "./icons/PlasmicIcon__Icon27"; // plasmic-import: hKJX8YlwbG9/icon
import Icon30Icon from "./icons/PlasmicIcon__Icon30"; // plasmic-import: L0hZU5Oak/icon

export type PlasmicLandingProgramacion__VariantMembers = {};

export type PlasmicLandingProgramacion__VariantsArgs = {};
type VariantPropType = keyof PlasmicLandingProgramacion__VariantsArgs;
export const PlasmicLandingProgramacion__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLandingProgramacion__ArgsType = {
  heroButton?: React.ReactNode;
  testimonialsUsers?: React.ReactNode;
  leftArrow?: React.ReactNode;
  rightArrow?: React.ReactNode;
  testimonialsText?: React.ReactNode;
  faq?: React.ReactNode;
  navbar?: React.ReactNode;
  breadcrumb?: React.ReactNode;
  roadmapContainer?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLandingProgramacion__ArgsType;
export const PlasmicLandingProgramacion__ArgProps = new Array<ArgPropType>(
  "heroButton",
  "testimonialsUsers",
  "leftArrow",
  "rightArrow",
  "testimonialsText",
  "faq",
  "navbar",
  "breadcrumb",
  "roadmapContainer"
);

export type PlasmicLandingProgramacion__OverridesType = {
  root?: p.Flex<"div">;
  hero?: p.Flex<"div">;
  bg?: p.Flex<"div">;
  floatItem2?: p.Flex<"div">;
  group1000001689?: p.Flex<"div">;
  frame1000001897?: p.Flex<"div">;
  frame1000001898?: p.Flex<"div">;
  frame1000001899?: p.Flex<"div">;
  header?: p.Flex<"div">;
  breadcrumb?: p.Flex<"div">;
  sectionHeading2?: p.Flex<"h1">;
  p?: p.Flex<"p">;
  floatItem01?: p.Flex<"div">;
  ui01?: p.Flex<"svg">;
  openBootcamp?: p.Flex<"div">;
  leftSide?: p.Flex<"div">;
  sectionHeading?: p.Flex<"div">;
  item1?: p.Flex<"div">;
  item2?: p.Flex<"div">;
  item3?: p.Flex<"div">;
  item4?: p.Flex<"div">;
  rightSide?: p.Flex<"div">;
  roadmap?: p.Flex<"div">;
  sectionHeadingRoadmap?: p.Flex<"div">;
  testimonial?: p.Flex<"div">;
  leftColumn?: p.Flex<"div">;
  rightColumn?: p.Flex<"div">;
  faq?: p.Flex<"div">;
  content?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultLandingProgramacionProps {}

function PlasmicLandingProgramacion__RenderFunc(props: {
  variants: PlasmicLandingProgramacion__VariantsArgs;
  args: PlasmicLandingProgramacion__ArgsType;
  overrides: PlasmicLandingProgramacion__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgfTNvlXeClRRx()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__cPnPl)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <Navbar
                  className={classNames("__wab_instance", sty.navbar___6OSd)}
                />
              ),

              value: args.navbar
            })}
          </div>

          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              hasGap={true}
              className={classNames(projectcss.all, sty.hero)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptopL")
                  ? true
                  : true
              ) ? (
                <div
                  data-plasmic-name={"bg"}
                  data-plasmic-override={overrides.bg}
                  className={classNames(projectcss.all, sty.bg)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__lrbF)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "laptop")
                          ? true
                          : true
                      ) ? (
                        <div
                          data-plasmic-name={"floatItem2"}
                          data-plasmic-override={overrides.floatItem2}
                          className={classNames(projectcss.all, sty.floatItem2)}
                        >
                          <div
                            data-plasmic-name={"group1000001689"}
                            data-plasmic-override={overrides.group1000001689}
                            className={classNames(
                              projectcss.all,
                              sty.group1000001689
                            )}
                          >
                            <p.Stack
                              as={"div"}
                              data-plasmic-name={"frame1000001897"}
                              data-plasmic-override={overrides.frame1000001897}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.frame1000001897
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___1MrTw
                                )}
                              >
                                {"JS"}
                              </div>
                            </p.Stack>

                            <p.Stack
                              as={"div"}
                              data-plasmic-name={"frame1000001898"}
                              data-plasmic-override={overrides.frame1000001898}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.frame1000001898
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___9Nfp1
                                )}
                              >
                                {"C#"}
                              </div>
                            </p.Stack>

                            <p.Stack
                              as={"div"}
                              data-plasmic-name={"frame1000001899"}
                              data-plasmic-override={overrides.frame1000001899}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.frame1000001899
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___0Fxgr
                                )}
                              >
                                {"PHP"}
                              </div>
                            </p.Stack>
                          </div>
                        </div>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dfzg
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"header"}
                            data-plasmic-override={overrides.header}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.header)}
                          >
                            <div
                              data-plasmic-name={"breadcrumb"}
                              data-plasmic-override={overrides.breadcrumb}
                              className={classNames(
                                projectcss.all,
                                sty.breadcrumb
                              )}
                            >
                              {p.renderPlasmicSlot({
                                defaultContents: null,
                                value: args.breadcrumb
                              })}
                            </div>

                            <p.Stack
                              as={"h1"}
                              data-plasmic-name={"sectionHeading2"}
                              data-plasmic-override={overrides.sectionHeading2}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                projectcss.h1,
                                sty.sectionHeading2
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gl6Zm
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "Aprende a\nprogramar desde "
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "laptop"
                                    )
                                  ? "Aprende a programar"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "laptopL"
                                    )
                                  ? "Aprende a programar desde 0"
                                  : "Aprende a programar desde 0"}
                              </div>

                              {(
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? true
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "laptop"
                                    )
                                  ? true
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "laptopL"
                                    )
                                  ? true
                                  : true
                              ) ? (
                                <p.Stack
                                  as={"div"}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__loxyZ
                                  )}
                                >
                                  {(
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "laptop"
                                    )
                                      ? true
                                      : hasVariant(
                                          globalVariants,
                                          "screen",
                                          "laptopL"
                                        )
                                      ? true
                                      : false
                                  ) ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__gVhtI
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "0"
                                        : hasVariant(
                                            globalVariants,
                                            "screen",
                                            "laptop"
                                          )
                                        ? "desde 0"
                                        : hasVariant(
                                            globalVariants,
                                            "screen",
                                            "laptopL"
                                          )
                                        ? "Aprende a programar desde 0"
                                        : "Aprende a programar desde 0"}
                                    </div>
                                  ) : null}
                                  {(
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "laptop"
                                    )
                                      ? true
                                      : hasVariant(
                                          globalVariants,
                                          "screen",
                                          "laptopL"
                                        )
                                      ? true
                                      : false
                                  ) ? (
                                    <span
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.span,
                                        projectcss.__wab_text,
                                        sty.span__koMvB
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "completamente"
                                        : hasVariant(
                                            globalVariants,
                                            "screen",
                                            "laptop"
                                          )
                                        ? "completamente"
                                        : hasVariant(
                                            globalVariants,
                                            "screen",
                                            "laptopL"
                                          )
                                        ? "Aprende a programar desde 0"
                                        : "Aprende a programar desde 0"}
                                    </span>
                                  ) : null}
                                </p.Stack>
                              ) : null}
                              {(
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? true
                                  : true
                              ) ? (
                                <span
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.span,
                                    projectcss.__wab_text,
                                    sty.span__w1Wgp
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "gratis"
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "laptop"
                                      )
                                    ? "gratis"
                                    : hasVariant(
                                        globalVariants,
                                        "screen",
                                        "laptopL"
                                      )
                                    ? "completamente gratis"
                                    : "completamente gratis"}
                                </span>
                              ) : null}
                            </p.Stack>

                            <p
                              data-plasmic-name={"p"}
                              data-plasmic-override={overrides.p}
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              ) ? (
                                "Descubre una gran variedad de\ncursos gratuitos para adentrarte \nen el apasionante mundo de la programación."
                              ) : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "laptop"
                                ) ? (
                                "Descubre una gran variedad de cursos gratuitos para adentrarte \nen el apasionante mundo de la programación."
                              ) : hasVariant(
                                  globalVariants,
                                  "screen",
                                  "laptopL"
                                ) ? (
                                "Descubre una gran variedad de cursos gratuitos \npara adentrarte en el apasionante mundo \nde la programación."
                              ) : (
                                <React.Fragment>
                                  <React.Fragment>
                                    {"En OB tenemos "}
                                  </React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {
                                      "los mejores cursos para aprender a programar"
                                    }
                                  </span>
                                  <React.Fragment>{". Cursos "}</React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"teóricos y "}
                                  </span>
                                  <React.Fragment>{"\n"}</React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"prácticos"}
                                  </span>
                                  <React.Fragment>
                                    {
                                      " para todos los niveles. Resuelve tus dudas con nuestros "
                                    }
                                  </React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"Tutores"}
                                  </span>
                                  <React.Fragment>
                                    {", en \nnuestros "}
                                  </React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"Foros"}
                                  </span>
                                  <React.Fragment>
                                    {" o en nuestra "}
                                  </React.Fragment>
                                  <span
                                    className={
                                      "plasmic_default__all plasmic_default__span"
                                    }
                                    style={{ fontWeight: 700 }}
                                  >
                                    {"Comunidad de Discord"}
                                  </span>
                                  <React.Fragment>{"."}</React.Fragment>
                                </React.Fragment>
                              )}
                            </p>
                          </p.Stack>

                          {p.renderPlasmicSlot({
                            defaultContents: (
                              <Button
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__upXAg
                                )}
                                color={"darkGray" as const}
                                endIcon={
                                  <svg
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__vzSra
                                    )}
                                    role={"img"}
                                  />
                                }
                                link={
                                  "https://campus.open-bootcamp.com/register" as const
                                }
                                startIcon={
                                  <svg
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__dm3Sl
                                    )}
                                    role={"img"}
                                  />
                                }
                              >
                                {"Empieza ya"}
                              </Button>
                            ),

                            value: args.heroButton
                          })}
                        </p.Stack>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "laptop")
                          ? true
                          : true
                      ) ? (
                        <div
                          data-plasmic-name={"floatItem01"}
                          data-plasmic-override={overrides.floatItem01}
                          className={classNames(
                            projectcss.all,
                            sty.floatItem01
                          )}
                        >
                          <UnionIcon
                            data-plasmic-name={"ui01"}
                            data-plasmic-override={overrides.ui01}
                            className={classNames(projectcss.all, sty.ui01)}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                    </p.Stack>
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__sIc8U)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loader={"plasmic"}
                  loading={"lazy" as const}
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: "https://site-assets.plasmic.app/5759d41ce607dd722a73377d053afcff.svg",
                          fullWidth: 161,
                          fullHeight: 150,
                          aspectRatio: 1.073795
                        }
                      : undefined
                  }
                />
              ) : null}
            </p.Stack>
          ) : null}

          <p.Stack
            as={"div"}
            data-plasmic-name={"openBootcamp"}
            data-plasmic-override={overrides.openBootcamp}
            hasGap={true}
            className={classNames(projectcss.all, sty.openBootcamp)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rM2T)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"leftSide"}
                data-plasmic-override={overrides.leftSide}
                hasGap={true}
                className={classNames(projectcss.all, sty.leftSide)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"sectionHeading"}
                  data-plasmic-override={overrides.sectionHeading}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.sectionHeading)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__iMzmU
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "laptop")
                      ? "¿Cómo aprender a programar con OpenBootcamp?"
                      : hasVariant(globalVariants, "screen", "laptopL")
                      ? "¿Cómo aprender a programar con OpenBootcamp?"
                      : "¿Cómo aprender a programar con OpenBootcamp?"}
                  </h2>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__s17Ec
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Un programa pionero en el que recibirás toda la formación que necesites hasta que encuentres \nun mejor empleo."
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? "Un programa pionero en el que recibirás toda la formación\nque necesites hasta que encuentres un mejor empleo."
                      : "Un programa pionero en el que recibirás toda la formación que necesites para que encuentres un mejor empleo."}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tQyyb)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"item1"}
                    data-plasmic-override={overrides.item1}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.item1)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9LIKy
                      )}
                    >
                      <Vector8Icon
                        className={classNames(projectcss.all, sty.svg__i15Xu)}
                        role={"img"}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__yZ6Pu)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ldE5D
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kEwS
                          )}
                        >
                          {"Formación"}
                        </div>

                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            sty.span__fd78
                          )}
                        >
                          {"100% gratuita"}
                        </span>
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vMrLl
                        )}
                      >
                        {
                          "Nuestras empresas asumen el coste de tu \nformación una vez te contraten."
                        }
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"item2"}
                    data-plasmic-override={overrides.item2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.item2)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wlYdc)}
                    >
                      <Vector9Icon
                        className={classNames(projectcss.all, sty.svg__v6Ihk)}
                        role={"img"}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__tUlIc)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lnug2
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nDlNk
                          )}
                        >
                          {"Flexibilidad total"}
                        </div>
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bWxYn
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          <React.Fragment>
                            <React.Fragment>
                              {"Puedes formarte durante 12 meses en remoto "}
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"a tu ritmo."}
                            </span>
                          </React.Fragment>
                        ) : (
                          "Podrás formarte para siempre en remoto a tu ritmo."
                        )}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"item3"}
                    data-plasmic-override={overrides.item3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.item3)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__l6Oxx)}
                    >
                      <Vector11Icon
                        className={classNames(projectcss.all, sty.svg___3EyMy)}
                        role={"img"}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1G7PB
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__uAv9
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2YXe5
                          )}
                        >
                          {"Tutorización"}
                        </div>
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xRsG
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Dispondrás de la ayuda "}
                            </span>
                            <React.Fragment>{"\n"}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"de profesionales"}
                            </span>
                            <React.Fragment>
                              {
                                " en todo momento para hacer de tu formación, una experiencia única."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        ) : hasVariant(globalVariants, "screen", "laptop") ? (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Dispondrás de la ayuda de profesionales"}
                            </span>
                            <React.Fragment>
                              {
                                " en todo momento para hacer de tu formación, una experiencia única."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Dispondrás de la ayuda de profesionales"}
                            </span>
                            <React.Fragment>
                              {
                                " en \ntodo momento para hacer de tu formación, \nuna experiencia única."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        )}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"item4"}
                    data-plasmic-override={overrides.item4}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.item4)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mMyjL)}
                    >
                      <Icon27Icon
                        className={classNames(projectcss.all, sty.svg__cjgpE)}
                        role={"img"}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__eJaJt)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ilpMs
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fqvvl
                          )}
                        >
                          {"Oportunidades"}
                        </div>

                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            sty.span__eMieG
                          )}
                        >
                          {"laborales"}
                        </span>
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ptTk4
                        )}
                      >
                        {
                          "Cuando quieras, te presentamos a ofertas laborales que encajan contigo en base a tus gustos y requisitos."
                        }
                      </div>
                    </p.Stack>
                  </p.Stack>

                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9Vhzy
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__p2Nk
                        )}
                      >
                        {true ? (
                          <Icon30Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__xyBpq
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </div>
                    </div>
                  ) : null}
                </p.Stack>
              </p.Stack>

              <div
                data-plasmic-name={"rightSide"}
                data-plasmic-override={overrides.rightSide}
                className={classNames(projectcss.all, sty.rightSide)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__cn1Ey)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("356px" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("555px" as const)
                      : ("822px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0%" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100vw" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("100vw" as const)
                      : ("826px" as const)
                  }
                  loader={"plasmic"}
                  loading={"lazy" as const}
                  src={{
                    src: "https://img.plasmic.app/img-optimizer/v1/img/9e7f3ab0b7edef16e7da540cf897eb16.png",
                    fullWidth: 611,
                    fullHeight: 822
                  }}
                />
              </div>
            </p.Stack>
          </p.Stack>

          <div
            data-plasmic-name={"roadmap"}
            data-plasmic-override={overrides.roadmap}
            className={classNames(projectcss.all, sty.roadmap)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ccsO)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"sectionHeadingRoadmap"}
                data-plasmic-override={overrides.sectionHeadingRoadmap}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.sectionHeadingRoadmap
                )}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__u9PMc
                  )}
                >
                  {
                    "Aprender a programar desde cero no es imposible si tienes un plan"
                  }
                </h2>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ywzmu
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Tenemos hojas de ruta confeccionadas para cada tipo de alumno, tanto los que empiezan en el mundo del desarrollo como los que ya tienen conocimientos avanzados y solo necesitan un último empujón que \nles lance al entorno laboral."
                    : hasVariant(globalVariants, "screen", "laptop")
                    ? "Tenemos hojas de ruta confeccionadas para cada tipo de alumno, tanto\nlos que empiezan en el mundo del desarrollo como los que ya tienen conocimientos avanzados y solo necesitan un último empujón que les\nlance al entorno laboral."
                    : hasVariant(globalVariants, "screen", "laptopL")
                    ? "Tenemos hojas de ruta confeccionadas para cada tipo de alumno, tanto los que empiezan en el mundo del desarrollo como los que ya tienen conocimientos avanzados y solo necesitan un último empujón que les lance al entorno laboral."
                    : 'Tenemos hojas de ruta confeccionadas para cada tipo de alumno, tanto los que empiezan en el mundo del desarrollo como los que ya tienen conocimientos avanzados y solo necesitan un último empujón que les lance al entorno laboral. Este es nuestro "roadmap" para aprender a programar:'}
                </div>
              </p.Stack>

              <div className={classNames(projectcss.all, sty.freeBox__dYkTy)}>
                {p.renderPlasmicSlot({
                  defaultContents: null,
                  value: args.roadmapContainer
                })}
              </div>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"testimonial"}
            data-plasmic-override={overrides.testimonial}
            className={classNames(projectcss.all, sty.testimonial)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__cOzN)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"leftColumn"}
                data-plasmic-override={overrides.leftColumn}
                hasGap={true}
                className={classNames(projectcss.all, sty.leftColumn)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wnW4C
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"¿Qué opinan nuestros "}</React.Fragment>
                    {
                      <span
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.span___9A9Hz
                        )}
                      >
                        {"alumnos?"}
                      </span>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___2QbS8)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__fa1Jk
                        )}
                        previousNextPage={"previousPageLastChild" as const}
                      />
                    ),

                    value: args.leftArrow
                  })}

                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___9AaWp
                        )}
                        previousNextPage={"nextPage" as const}
                      />
                    ),

                    value: args.rightArrow
                  })}
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"rightColumn"}
                data-plasmic-override={overrides.rightColumn}
                hasGap={true}
                className={classNames(projectcss.all, sty.rightColumn)}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__oxTm)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <TestimonialsTexts
                          className={classNames(
                            "__wab_instance",
                            sty.testimonialsTexts__faV9T
                          )}
                        />
                      ),

                      value: args.testimonialsText
                    })}
                  </p.Stack>
                ) : null}

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___6RpiW)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <React.Fragment>
                        <ProfileImage
                          className={classNames(
                            "__wab_instance",
                            sty.profileImage__l7AfU
                          )}
                        />

                        <ProfileImage
                          className={classNames(
                            "__wab_instance",
                            sty.profileImage__giSex
                          )}
                        />

                        <ProfileImage
                          className={classNames(
                            "__wab_instance",
                            sty.profileImage__zLI
                          )}
                        />

                        <ProfileImage
                          className={classNames(
                            "__wab_instance",
                            sty.profileImage__bYsP1
                          )}
                        />
                      </React.Fragment>
                    ),
                    value: args.testimonialsUsers
                  })}
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"faq"}
            data-plasmic-override={overrides.faq}
            className={classNames(projectcss.all, sty.faq)}
          >
            <div
              data-plasmic-name={"content"}
              data-plasmic-override={overrides.content}
              className={classNames(projectcss.all, sty.content)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <CourseLandingFaq
                    className={classNames(
                      "__wab_instance",
                      sty.courseLandingFaq__ketjv
                    )}
                    subtitle={"Resolvamos tus dudas"}
                    title={
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__kuupk
                        )}
                      >
                        {"¿Tienes más preguntas? ¡Aquí te las respondemos!"}
                      </h2>
                    }
                  />
                ),

                value: args.faq
              })}
            </div>
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero",
    "bg",
    "floatItem2",
    "group1000001689",
    "frame1000001897",
    "frame1000001898",
    "frame1000001899",
    "header",
    "breadcrumb",
    "sectionHeading2",
    "p",
    "floatItem01",
    "ui01",
    "openBootcamp",
    "leftSide",
    "sectionHeading",
    "item1",
    "item2",
    "item3",
    "item4",
    "rightSide",
    "roadmap",
    "sectionHeadingRoadmap",
    "testimonial",
    "leftColumn",
    "rightColumn",
    "faq",
    "content",
    "footer"
  ],
  hero: [
    "hero",
    "bg",
    "floatItem2",
    "group1000001689",
    "frame1000001897",
    "frame1000001898",
    "frame1000001899",
    "header",
    "breadcrumb",
    "sectionHeading2",
    "p",
    "floatItem01",
    "ui01"
  ],
  bg: [
    "bg",
    "floatItem2",
    "group1000001689",
    "frame1000001897",
    "frame1000001898",
    "frame1000001899",
    "header",
    "breadcrumb",
    "sectionHeading2",
    "p",
    "floatItem01",
    "ui01"
  ],
  floatItem2: [
    "floatItem2",
    "group1000001689",
    "frame1000001897",
    "frame1000001898",
    "frame1000001899"
  ],
  group1000001689: [
    "group1000001689",
    "frame1000001897",
    "frame1000001898",
    "frame1000001899"
  ],
  frame1000001897: ["frame1000001897"],
  frame1000001898: ["frame1000001898"],
  frame1000001899: ["frame1000001899"],
  header: ["header", "breadcrumb", "sectionHeading2", "p"],
  breadcrumb: ["breadcrumb"],
  sectionHeading2: ["sectionHeading2"],
  p: ["p"],
  floatItem01: ["floatItem01", "ui01"],
  ui01: ["ui01"],
  openBootcamp: [
    "openBootcamp",
    "leftSide",
    "sectionHeading",
    "item1",
    "item2",
    "item3",
    "item4",
    "rightSide"
  ],
  leftSide: ["leftSide", "sectionHeading", "item1", "item2", "item3", "item4"],
  sectionHeading: ["sectionHeading"],
  item1: ["item1"],
  item2: ["item2"],
  item3: ["item3"],
  item4: ["item4"],
  rightSide: ["rightSide"],
  roadmap: ["roadmap", "sectionHeadingRoadmap"],
  sectionHeadingRoadmap: ["sectionHeadingRoadmap"],
  testimonial: ["testimonial", "leftColumn", "rightColumn"],
  leftColumn: ["leftColumn"],
  rightColumn: ["rightColumn"],
  faq: ["faq", "content"],
  content: ["content"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  hero: "div";
  bg: "div";
  floatItem2: "div";
  group1000001689: "div";
  frame1000001897: "div";
  frame1000001898: "div";
  frame1000001899: "div";
  header: "div";
  breadcrumb: "div";
  sectionHeading2: "h1";
  p: "p";
  floatItem01: "div";
  ui01: "svg";
  openBootcamp: "div";
  leftSide: "div";
  sectionHeading: "div";
  item1: "div";
  item2: "div";
  item3: "div";
  item4: "div";
  rightSide: "div";
  roadmap: "div";
  sectionHeadingRoadmap: "div";
  testimonial: "div";
  leftColumn: "div";
  rightColumn: "div";
  faq: "div";
  content: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLandingProgramacion__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLandingProgramacion__VariantsArgs;
    args?: PlasmicLandingProgramacion__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLandingProgramacion__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLandingProgramacion__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLandingProgramacion__ArgProps,
          internalVariantPropNames: PlasmicLandingProgramacion__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLandingProgramacion__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLandingProgramacion";
  } else {
    func.displayName = `PlasmicLandingProgramacion.${nodeName}`;
  }
  return func;
}

export const PlasmicLandingProgramacion = Object.assign(
  // Top-level PlasmicLandingProgramacion renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    bg: makeNodeComponent("bg"),
    floatItem2: makeNodeComponent("floatItem2"),
    group1000001689: makeNodeComponent("group1000001689"),
    frame1000001897: makeNodeComponent("frame1000001897"),
    frame1000001898: makeNodeComponent("frame1000001898"),
    frame1000001899: makeNodeComponent("frame1000001899"),
    header: makeNodeComponent("header"),
    breadcrumb: makeNodeComponent("breadcrumb"),
    sectionHeading2: makeNodeComponent("sectionHeading2"),
    p: makeNodeComponent("p"),
    floatItem01: makeNodeComponent("floatItem01"),
    ui01: makeNodeComponent("ui01"),
    openBootcamp: makeNodeComponent("openBootcamp"),
    leftSide: makeNodeComponent("leftSide"),
    sectionHeading: makeNodeComponent("sectionHeading"),
    item1: makeNodeComponent("item1"),
    item2: makeNodeComponent("item2"),
    item3: makeNodeComponent("item3"),
    item4: makeNodeComponent("item4"),
    rightSide: makeNodeComponent("rightSide"),
    roadmap: makeNodeComponent("roadmap"),
    sectionHeadingRoadmap: makeNodeComponent("sectionHeadingRoadmap"),
    testimonial: makeNodeComponent("testimonial"),
    leftColumn: makeNodeComponent("leftColumn"),
    rightColumn: makeNodeComponent("rightColumn"),
    faq: makeNodeComponent("faq"),
    content: makeNodeComponent("content"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicLandingProgramacion
    internalVariantProps: PlasmicLandingProgramacion__VariantProps,
    internalArgProps: PlasmicLandingProgramacion__ArgProps
  }
);

export default PlasmicLandingProgramacion;
/* prettier-ignore-end */
