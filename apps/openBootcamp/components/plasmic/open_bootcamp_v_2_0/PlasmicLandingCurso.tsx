// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qJhJbLN2Wy56BDK1v9VeHg
// Component: kHevwnszsti
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: -CnkElqEbFOKi/component
import Button from "../../Button"; // plasmic-import: W52igaDMzA10w6/component
import LinkOb from "../../LinkOb"; // plasmic-import: MCZw6vVbPKy/component
import AccordionSection from "../../AccordionSection"; // plasmic-import: tRL-RTbGUy_/component
import TestimonialsTexts from "../../TestimonialsTexts"; // plasmic-import: PZVpznDmWug/component
import ProfileImage from "../../ProfileImage"; // plasmic-import: 2Y7usthzRd/component
import CourseListSection from "../../CourseListSection"; // plasmic-import: 6fZtrnBBAHf/component
import CourseLandingItem from "../../CourseLandingItem"; // plasmic-import: iOaw7i5C2By/component
import CourseLandingFaq from "../../CourseLandingFaq"; // plasmic-import: Mmwxop3xQ3/component
import Footer from "../../Footer"; // plasmic-import: b5lOT72QRjzHLq/component

import { useScreenVariants as useScreenVariantsgfTNvlXeClRRx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GfTNvlXE_ClRRx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_bootcamp_v_2_0.module.css"; // plasmic-import: qJhJbLN2Wy56BDK1v9VeHg/projectcss
import sty from "./PlasmicLandingCurso.module.css"; // plasmic-import: kHevwnszsti/css

import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: MPKmKXARKW/icon
import IconoCursoIcon from "./icons/PlasmicIcon__IconoCurso"; // plasmic-import: l3Gahc39dO/icon
import Vector8Icon from "./icons/PlasmicIcon__Vector8"; // plasmic-import: icZS_od47y/icon
import Vector9Icon from "./icons/PlasmicIcon__Vector9"; // plasmic-import: mVwYU7p2e/icon
import Vector11Icon from "./icons/PlasmicIcon__Vector11"; // plasmic-import: aDS2HTetYW/icon
import Icon27Icon from "./icons/PlasmicIcon__Icon27"; // plasmic-import: hKJX8YlwbG9/icon
import Icon30Icon from "./icons/PlasmicIcon__Icon30"; // plasmic-import: L0hZU5Oak/icon

export type PlasmicLandingCurso__VariantMembers = {};

export type PlasmicLandingCurso__VariantsArgs = {};
type VariantPropType = keyof PlasmicLandingCurso__VariantsArgs;
export const PlasmicLandingCurso__VariantProps = new Array<VariantPropType>();

export type PlasmicLandingCurso__ArgsType = {
  testimonialsUsers?: React.ReactNode;
  leftArrow?: React.ReactNode;
  rightArrow?: React.ReactNode;
  testimonialsText?: React.ReactNode;
  navbar?: React.ReactNode;
  h2?: React.ReactNode;
  breadcrumb?: React.ReactNode;
  heroButton?: React.ReactNode;
  heroCourseTitle?: React.ReactNode;
  heroCourseDescription?: React.ReactNode;
  courseImg?: React.ReactNode;
  accordionContainer?: React.ReactNode;
  faq?: React.ReactNode;
  courseList?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLandingCurso__ArgsType;
export const PlasmicLandingCurso__ArgProps = new Array<ArgPropType>(
  "testimonialsUsers",
  "leftArrow",
  "rightArrow",
  "testimonialsText",
  "navbar",
  "h2",
  "breadcrumb",
  "heroButton",
  "heroCourseTitle",
  "heroCourseDescription",
  "courseImg",
  "accordionContainer",
  "faq",
  "courseList"
);

export type PlasmicLandingCurso__OverridesType = {
  root?: p.Flex<"div">;
  bg?: p.Flex<"div">;
  floatItem2?: p.Flex<"div">;
  header?: p.Flex<"div">;
  breadcrumb?: p.Flex<"div">;
  sectionHeading6?: p.Flex<"h1">;
  p?: p.Flex<"p">;
  floatItem1?: p.Flex<"div">;
  openBootcamp?: p.Flex<"div">;
  leftSide?: p.Flex<"div">;
  sectionHeading?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  item1?: p.Flex<"div">;
  item2?: p.Flex<"div">;
  item3?: p.Flex<"div">;
  item4?: p.Flex<"div">;
  rightSide?: p.Flex<"div">;
  courseSection?: p.Flex<"div">;
  featuresOb?: p.Flex<"div">;
  content?: p.Flex<"div">;
  sectionHeading3?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
  obFeature01?: p.Flex<"div">;
  cardContent?: p.Flex<"div">;
  obFeature2?: p.Flex<"div">;
  cardContent2?: p.Flex<"div">;
  obFeature3?: p.Flex<"div">;
  cardContent3?: p.Flex<"div">;
  testimonial?: p.Flex<"div">;
  leftColumn?: p.Flex<"div">;
  rightColumn?: p.Flex<"div">;
  courseList?: p.Flex<"div">;
  faq?: p.Flex<"div">;
  content2?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultLandingCursoProps {}

function PlasmicLandingCurso__RenderFunc(props: {
  variants: PlasmicLandingCurso__VariantsArgs;
  args: PlasmicLandingCurso__ArgsType;
  overrides: PlasmicLandingCurso__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgfTNvlXeClRRx()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__hbiyN)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <Navbar
                  className={classNames("__wab_instance", sty.navbar__j29Pa)}
                />
              ),

              value: args.navbar
            })}
          </div>

          {(
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? true
              : hasVariant(globalVariants, "screen", "laptopL")
              ? true
              : true
          ) ? (
            <div
              data-plasmic-name={"bg"}
              data-plasmic-override={overrides.bg}
              className={classNames(projectcss.all, sty.bg)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__azDLz)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? true
                      : true
                  ) ? (
                    <div
                      data-plasmic-name={"floatItem2"}
                      data-plasmic-override={overrides.floatItem2}
                      className={classNames(projectcss.all, sty.floatItem2)}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: true ? (
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__rq9Wa)}
                            displayHeight={"100px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"100px" as const}
                            loader={"plasmic"}
                            loading={"lazy" as const}
                          />
                        ) : null,
                        value: args.courseImg
                      })}
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0OVnZ
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"header"}
                        data-plasmic-override={overrides.header}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.header)}
                      >
                        <div
                          data-plasmic-name={"breadcrumb"}
                          data-plasmic-override={overrides.breadcrumb}
                          className={classNames(projectcss.all, sty.breadcrumb)}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: null,
                            value: args.breadcrumb
                          })}
                        </div>

                        <p.Stack
                          as={"h1"}
                          data-plasmic-name={"sectionHeading6"}
                          data-plasmic-override={overrides.sectionHeading6}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            sty.sectionHeading6
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__k871M
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: "Curso de Python",
                              value: args.heroCourseTitle,
                              className: classNames(
                                sty.slotTargetHeroCourseTitle
                              )
                            })}

                            {true ? (
                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  sty.span__eFu37
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "gratis"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "laptop"
                                    )
                                  ? "gratis"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "laptopL"
                                    )
                                  ? "gratis"
                                  : "gratis"}
                              </span>
                            ) : null}
                          </div>
                        </p.Stack>

                        <p
                          data-plasmic-name={"p"}
                          data-plasmic-override={overrides.p}
                          className={classNames(
                            projectcss.all,
                            projectcss.p,
                            sty.p
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents:
                              "Descubre una gran variedad de cursos gratuitos para adentrarte en el apasionante mundo de la \nprogramación.",
                            value: args.heroCourseDescription,
                            className: classNames(
                              sty.slotTargetHeroCourseDescription
                            )
                          })}
                        </p>
                      </p.Stack>

                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__fQdRm
                            )}
                            color={"darkGray" as const}
                            endIcon={
                              <svg
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___2OwK
                                )}
                                role={"img"}
                              />
                            }
                            link={
                              "https://campus.open-bootcamp.com/register" as const
                            }
                            startIcon={
                              <svg
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__vxReY
                                )}
                                role={"img"}
                              />
                            }
                          >
                            {"Empieza ya"}
                          </Button>
                        ),

                        value: args.heroButton
                      })}
                    </p.Stack>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "laptop") ? true : true
                  ) ? (
                    <div
                      data-plasmic-name={"floatItem1"}
                      data-plasmic-override={overrides.floatItem1}
                      className={classNames(projectcss.all, sty.floatItem1)}
                    >
                      <IconoCursoIcon
                        className={classNames(projectcss.all, sty.svg___4ZDWf)}
                        role={"img"}
                      />
                    </div>
                  ) : null}
                </p.Stack>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptopL")
                  ? true
                  : false
              ) ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__cEVjN)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : hasVariant(globalVariants, "screen", "laptopL")
                      ? ("100%" as const)
                      : ("100%" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : hasVariant(globalVariants, "screen", "laptopL")
                      ? ("100%" as const)
                      : ("100%" as const)
                  }
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : hasVariant(globalVariants, "screen", "laptopL")
                      ? ("100%" as const)
                      : ("100%" as const)
                  }
                  loader={"plasmic"}
                  loading={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("lazy" as const)
                      : hasVariant(globalVariants, "screen", "laptopL")
                      ? ("lazy" as const)
                      : ("lazy" as const)
                  }
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: "https://site-assets.plasmic.app/5759d41ce607dd722a73377d053afcff.svg",
                          fullWidth: 161,
                          fullHeight: 150,
                          aspectRatio: 1.073795
                        }
                      : undefined
                  }
                />
              ) : null}
            </div>
          ) : null}

          <p.Stack
            as={"div"}
            data-plasmic-name={"openBootcamp"}
            data-plasmic-override={overrides.openBootcamp}
            hasGap={true}
            className={classNames(projectcss.all, sty.openBootcamp)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mZpMl)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"leftSide"}
                data-plasmic-override={overrides.leftSide}
                hasGap={true}
                className={classNames(projectcss.all, sty.leftSide)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"sectionHeading"}
                  data-plasmic-override={overrides.sectionHeading}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.sectionHeading)}
                >
                  <h2
                    data-plasmic-name={"h2"}
                    data-plasmic-override={overrides.h2}
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      sty.h2
                    )}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "¿Qué es OpenBootcamp?",
                      value: args.h2,
                      className: classNames(sty.slotTargetH2)
                    })}
                  </h2>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fibzO
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Un programa pionero en el que recibirás toda la formación que necesites hasta que encuentres un mejor empleo."
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? "Un programa pionero en el que recibirás toda la formación\nque necesites hasta que encuentres un mejor empleo."
                      : "Un programa pionero en el que recibirás toda la formación que necesites para\nque encuentres un mejor empleo."}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jvMoU)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"item1"}
                    data-plasmic-override={overrides.item1}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.item1)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mygcZ)}
                    >
                      <Vector8Icon
                        className={classNames(projectcss.all, sty.svg__pbccJ)}
                        role={"img"}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__h0NDg)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fiqXh
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6Hhtw
                          )}
                        >
                          {"Formación"}
                        </div>

                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            sty.span__mdqnk
                          )}
                        >
                          {"100% gratuita"}
                        </span>
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vLMo
                        )}
                      >
                        {
                          "Nuestras empresas asumen el coste de tu \nformación una vez te contraten."
                        }
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"item2"}
                    data-plasmic-override={overrides.item2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.item2)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__e53Zw)}
                    >
                      <Vector9Icon
                        className={classNames(projectcss.all, sty.svg__lXUd)}
                        role={"img"}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__j0NMx)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__q692Y
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___28ZAz
                          )}
                        >
                          {"Flexibilidad total"}
                        </div>
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aw9Dj
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          <React.Fragment>
                            <React.Fragment>
                              {"Puedes formarte durante 12 meses en remoto "}
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"a tu ritmo."}
                            </span>
                          </React.Fragment>
                        ) : (
                          "Podrás formarte para siempre en remoto a tu ritmo."
                        )}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"item3"}
                    data-plasmic-override={overrides.item3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.item3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2DuPr
                      )}
                    >
                      <Vector11Icon
                        className={classNames(projectcss.all, sty.svg__qh5Vy)}
                        role={"img"}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__vlbSk)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cmiKw
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jaPae
                          )}
                        >
                          {"Tutorización"}
                        </div>
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__u4EeW
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Dispondrás de la ayuda de profesionales"}
                            </span>
                            <React.Fragment>
                              {
                                " en todo momento para hacer de tu formación, una experiencia única."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        ) : hasVariant(globalVariants, "screen", "laptop") ? (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Dispondrás de la ayuda de profesionales"}
                            </span>
                            <React.Fragment>
                              {
                                " en todo momento para hacer de tu formación, una experiencia única."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Dispondrás de la ayuda de profesionales"}
                            </span>
                            <React.Fragment>
                              {
                                " en \ntodo momento para hacer de tu formación, \nuna experiencia única."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        )}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"item4"}
                    data-plasmic-override={overrides.item4}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.item4)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7Ye1I
                      )}
                    >
                      <Icon27Icon
                        className={classNames(projectcss.all, sty.svg__lay74)}
                        role={"img"}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__r8SD5)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__f6Oqf
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__v1E95
                          )}
                        >
                          {"Oportunidades"}
                        </div>

                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            sty.span__rcK9
                          )}
                        >
                          {"laborales"}
                        </span>
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wkaAi
                        )}
                      >
                        {
                          "Cuando quieras, te presentamos a ofertas laborales que encajan contigo en base a tus gustos y requisitos."
                        }
                      </div>
                    </p.Stack>
                  </p.Stack>

                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7FmDj
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mb5Wx
                        )}
                      >
                        {true ? (
                          <Icon30Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__kJlTq
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </div>
                    </div>
                  ) : null}
                </p.Stack>
              </p.Stack>

              <div
                data-plasmic-name={"rightSide"}
                data-plasmic-override={overrides.rightSide}
                className={classNames(projectcss.all, sty.rightSide)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__hDuHx)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("356px" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("555px" as const)
                      : ("822px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0%" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100vw" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("100vw" as const)
                      : ("826px" as const)
                  }
                  loader={"plasmic"}
                  loading={"lazy" as const}
                  src={{
                    src: "https://img.plasmic.app/img-optimizer/v1/img/ede41725cb75ddb8332b48ae1c3fddce.png",
                    fullWidth: 752,
                    fullHeight: 1013
                  }}
                />
              </div>
            </p.Stack>
          </p.Stack>

          <div
            data-plasmic-name={"courseSection"}
            data-plasmic-override={overrides.courseSection}
            className={classNames(projectcss.all, sty.courseSection)}
          >
            {true
              ? p.renderPlasmicSlot({
                  defaultContents: true ? (
                    <AccordionSection
                      className={classNames(
                        "__wab_instance",
                        sty.accordionSection__mcrPh
                      )}
                      courseText={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xSGnk
                          )}
                        >
                          {"Desata el potencial de Python"}
                        </div>
                      }
                    />
                  ) : null,
                  value: args.accordionContainer
                })
              : null}
          </div>

          <div
            data-plasmic-name={"featuresOb"}
            data-plasmic-override={overrides.featuresOb}
            className={classNames(projectcss.all, sty.featuresOb)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"content"}
              data-plasmic-override={overrides.content}
              hasGap={true}
              className={classNames(projectcss.all, sty.content)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"sectionHeading3"}
                data-plasmic-override={overrides.sectionHeading3}
                hasGap={true}
                className={classNames(projectcss.all, sty.sectionHeading3)}
              >
                <h3
                  data-plasmic-name={"h3"}
                  data-plasmic-override={overrides.h3}
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      <React.Fragment>
                        {"¿Que hace a OpenBootcamp "}
                      </React.Fragment>
                      {
                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.span__ouA0X
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "especial?"
                            : hasVariant(globalVariants, "screen", "laptopL")
                            ? "gratuito"
                            : "gratuito"}
                        </span>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  ) : hasVariant(globalVariants, "screen", "laptop") ? (
                    <React.Fragment>
                      <React.Fragment>
                        {"¿Que hace a OpenBootcamp "}
                      </React.Fragment>
                      {
                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.span__tgI3B
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "gratuito"
                            : hasVariant(globalVariants, "screen", "laptop")
                            ? "especial?"
                            : hasVariant(globalVariants, "screen", "laptopL")
                            ? "gratuito"
                            : "gratuito"}
                        </span>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  ) : hasVariant(globalVariants, "screen", "laptopL") ? (
                    <React.Fragment>
                      <React.Fragment>
                        {"¿Qué hace a OpenBootcamp "}
                      </React.Fragment>
                      {
                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.span__kyQr9
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "gratuito"
                            : hasVariant(globalVariants, "screen", "laptopL")
                            ? "especial?"
                            : "gratuito"}
                        </span>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <React.Fragment>
                        {"¿Qué hace a Openbootcamp "}
                      </React.Fragment>
                      {
                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.span__jhRte
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "gratuito"
                            : hasVariant(globalVariants, "screen", "laptopL")
                            ? "gratuito"
                            : "especial?"}
                        </span>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  )}
                </h3>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ukucK)}
              >
                <div
                  data-plasmic-name={"obFeature01"}
                  data-plasmic-override={overrides.obFeature01}
                  className={classNames(projectcss.all, sty.obFeature01)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__n7Bhr)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "laptop")
                        ? ("100%" as const)
                        : ("auto" as const)
                    }
                    displayMaxHeight={
                      hasVariant(globalVariants, "screen", "laptop")
                        ? ("200px" as const)
                        : ("none" as const)
                    }
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loader={"plasmic"}
                    loading={"lazy" as const}
                    src={{
                      src: "https://img.plasmic.app/img-optimizer/v1/img/cd0f71c7d21448fc686de158978eebd0.png",
                      fullWidth: 393,
                      fullHeight: 300
                    }}
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"cardContent"}
                    data-plasmic-override={overrides.cardContent}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.cardContent)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__frF92
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Software propio de\nformación"
                        : hasVariant(globalVariants, "screen", "laptop")
                        ? "Software propio de formación"
                        : "Software propio de\nformación"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xjfEu
                      )}
                    >
                      {"Disfruta de una experiencia de formación única."}
                    </div>
                  </p.Stack>
                </div>

                <div
                  data-plasmic-name={"obFeature2"}
                  data-plasmic-override={overrides.obFeature2}
                  className={classNames(projectcss.all, sty.obFeature2)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___3YmW)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "laptop")
                        ? ("100%" as const)
                        : ("auto" as const)
                    }
                    displayMaxHeight={
                      hasVariant(globalVariants, "screen", "laptop")
                        ? ("200px" as const)
                        : ("none" as const)
                    }
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loader={"plasmic"}
                    loading={"lazy" as const}
                    src={{
                      src: "https://img.plasmic.app/img-optimizer/v1/img/09fd6863d64134630878c7c15ce19abf.png",
                      fullWidth: 393,
                      fullHeight: 300
                    }}
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"cardContent2"}
                    data-plasmic-override={overrides.cardContent2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.cardContent2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qbP4
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Te certificamos en las últimas tecnologías"
                        : "Te certificamos en las últimas tecnologías"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cpQ1O
                      )}
                    >
                      {"Certifícate en las tecnologías más punteras."}
                    </div>
                  </p.Stack>
                </div>

                <div
                  data-plasmic-name={"obFeature3"}
                  data-plasmic-override={overrides.obFeature3}
                  className={classNames(projectcss.all, sty.obFeature3)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__uIrxG)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "laptop")
                        ? ("100%" as const)
                        : ("auto" as const)
                    }
                    displayMaxHeight={
                      hasVariant(globalVariants, "screen", "laptop")
                        ? ("200px" as const)
                        : ("none" as const)
                    }
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loader={"plasmic"}
                    loading={"lazy" as const}
                    src={{
                      src: "https://img.plasmic.app/img-optimizer/v1/img/37c62a78d77b78c7e7b06a4e327878f3.png",
                      fullWidth: 393,
                      fullHeight: 300
                    }}
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"cardContent3"}
                    data-plasmic-override={overrides.cardContent3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.cardContent3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fzd0S
                      )}
                    >
                      {"Para todos los perfiles"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fZAie
                      )}
                    >
                      {
                        "Tengas el nivel que tengas OpenBootcamp se adapta a tí."
                      }
                    </div>
                  </p.Stack>
                </div>
              </p.Stack>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"testimonial"}
            data-plasmic-override={overrides.testimonial}
            className={classNames(projectcss.all, sty.testimonial)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__btKy)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"leftColumn"}
                data-plasmic-override={overrides.leftColumn}
                hasGap={true}
                className={classNames(projectcss.all, sty.leftColumn)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__c4Lx
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"¿Qué opinan nuestros "}</React.Fragment>
                    {
                      <span
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.span__clr8I
                        )}
                      >
                        {"alumnos?"}
                      </span>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__yrBiq)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__rkbpy
                        )}
                        previousNextPage={"previousPageLastChild" as const}
                      />
                    ),

                    value: args.leftArrow
                  })}

                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__x1F2O
                        )}
                        previousNextPage={"nextPage" as const}
                      />
                    ),

                    value: args.rightArrow
                  })}
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"rightColumn"}
                data-plasmic-override={overrides.rightColumn}
                hasGap={true}
                className={classNames(projectcss.all, sty.rightColumn)}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ohzr)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <TestimonialsTexts
                          className={classNames(
                            "__wab_instance",
                            sty.testimonialsTexts__inOik
                          )}
                        />
                      ),

                      value: args.testimonialsText
                    })}
                  </p.Stack>
                ) : null}

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__o48F)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <React.Fragment>
                        <ProfileImage
                          className={classNames(
                            "__wab_instance",
                            sty.profileImage__o61Gy
                          )}
                        />

                        <ProfileImage
                          className={classNames(
                            "__wab_instance",
                            sty.profileImage__yNuy
                          )}
                        />

                        <ProfileImage
                          className={classNames(
                            "__wab_instance",
                            sty.profileImage__mIfYu
                          )}
                        />

                        <ProfileImage
                          className={classNames(
                            "__wab_instance",
                            sty.profileImage__twZlj
                          )}
                        />
                      </React.Fragment>
                    ),
                    value: args.testimonialsUsers
                  })}
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"courseList"}
            data-plasmic-override={overrides.courseList}
            className={classNames(projectcss.all, sty.courseList)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <CourseListSection
                  className={classNames(
                    "__wab_instance",
                    sty.courseListSection___2AgJl
                  )}
                />
              ),

              value: args.courseList
            })}
          </div>

          <div
            data-plasmic-name={"faq"}
            data-plasmic-override={overrides.faq}
            className={classNames(projectcss.all, sty.faq)}
          >
            <div
              data-plasmic-name={"content2"}
              data-plasmic-override={overrides.content2}
              className={classNames(projectcss.all, sty.content2)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <CourseLandingFaq
                    className={classNames(
                      "__wab_instance",
                      sty.courseLandingFaq__aeYyR
                    )}
                    subtitle={"Resolvamos tus dudas"}
                    title={
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2___1OR3C
                        )}
                      >
                        {"¿Tienes más preguntas? ¡Aquí te las respondemos!"}
                      </h2>
                    }
                  />
                ),

                value: args.faq
              })}
            </div>
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "bg",
    "floatItem2",
    "header",
    "breadcrumb",
    "sectionHeading6",
    "p",
    "floatItem1",
    "openBootcamp",
    "leftSide",
    "sectionHeading",
    "h2",
    "item1",
    "item2",
    "item3",
    "item4",
    "rightSide",
    "courseSection",
    "featuresOb",
    "content",
    "sectionHeading3",
    "h3",
    "obFeature01",
    "cardContent",
    "obFeature2",
    "cardContent2",
    "obFeature3",
    "cardContent3",
    "testimonial",
    "leftColumn",
    "rightColumn",
    "courseList",
    "faq",
    "content2",
    "footer"
  ],
  bg: [
    "bg",
    "floatItem2",
    "header",
    "breadcrumb",
    "sectionHeading6",
    "p",
    "floatItem1"
  ],
  floatItem2: ["floatItem2"],
  header: ["header", "breadcrumb", "sectionHeading6", "p"],
  breadcrumb: ["breadcrumb"],
  sectionHeading6: ["sectionHeading6"],
  p: ["p"],
  floatItem1: ["floatItem1"],
  openBootcamp: [
    "openBootcamp",
    "leftSide",
    "sectionHeading",
    "h2",
    "item1",
    "item2",
    "item3",
    "item4",
    "rightSide"
  ],
  leftSide: [
    "leftSide",
    "sectionHeading",
    "h2",
    "item1",
    "item2",
    "item3",
    "item4"
  ],
  sectionHeading: ["sectionHeading", "h2"],
  h2: ["h2"],
  item1: ["item1"],
  item2: ["item2"],
  item3: ["item3"],
  item4: ["item4"],
  rightSide: ["rightSide"],
  courseSection: ["courseSection"],
  featuresOb: [
    "featuresOb",
    "content",
    "sectionHeading3",
    "h3",
    "obFeature01",
    "cardContent",
    "obFeature2",
    "cardContent2",
    "obFeature3",
    "cardContent3"
  ],
  content: [
    "content",
    "sectionHeading3",
    "h3",
    "obFeature01",
    "cardContent",
    "obFeature2",
    "cardContent2",
    "obFeature3",
    "cardContent3"
  ],
  sectionHeading3: ["sectionHeading3", "h3"],
  h3: ["h3"],
  obFeature01: ["obFeature01", "cardContent"],
  cardContent: ["cardContent"],
  obFeature2: ["obFeature2", "cardContent2"],
  cardContent2: ["cardContent2"],
  obFeature3: ["obFeature3", "cardContent3"],
  cardContent3: ["cardContent3"],
  testimonial: ["testimonial", "leftColumn", "rightColumn"],
  leftColumn: ["leftColumn"],
  rightColumn: ["rightColumn"],
  courseList: ["courseList"],
  faq: ["faq", "content2"],
  content2: ["content2"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  bg: "div";
  floatItem2: "div";
  header: "div";
  breadcrumb: "div";
  sectionHeading6: "h1";
  p: "p";
  floatItem1: "div";
  openBootcamp: "div";
  leftSide: "div";
  sectionHeading: "div";
  h2: "h2";
  item1: "div";
  item2: "div";
  item3: "div";
  item4: "div";
  rightSide: "div";
  courseSection: "div";
  featuresOb: "div";
  content: "div";
  sectionHeading3: "div";
  h3: "h3";
  obFeature01: "div";
  cardContent: "div";
  obFeature2: "div";
  cardContent2: "div";
  obFeature3: "div";
  cardContent3: "div";
  testimonial: "div";
  leftColumn: "div";
  rightColumn: "div";
  courseList: "div";
  faq: "div";
  content2: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLandingCurso__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLandingCurso__VariantsArgs;
    args?: PlasmicLandingCurso__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLandingCurso__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLandingCurso__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLandingCurso__ArgProps,
          internalVariantPropNames: PlasmicLandingCurso__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLandingCurso__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLandingCurso";
  } else {
    func.displayName = `PlasmicLandingCurso.${nodeName}`;
  }
  return func;
}

export const PlasmicLandingCurso = Object.assign(
  // Top-level PlasmicLandingCurso renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    bg: makeNodeComponent("bg"),
    floatItem2: makeNodeComponent("floatItem2"),
    header: makeNodeComponent("header"),
    breadcrumb: makeNodeComponent("breadcrumb"),
    sectionHeading6: makeNodeComponent("sectionHeading6"),
    p: makeNodeComponent("p"),
    floatItem1: makeNodeComponent("floatItem1"),
    openBootcamp: makeNodeComponent("openBootcamp"),
    leftSide: makeNodeComponent("leftSide"),
    sectionHeading: makeNodeComponent("sectionHeading"),
    h2: makeNodeComponent("h2"),
    item1: makeNodeComponent("item1"),
    item2: makeNodeComponent("item2"),
    item3: makeNodeComponent("item3"),
    item4: makeNodeComponent("item4"),
    rightSide: makeNodeComponent("rightSide"),
    courseSection: makeNodeComponent("courseSection"),
    featuresOb: makeNodeComponent("featuresOb"),
    content: makeNodeComponent("content"),
    sectionHeading3: makeNodeComponent("sectionHeading3"),
    h3: makeNodeComponent("h3"),
    obFeature01: makeNodeComponent("obFeature01"),
    cardContent: makeNodeComponent("cardContent"),
    obFeature2: makeNodeComponent("obFeature2"),
    cardContent2: makeNodeComponent("cardContent2"),
    obFeature3: makeNodeComponent("obFeature3"),
    cardContent3: makeNodeComponent("cardContent3"),
    testimonial: makeNodeComponent("testimonial"),
    leftColumn: makeNodeComponent("leftColumn"),
    rightColumn: makeNodeComponent("rightColumn"),
    courseList: makeNodeComponent("courseList"),
    faq: makeNodeComponent("faq"),
    content2: makeNodeComponent("content2"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicLandingCurso
    internalVariantProps: PlasmicLandingCurso__VariantProps,
    internalArgProps: PlasmicLandingCurso__ArgProps
  }
);

export default PlasmicLandingCurso;
/* prettier-ignore-end */
