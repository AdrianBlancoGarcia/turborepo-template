// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qJhJbLN2Wy56BDK1v9VeHg
// Component: 9mFkiXX_bi1k
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: -CnkElqEbFOKi/component
import Button from "../../Button"; // plasmic-import: W52igaDMzA10w6/component
import ImageTextCardItem from "../../ImageTextCardItem"; // plasmic-import: eep_0G2zO_A/component
import Footer from "../../Footer"; // plasmic-import: b5lOT72QRjzHLq/component

import { useScreenVariants as useScreenVariantsgfTNvlXeClRRx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GfTNvlXE_ClRRx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_bootcamp_v_2_0.module.css"; // plasmic-import: qJhJbLN2Wy56BDK1v9VeHg/projectcss
import sty from "./PlasmicEmpresas.module.css"; // plasmic-import: 9mFkiXX_bi1k/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: WLfb3FLJt4/icon
import Line16Icon from "./icons/PlasmicIcon__Line16"; // plasmic-import: bmDQX-5_JTJ/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: bSYNOHpEb8J/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: anABzCRXz5D/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: voef3TbXuTy/icon
import Vector5Icon from "./icons/PlasmicIcon__Vector5"; // plasmic-import: dyYH68_fXf/icon
import Vector2Icon from "./icons/PlasmicIcon__Vector2"; // plasmic-import: Ju1o-WSLKb/icon
import Vector4Icon from "./icons/PlasmicIcon__Vector4"; // plasmic-import: 5PskKd6AqU/icon
import Vector3Icon from "./icons/PlasmicIcon__Vector3"; // plasmic-import: vYtC9dHy2_/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: I0FIJgzgSF/icon
import Vector6Icon from "./icons/PlasmicIcon__Vector6"; // plasmic-import: ZXDs-JHwym/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: g7hnbZUVS-/icon
import Vector7Icon from "./icons/PlasmicIcon__Vector7"; // plasmic-import: eJfyYq8-5Y/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: MPKmKXARKW/icon

export type PlasmicEmpresas__VariantMembers = {};

export type PlasmicEmpresas__VariantsArgs = {};
type VariantPropType = keyof PlasmicEmpresas__VariantsArgs;
export const PlasmicEmpresas__VariantProps = new Array<VariantPropType>();

export type PlasmicEmpresas__ArgsType = {
  heroButton?: React.ReactNode;
  clientsButton?: React.ReactNode;
  featuresButton?: React.ReactNode;
  platformButton?: React.ReactNode;
  softwareButton?: React.ReactNode;
  contactButton?: React.ReactNode;
  breadcrumb?: React.ReactNode;
};

type ArgPropType = keyof PlasmicEmpresas__ArgsType;
export const PlasmicEmpresas__ArgProps = new Array<ArgPropType>(
  "heroButton",
  "clientsButton",
  "featuresButton",
  "platformButton",
  "softwareButton",
  "contactButton",
  "breadcrumb"
);

export type PlasmicEmpresas__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  hero?: p.Flex<"div">;
  header?: p.Flex<"div">;
  breadcrumb?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  span?: p.Flex<"span">;
  clients?: p.Flex<"div">;
  leftColumn?: p.Flex<"div">;
  sectionTitle?: p.Flex<"h2">;
  description?: p.Flex<"div">;
  rightColumn?: p.Flex<"div">;
  features?: p.Flex<"div">;
  separator2?: p.Flex<"svg">;
  separator?: p.Flex<"svg">;
  offerTitle7?: p.Flex<"div">;
  offerTitle8?: p.Flex<"div">;
  offerTitle11?: p.Flex<"div">;
  offerTitle9?: p.Flex<"div">;
  offerTitle10?: p.Flex<"div">;
  offerTitle12?: p.Flex<"div">;
  platform?: p.Flex<"div">;
  software?: p.Flex<"div">;
  topVerticalStack?: p.Flex<"div">;
  sectionHeading?: p.Flex<"div">;
  bottonVerticalStack?: p.Flex<"div">;
  callout?: p.Flex<"div">;
  advantages?: p.Flex<"div">;
  video?: p.Flex<"div">;
  video2?: p.Flex<"div">;
  video3?: p.Flex<"div">;
  contact?: p.Flex<"div">;
  h5?: p.Flex<"h5">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultEmpresasProps {}

function PlasmicEmpresas__RenderFunc(props: {
  variants: PlasmicEmpresas__VariantsArgs;
  args: PlasmicEmpresas__ArgsType;
  overrides: PlasmicEmpresas__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgfTNvlXeClRRx()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"Contrata Desarrolladores en 1 Semana"}</title>
        <meta
          key="og:title"
          property="og:title"
          content={"Contrata Desarrolladores en 1 Semana"}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={"Contrata Desarrolladores en 1 Semana"}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
            links={
              <React.Fragment>
                <Button
                  className={classNames("__wab_instance", sty.button__vPdgT)}
                  color={"navLink" as const}
                  endIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg___0Lz7T)}
                      role={"img"}
                    />
                  }
                  link={
                    "https://imagina-formacion.typeform.com/openmarketers" as const
                  }
                  size={"small" as const}
                  startIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__l6T1E)}
                      role={"img"}
                    />
                  }
                >
                  {"Consigue trabajo"}
                </Button>

                {true ? (
                  <Button
                    className={classNames("__wab_instance", sty.button__vsqRb)}
                    color={"navLink" as const}
                    endIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__ovyG5)}
                        role={"img"}
                      />
                    }
                    link={
                      "https://imagina-formacion.typeform.com/openmarketers" as const
                    }
                    size={"small" as const}
                    startIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg___7Bx20)}
                        role={"img"}
                      />
                    }
                  >
                    {"Opiniones sobre OpenBootcamp"}
                  </Button>
                ) : null}

                <Button
                  className={classNames("__wab_instance", sty.button__gFAsH)}
                  color={"navLink" as const}
                  endIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__vs8HU)}
                      role={"img"}
                    />
                  }
                  link={
                    "https://imagina-formacion.typeform.com/openmarketers" as const
                  }
                  size={"small" as const}
                  startIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg___1Ianz)}
                      role={"img"}
                    />
                  }
                >
                  {"Especializaciones"}
                </Button>
              </React.Fragment>
            }
            navButton={
              <Button
                className={classNames("__wab_instance", sty.button__z1Tz)}
                color={"gradient" as const}
                endIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg__pKgpJ)}
                    role={"img"}
                  />
                }
                link={
                  "https://imagina-formacion.typeform.com/to/y1QT9puo" as const
                }
                size={"small" as const}
                startIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg___9K2Yn)}
                    role={"img"}
                  />
                }
              >
                {"Button"}
              </Button>
            }
            page={"empresas" as const}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            hasGap={true}
            className={classNames(projectcss.all, sty.hero)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__k3ZMc)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__pg2Rt)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"header"}
                  data-plasmic-override={overrides.header}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.header)}
                >
                  <div
                    data-plasmic-name={"breadcrumb"}
                    data-plasmic-override={overrides.breadcrumb}
                    className={classNames(projectcss.all, sty.breadcrumb)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: null,
                      value: args.breadcrumb
                    })}
                  </div>

                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <React.Fragment>
                          {"Encuentra tu equipo de "}
                        </React.Fragment>
                        {
                          <span
                            data-plasmic-name={"span"}
                            data-plasmic-override={overrides.span}
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.span
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "desarrolladores"
                              : "desarrolladores"}
                          </span>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <React.Fragment>
                          {"Encuentra tu equipo de "}
                        </React.Fragment>
                        {
                          <span
                            data-plasmic-name={"span"}
                            data-plasmic-override={overrides.span}
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.span
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "desarrolladores"
                              : "desarrolladores"}
                          </span>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    )}
                  </h1>

                  <p
                    className={classNames(
                      projectcss.all,
                      projectcss.p,
                      projectcss.__wab_text,
                      sty.p__adv9M
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {
                          "Seleccionamos a los profesionales que mejor encajan con tus vacantes."
                        }
                      </span>
                      <React.Fragment>
                        {
                          "\nFormamos desarrolladores en base a tus necesidades tecnológicas para que sean eficientes desde su incorporación."
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </p>
                </p.Stack>

                {p.renderPlasmicSlot({
                  defaultContents: (
                    <Button
                      className={classNames("__wab_instance", sty.button__vBCg)}
                      color={"darkGray" as const}
                      endIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__i5UHb)}
                          role={"img"}
                        />
                      }
                      link={
                        "https://imagina-formacion.typeform.com/to/y1QT9puo" as const
                      }
                      startIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__vi1Ss)}
                          role={"img"}
                        />
                      }
                    >
                      {"Contrata talento"}
                    </Button>
                  ),

                  value: args.heroButton
                })}
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"clients"}
            data-plasmic-override={overrides.clients}
            hasGap={true}
            className={classNames(projectcss.all, sty.clients)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wdoby)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"leftColumn"}
                data-plasmic-override={overrides.leftColumn}
                hasGap={true}
                className={classNames(projectcss.all, sty.leftColumn)}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__xz40M)}
                  >
                    <h2
                      data-plasmic-name={"sectionTitle"}
                      data-plasmic-override={overrides.sectionTitle}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.sectionTitle
                      )}
                    >
                      {"Accede a un servicio único y diferencial"}
                    </h2>

                    <div
                      data-plasmic-name={"description"}
                      data-plasmic-override={overrides.description}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.description
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {"Disfruta de un servicio único.\n\n"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"En OpenBootcamp hemos reinventado el hiring"}
                        </span>
                        <React.Fragment>
                          {
                            " para adecuarnos a las nuevas necesidades de las empresas actuales.\n\nConstruye un equipo sólido y competitivo de desarrolladores, con los que podrás mejorar tu software."
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </p.Stack>
                ) : null}

                <div className={classNames(projectcss.all, sty.freeBox__oXiKf)}>
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__aIqR
                        )}
                        color={"blue" as const}
                        endIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__gs5Nx
                            )}
                            role={"img"}
                          />
                        }
                        link={
                          "https://imagina-formacion.typeform.com/to/y1QT9puo" as const
                        }
                        startIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg___3YoWd
                            )}
                            role={"img"}
                          />
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sA4HH
                          )}
                        >
                          {"Contrata desarrolladores"}
                        </div>
                      </Button>
                    ),

                    value: args.clientsButton
                  })}
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"rightColumn"}
                data-plasmic-override={overrides.rightColumn}
                hasGap={true}
                className={classNames(projectcss.all, sty.rightColumn)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__cjnAd)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__swHVl)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "laptop")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dgGs9
                        )}
                      />
                    ) : null}

                    <div
                      className={classNames(projectcss.all, sty.freeBox__nSja)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pPgkJ
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__m9Lv0
                          )}
                        >
                          {
                            "“Gracias a OpenBoocamp hemos encontrado los perfiles necesarios para llevar Wains al siguiente nivel, ha sido un match perfecto...”"
                          }
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fGk3M
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__m0KrJ)}
                          displayHeight={"50px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://img.plasmic.app/img-optimizer/v1/img/554c3d84ec89e4fdfa04a97aab9e1a66.png",
                            fullWidth: 1667,
                            fullHeight: 591
                          }}
                        />

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dT2LY
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xtVjv
                            )}
                          >
                            {"Mario Beteta Pulido"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__w4LCs
                            )}
                          >
                            {"CTO y Co-fundador"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vHdmq
                            )}
                          >
                            {"-"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0RF0E
                            )}
                          >
                            {"Wains"}
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__nfPfg)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__tkhEe
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iRI
                          )}
                        >
                          {
                            "“Habíamos hablado con otros bootcamps pero hasta que no dimos con OpenBootcamp no encontramos al profesional ideal”"
                          }
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qSrEc
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__ie1S6)}
                          displayHeight={"50px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://img.plasmic.app/img-optimizer/v1/img/c48909b9266b1d29771b254250cc50f8.png",
                            fullWidth: 225,
                            fullHeight: 225
                          }}
                        />

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nmVl2
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fRiTy
                            )}
                          >
                            {"Gonzalo Recarte"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__yqufN
                            )}
                          >
                            {"COO - Chief Commercial Officer"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__v1Bga
                            )}
                          >
                            {"-"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__x5BEd
                            )}
                          >
                            {"Cobas Asset Management"}
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </div>

                    {(
                      hasVariant(globalVariants, "screen", "laptop")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__a2Cuv
                        )}
                      />
                    ) : null}
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__vF0Kt)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "laptop")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___82BOv
                        )}
                      />
                    ) : null}

                    <div
                      className={classNames(projectcss.all, sty.freeBox__ikfq9)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___5Zzcl
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__x3PMq
                          )}
                        >
                          {
                            "“Grandes profesionales se encuentran detrás de esta magnífica idea y haciendo que todo sea muy sencillo, dinámico y profesional...”"
                          }
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kqu9R
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__ldlaO)}
                          displayHeight={"50px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://img.plasmic.app/img-optimizer/v1/img/00ca592fc2edb66779a7f942aeeec45a.png",
                            fullWidth: 280,
                            fullHeight: 127
                          }}
                        />

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___5RQzr
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pgbsF
                            )}
                          >
                            {"Zoraida Gutierrez"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xF3Oc
                            )}
                          >
                            {"Recruitment Manager "}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kux5S
                            )}
                          >
                            {"-"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__b2Bt
                            )}
                          >
                            {"Grupo Dani García"}
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </div>

                    {(
                      hasVariant(globalVariants, "screen", "laptop")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vW0Lm
                        )}
                      />
                    ) : null}
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"features"}
            data-plasmic-override={overrides.features}
            hasGap={true}
            className={classNames(projectcss.all, sty.features)}
            id={"caracteristicas" as const}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ogsG2)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__znpN1)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3___8MBuJ
                  )}
                >
                  {"¿Que hace especial a OpenBootcamp ?"}
                </h3>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4PMyv
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {
                        "Nuestros candidatos están especializados en las últimas tecnologías y softskills"
                      }
                    </span>
                    <React.Fragment>
                      {
                        " siguiendo los requisitos de nuestros clientes y del mercado laboral. Con ese objetivo, "
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {
                        "certificamos a nuestros desarrolladores en las tecnologías"
                      }
                    </span>
                    <React.Fragment>
                      {
                        " específicas de cada posición antes de presentarlos como candidatos."
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </p.Stack>

              <div className={classNames(projectcss.all, sty.freeBox__xzIaB)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__yniqv)}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gi166)}
                    >
                      {true ? (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__cBnAb)}
                          displayHeight={"600px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"115%" as const}
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://img.plasmic.app/img-optimizer/v1/img/1737ce075c03c2b1456c6c7f4f532236.png",
                            fullWidth: 550,
                            fullHeight: 600
                          }}
                        />
                      ) : null}
                    </div>
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__d0Ee)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___2Anz2)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "laptopL")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sXxlB
                        )}
                      >
                        <Icon2Icon
                          className={classNames(projectcss.all, sty.svg__jg75X)}
                          role={"img"}
                        />
                      </p.Stack>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__bXvzv)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jrzOv
                        )}
                      >
                        {"Gran mercado"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__la8Pk
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>{"Disponemos de una"}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {" gran cantidad de candidatos"}
                          </span>
                          <React.Fragment>
                            {" certificados en las tecnologías más demandadas."}
                          </React.Fragment>
                        </React.Fragment>
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <Line16Icon
                    data-plasmic-name={"separator2"}
                    data-plasmic-override={overrides.separator2}
                    className={classNames(projectcss.all, sty.separator2)}
                    role={"img"}
                  />

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__iaXbg)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "laptopL")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__s1YW
                        )}
                      >
                        <Icon7Icon
                          className={classNames(projectcss.all, sty.svg__oIuz8)}
                          role={"img"}
                        />
                      </p.Stack>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ipIsu)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mkpaa
                        )}
                      >
                        {"Selección rigurosa"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jzZdr
                        )}
                      >
                        {
                          "OpenBootcamp filtra y valida a los profesionales para que encajen en tus proyectos, con garantía de restitución."
                        }
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <Line16Icon
                    data-plasmic-name={"separator"}
                    data-plasmic-override={overrides.separator}
                    className={classNames(projectcss.all, sty.separator)}
                    role={"img"}
                  />

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__mj4J3)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "laptopL")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nn6Kv
                        )}
                      >
                        <Icon8Icon
                          className={classNames(projectcss.all, sty.svg__oB7Kl)}
                          role={"img"}
                        />
                      </p.Stack>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__efdha)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fGbp
                        )}
                      >
                        {"Candidatos en una semana"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aiVkD
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {
                              "Te presentamos a los candidatos que mejor encajan con tu solicitud "
                            }
                          </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"en tiempo record"}
                          </span>
                          <React.Fragment>{"."}</React.Fragment>
                        </React.Fragment>
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox___0LjGc)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___5QVvv)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__vkznT)}
                  >
                    <Icon10Icon
                      className={classNames(projectcss.all, sty.svg__swkRa)}
                      role={"img"}
                    />
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__ittfl)}
                  >
                    <div
                      data-plasmic-name={"offerTitle7"}
                      data-plasmic-override={overrides.offerTitle7}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.offerTitle7
                      )}
                    >
                      {"Somos developers y formadores"}
                    </div>
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__kjNt)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__qxpwg)}
                  >
                    <Vector5Icon
                      className={classNames(projectcss.all, sty.svg__hyhE)}
                      role={"img"}
                    />
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.freeBox___6C8D)}
                  >
                    <div
                      data-plasmic-name={"offerTitle8"}
                      data-plasmic-override={overrides.offerTitle8}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.offerTitle8
                      )}
                    >
                      {"Validamos CV"}
                    </div>
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___7XbC)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___0T3Em)}
                  >
                    <Vector2Icon
                      className={classNames(projectcss.all, sty.svg__dMNy)}
                      role={"img"}
                    />
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__xthD)}
                  >
                    <div
                      data-plasmic-name={"offerTitle11"}
                      data-plasmic-override={overrides.offerTitle11}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.offerTitle11
                      )}
                    >
                      {"Externalizamos costes"}
                    </div>
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___4DIgc)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__fndjl)}
                  >
                    <Vector2Icon
                      className={classNames(projectcss.all, sty.svg__ovolV)}
                      role={"img"}
                    />
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__mgSwU)}
                  >
                    <div
                      data-plasmic-name={"offerTitle9"}
                      data-plasmic-override={overrides.offerTitle9}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.offerTitle9
                      )}
                    >
                      {"Centenares de \ncandidatos"}
                    </div>
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__dcAxI)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__lsKgp)}
                  >
                    <Vector4Icon
                      className={classNames(projectcss.all, sty.svg__udKt5)}
                      role={"img"}
                    />
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__gajZn)}
                  >
                    <div
                      data-plasmic-name={"offerTitle10"}
                      data-plasmic-override={overrides.offerTitle10}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.offerTitle10
                      )}
                    >
                      {"Optimizamos proceso"}
                    </div>
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xpH9A)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ad8SJ)}
                  >
                    <Vector3Icon
                      className={classNames(projectcss.all, sty.svg__fcCad)}
                      role={"img"}
                    />
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__zj6V)}
                  >
                    <div
                      data-plasmic-name={"offerTitle12"}
                      data-plasmic-override={overrides.offerTitle12}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.offerTitle12
                      )}
                    >
                      {"Proceso a éxito"}
                    </div>
                  </div>
                </p.Stack>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox___4UddJ)}>
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__quW6L
                      )}
                      color={"blue" as const}
                      endIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__ifGx0)}
                          role={"img"}
                        />
                      }
                      link={
                        "https://imagina-formacion.typeform.com/to/y1QT9puo" as const
                      }
                      startIcon={
                        <svg
                          className={classNames(
                            projectcss.all,
                            sty.svg___6MFd6
                          )}
                          role={"img"}
                        />
                      }
                    >
                      {"Contrata desarrolladores"}
                    </Button>
                  ),

                  value: args.featuresButton
                })}
              </div>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"platform"}
            data-plasmic-override={overrides.platform}
            hasGap={true}
            className={classNames(projectcss.all, sty.platform)}
            id={"certificado" as const}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ei6Qs)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fUyc7)}
              >
                <p.PlasmicImg
                  alt={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("Diseño Plataforma" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("Diseño Plataforma" as const)
                      : hasVariant(globalVariants, "screen", "laptopL")
                      ? ("Diseño Plataforma" as const)
                      : ("Diseño Plataforma" as const)
                  }
                  className={classNames(sty.img___41SjZ)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("492px" as const)
                      : ("750px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100vw" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("100vw" as const)
                      : ("52vw" as const)
                  }
                  loader={"plasmic"}
                  src={{
                    src: "https://img.plasmic.app/img-optimizer/v1/img/9d2e1c39b2919b6b593c329bf9077f28.png",
                    fullWidth: 1400,
                    fullHeight: 1100
                  }}
                />
              </p.Stack>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptop")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptopL")
                  ? true
                  : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__x694K)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__c90LD)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__b2JA4
                      )}
                    >
                      {"Nuestros desarrolladores están certificados"}
                    </h3>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eev0L
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Nuestro campus diseñado por formadores expertos permite vivir la mejor experiencia de aprendizaje."
                        : hasVariant(globalVariants, "screen", "laptop")
                        ? "Nuestro campus diseñado por formadores expertos permite vivir la mejor experiencia de aprendizaje."
                        : "Formamos a nuestros profesionales en las últimas versiones de los lenguajes y frameworks más utilizados.\n\nAntes de poder acceder a los procesos de selección deben realizar rigurosas pruebas para obtener las certificaciones correspondientes."}
                    </div>
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__cZxe)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button___5ZcT
                          )}
                          color={"white" as const}
                          endIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__hO0XP
                              )}
                              role={"img"}
                            />
                          }
                          link={
                            "https://imagina-formacion.typeform.com/to/y1QT9puo" as const
                          }
                          startIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg___0Fq99
                              )}
                              role={"img"}
                            />
                          }
                        >
                          {"Empieza ya"}
                        </Button>
                      ),

                      value: args.platformButton
                    })}
                  </div>
                </p.Stack>
              ) : null}
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"software"}
            data-plasmic-override={overrides.software}
            hasGap={true}
            className={classNames(projectcss.all, sty.software)}
            id={"plataforma" as const}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"topVerticalStack"}
              data-plasmic-override={overrides.topVerticalStack}
              hasGap={true}
              className={classNames(projectcss.all, sty.topVerticalStack)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"sectionHeading"}
                data-plasmic-override={overrides.sectionHeading}
                hasGap={true}
                className={classNames(projectcss.all, sty.sectionHeading)}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__sz74N)}
                  >
                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__n0Dqm
                      )}
                    >
                      {"Software propio de formación"}
                    </h4>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__y8Z3M
                      )}
                    >
                      {
                        "Desarrollado por nosotros, para nuestros developers y nuestros clientes.\nPermite conocer la evolución de todos nuestros profesionales.\nCertifica el nivel y conocimientos de las tecnologías."
                      }
                    </div>
                  </p.Stack>
                ) : null}
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__qq06C
                      )}
                      color={"blue" as const}
                      endIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__gXAh4)}
                          role={"img"}
                        />
                      }
                      link={
                        "https://imagina-formacion.typeform.com/to/y1QT9puo" as const
                      }
                      startIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__dvCw5)}
                          role={"img"}
                        />
                      }
                    >
                      {"Contrata desarrolladores"}
                    </Button>
                  ),

                  value: args.softwareButton
                })}
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"bottonVerticalStack"}
              data-plasmic-override={overrides.bottonVerticalStack}
              hasGap={true}
              className={classNames(projectcss.all, sty.bottonVerticalStack)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__tsQ9X)}>
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"callout"}
                  data-plasmic-override={overrides.callout}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.callout)}
                >
                  <Icon17Icon
                    className={classNames(projectcss.all, sty.svg__uMb6A)}
                    role={"img"}
                  />

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___56Vtk)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uMIlY
                      )}
                    >
                      {"12 Meses"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pdFFg
                      )}
                    >
                      {"de formación continua"}
                    </div>
                  </p.Stack>

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ljsbW)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "laptop")
                        ? ("auto" as const)
                        : ("351px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "laptop")
                        ? ("auto" as const)
                        : ("1216px" as const)
                    }
                    loader={"plasmic"}
                    loading={"lazy" as const}
                    src={{
                      src: "https://img.plasmic.app/img-optimizer/v1/img/e97c24d0bf9bff81a4e63572334e5c60.png",
                      fullWidth: 3648,
                      fullHeight: 1053
                    }}
                  />
                </p.Stack>
              </div>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"advantages"}
            data-plasmic-override={overrides.advantages}
            hasGap={true}
            className={classNames(projectcss.all, sty.advantages)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wvs7U)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fsNwc)}
              >
                <h4
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4___575Zc
                  )}
                >
                  {"¿Qué vas a conseguir con OpenBootcamp?"}
                </h4>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sAfFx
                  )}
                >
                  {
                    "OpenBootcamp te ofrece ventajas tales como la obtención de perfiles \ncomprometidos y favorece la eliminación de la rotación."
                  }
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__c6HUv)}
              >
                <ImageTextCardItem
                  className={classNames(
                    "__wab_instance",
                    sty.imageTextCardItem__vmY77
                  )}
                  description={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__epWsr
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{"Aumentando la "}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"motivación"}
                        </span>
                        <React.Fragment>{" y la "}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"versatilidad"}
                        </span>
                        <React.Fragment>
                          {" de los perfiles contratados.\n"}
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  }
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__h6XQm
                      )}
                    >
                      {"Desarrolladores comprometidos"}
                    </div>
                  }
                  videoSlot={
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"video"}
                      data-plasmic-override={overrides.video}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.video)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___79Ecb)}
                        displayHeight={"240px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "laptop")
                            ? ("100%" as const)
                            : ("auto" as const)
                        }
                        loader={"plasmic"}
                        loading={"lazy" as const}
                        src={{
                          src: "https://img.plasmic.app/img-optimizer/v1/img/c6490c49c5f4b3f6039de147fdff1a7d.png",
                          fullWidth: 771,
                          fullHeight: 480
                        }}
                      />
                    </p.Stack>
                  }
                />

                <ImageTextCardItem
                  className={classNames(
                    "__wab_instance",
                    sty.imageTextCardItem__lJtLp
                  )}
                  description={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1Achg
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{"Gracias a los "}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"compromisos de permanencia "}
                        </span>
                        <React.Fragment>
                          {
                            "vinculados a la inversión realizada en su formación."
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  }
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rw6Y3
                      )}
                    >
                      {"Reduce la rotación fidelizando a tus empleados"}
                    </div>
                  }
                  videoSlot={
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"video2"}
                      data-plasmic-override={overrides.video2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.video2)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__l1245)}
                        displayHeight={"240px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "laptop")
                            ? ("100%" as const)
                            : ("auto" as const)
                        }
                        loader={"plasmic"}
                        loading={"lazy" as const}
                        src={{
                          src: "https://img.plasmic.app/img-optimizer/v1/img/cd802929226c5abc4a1a667c36c1833b.png",
                          fullWidth: 772,
                          fullHeight: 480
                        }}
                      />
                    </p.Stack>
                  }
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__olwfq)}
                  >
                    <Icon16Icon
                      className={classNames(projectcss.all, sty.svg__yqPoJ)}
                      role={"img"}
                    />
                  </div>
                </ImageTextCardItem>

                <ImageTextCardItem
                  className={classNames(
                    "__wab_instance",
                    sty.imageTextCardItem__xJgD6
                  )}
                  description={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pxNbp
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{"Contamos con "}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"más de 2000 desarrolladores certificados."}
                        </span>
                      </React.Fragment>
                    </div>
                  }
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mIuO4
                      )}
                    >
                      {"Te presentamos a los desarrolladores en una semana"}
                    </div>
                  }
                  videoSlot={
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"video3"}
                      data-plasmic-override={overrides.video3}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.video3)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__l9H7H)}
                        displayHeight={"240px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "laptop")
                            ? ("100%" as const)
                            : ("auto" as const)
                        }
                        loader={"plasmic"}
                        loading={"lazy" as const}
                        src={{
                          src: "https://img.plasmic.app/img-optimizer/v1/img/ce1ef4a23fb996f8dfb3082e3e22d95a.png",
                          fullWidth: 771,
                          fullHeight: 480
                        }}
                      />
                    </p.Stack>
                  }
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__z8Jv)}
                  >
                    <Vector7Icon
                      className={classNames(projectcss.all, sty.svg__z3BbI)}
                      role={"img"}
                    />
                  </div>
                </ImageTextCardItem>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"contact"}
            data-plasmic-override={overrides.contact}
            hasGap={true}
            className={classNames(projectcss.all, sty.contact)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jfzGn)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptop")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptopL")
                  ? true
                  : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__cPtPd)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__x0AKj)}
                  >
                    <h5
                      data-plasmic-name={"h5"}
                      data-plasmic-override={overrides.h5}
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5
                      )}
                    >
                      {"¿Quieres saber más al respecto?"}
                    </h5>

                    <p
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p__axol3
                      )}
                    >
                      {
                        "Si necesitas a personal cualificado y que haya realizado certificaciones en las tecnologías que buscas, este es el lugar adecuado.\n\nCuéntanos un poco más sobre tus necesidades y trabajaremos para hacerte llegar a los mejores profesionales."
                      }
                    </p>
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__umxlQ)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button___1Hs5K
                          )}
                          color={"blue" as const}
                          endIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__qkuC0
                              )}
                              role={"img"}
                            />
                          }
                          link={
                            "https://imagina-formacion.typeform.com/to/y1QT9puo" as const
                          }
                          startIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__zcKzu
                              )}
                              role={"img"}
                            />
                          }
                        >
                          {"Contacta con nosotros"}
                        </Button>
                      ),

                      value: args.contactButton
                    })}
                  </div>
                </p.Stack>
              ) : null}

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xpUhj)}
              >
                <p.PlasmicImg
                  alt={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("Diseño Plataforma" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("Diseño Plataforma" as const)
                      : hasVariant(globalVariants, "screen", "laptopL")
                      ? ("Diseño Plataforma" as const)
                      : ("Diseño Plataforma" as const)
                  }
                  className={classNames(sty.img__eE8Aw)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("492px" as const)
                      : ("750px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100vw" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("100vw" as const)
                      : ("52vw" as const)
                  }
                  loader={"plasmic"}
                  src={{
                    src: "https://img.plasmic.app/img-optimizer/v1/img/b40df36bac017afed838e611e0960955.png",
                    fullWidth: 1164,
                    fullHeight: 824
                  }}
                />
              </p.Stack>
            </p.Stack>
          </p.Stack>

          {true ? (
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "hero",
    "header",
    "breadcrumb",
    "h1",
    "span",
    "clients",
    "leftColumn",
    "sectionTitle",
    "description",
    "rightColumn",
    "features",
    "separator2",
    "separator",
    "offerTitle7",
    "offerTitle8",
    "offerTitle11",
    "offerTitle9",
    "offerTitle10",
    "offerTitle12",
    "platform",
    "software",
    "topVerticalStack",
    "sectionHeading",
    "bottonVerticalStack",
    "callout",
    "advantages",
    "video",
    "video2",
    "video3",
    "contact",
    "h5",
    "footer"
  ],
  navbar: ["navbar"],
  hero: ["hero", "header", "breadcrumb", "h1", "span"],
  header: ["header", "breadcrumb", "h1", "span"],
  breadcrumb: ["breadcrumb"],
  h1: ["h1", "span"],
  span: ["span"],
  clients: [
    "clients",
    "leftColumn",
    "sectionTitle",
    "description",
    "rightColumn"
  ],
  leftColumn: ["leftColumn", "sectionTitle", "description"],
  sectionTitle: ["sectionTitle"],
  description: ["description"],
  rightColumn: ["rightColumn"],
  features: [
    "features",
    "separator2",
    "separator",
    "offerTitle7",
    "offerTitle8",
    "offerTitle11",
    "offerTitle9",
    "offerTitle10",
    "offerTitle12"
  ],
  separator2: ["separator2"],
  separator: ["separator"],
  offerTitle7: ["offerTitle7"],
  offerTitle8: ["offerTitle8"],
  offerTitle11: ["offerTitle11"],
  offerTitle9: ["offerTitle9"],
  offerTitle10: ["offerTitle10"],
  offerTitle12: ["offerTitle12"],
  platform: ["platform"],
  software: [
    "software",
    "topVerticalStack",
    "sectionHeading",
    "bottonVerticalStack",
    "callout"
  ],
  topVerticalStack: ["topVerticalStack", "sectionHeading"],
  sectionHeading: ["sectionHeading"],
  bottonVerticalStack: ["bottonVerticalStack", "callout"],
  callout: ["callout"],
  advantages: ["advantages", "video", "video2", "video3"],
  video: ["video"],
  video2: ["video2"],
  video3: ["video3"],
  contact: ["contact", "h5"],
  h5: ["h5"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  hero: "div";
  header: "div";
  breadcrumb: "div";
  h1: "h1";
  span: "span";
  clients: "div";
  leftColumn: "div";
  sectionTitle: "h2";
  description: "div";
  rightColumn: "div";
  features: "div";
  separator2: "svg";
  separator: "svg";
  offerTitle7: "div";
  offerTitle8: "div";
  offerTitle11: "div";
  offerTitle9: "div";
  offerTitle10: "div";
  offerTitle12: "div";
  platform: "div";
  software: "div";
  topVerticalStack: "div";
  sectionHeading: "div";
  bottonVerticalStack: "div";
  callout: "div";
  advantages: "div";
  video: "div";
  video2: "div";
  video3: "div";
  contact: "div";
  h5: "h5";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEmpresas__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEmpresas__VariantsArgs;
    args?: PlasmicEmpresas__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEmpresas__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEmpresas__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicEmpresas__ArgProps,
          internalVariantPropNames: PlasmicEmpresas__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicEmpresas__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEmpresas";
  } else {
    func.displayName = `PlasmicEmpresas.${nodeName}`;
  }
  return func;
}

export const PlasmicEmpresas = Object.assign(
  // Top-level PlasmicEmpresas renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    hero: makeNodeComponent("hero"),
    header: makeNodeComponent("header"),
    breadcrumb: makeNodeComponent("breadcrumb"),
    h1: makeNodeComponent("h1"),
    span: makeNodeComponent("span"),
    clients: makeNodeComponent("clients"),
    leftColumn: makeNodeComponent("leftColumn"),
    sectionTitle: makeNodeComponent("sectionTitle"),
    description: makeNodeComponent("description"),
    rightColumn: makeNodeComponent("rightColumn"),
    features: makeNodeComponent("features"),
    separator2: makeNodeComponent("separator2"),
    separator: makeNodeComponent("separator"),
    offerTitle7: makeNodeComponent("offerTitle7"),
    offerTitle8: makeNodeComponent("offerTitle8"),
    offerTitle11: makeNodeComponent("offerTitle11"),
    offerTitle9: makeNodeComponent("offerTitle9"),
    offerTitle10: makeNodeComponent("offerTitle10"),
    offerTitle12: makeNodeComponent("offerTitle12"),
    platform: makeNodeComponent("platform"),
    software: makeNodeComponent("software"),
    topVerticalStack: makeNodeComponent("topVerticalStack"),
    sectionHeading: makeNodeComponent("sectionHeading"),
    bottonVerticalStack: makeNodeComponent("bottonVerticalStack"),
    callout: makeNodeComponent("callout"),
    advantages: makeNodeComponent("advantages"),
    video: makeNodeComponent("video"),
    video2: makeNodeComponent("video2"),
    video3: makeNodeComponent("video3"),
    contact: makeNodeComponent("contact"),
    h5: makeNodeComponent("h5"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicEmpresas
    internalVariantProps: PlasmicEmpresas__VariantProps,
    internalArgProps: PlasmicEmpresas__ArgProps
  }
);

export default PlasmicEmpresas;
/* prettier-ignore-end */
