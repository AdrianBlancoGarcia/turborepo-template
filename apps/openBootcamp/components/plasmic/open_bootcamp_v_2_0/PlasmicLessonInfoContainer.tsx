// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qJhJbLN2Wy56BDK1v9VeHg
// Component: Tp8pI-iqIC
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import LessonInfoChip from "../../LessonInfoChip"; // plasmic-import: l1jB988kix/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_bootcamp_v_2_0.module.css"; // plasmic-import: qJhJbLN2Wy56BDK1v9VeHg/projectcss
import sty from "./PlasmicLessonInfoContainer.module.css"; // plasmic-import: Tp8pI-iqIC/css

import Line38Icon from "./icons/PlasmicIcon__Line38"; // plasmic-import: OaGeu5iaVJ/icon

export type PlasmicLessonInfoContainer__VariantMembers = {};

export type PlasmicLessonInfoContainer__VariantsArgs = {};
type VariantPropType = keyof PlasmicLessonInfoContainer__VariantsArgs;
export const PlasmicLessonInfoContainer__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLessonInfoContainer__ArgsType = {
  dificultad?: React.ReactNode;
  tiempo?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLessonInfoContainer__ArgsType;
export const PlasmicLessonInfoContainer__ArgProps = new Array<ArgPropType>(
  "dificultad",
  "tiempo"
);

export type PlasmicLessonInfoContainer__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultLessonInfoContainerProps {
  dificultad?: React.ReactNode;
  tiempo?: React.ReactNode;
  className?: string;
}

function PlasmicLessonInfoContainer__RenderFunc(props: {
  variants: PlasmicLessonInfoContainer__VariantsArgs;
  args: PlasmicLessonInfoContainer__ArgsType;
  overrides: PlasmicLessonInfoContainer__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <LessonInfoChip
                className={classNames(
                  "__wab_instance",
                  sty.lessonInfoChip__yTbQr
                )}
              />
            ),

            value: args.dificultad
          })}

          <Line38Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />

          {p.renderPlasmicSlot({
            defaultContents: (
              <LessonInfoChip
                className={classNames(
                  "__wab_instance",
                  sty.lessonInfoChip__f5LOx
                )}
                tipos={"duracion" as const}
              />
            ),

            value: args.tiempo
          })}
        </p.Stack>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "svg"],
  freeBox: ["freeBox", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLessonInfoContainer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLessonInfoContainer__VariantsArgs;
    args?: PlasmicLessonInfoContainer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLessonInfoContainer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLessonInfoContainer__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLessonInfoContainer__ArgProps,
          internalVariantPropNames: PlasmicLessonInfoContainer__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLessonInfoContainer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLessonInfoContainer";
  } else {
    func.displayName = `PlasmicLessonInfoContainer.${nodeName}`;
  }
  return func;
}

export const PlasmicLessonInfoContainer = Object.assign(
  // Top-level PlasmicLessonInfoContainer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicLessonInfoContainer
    internalVariantProps: PlasmicLessonInfoContainer__VariantProps,
    internalArgProps: PlasmicLessonInfoContainer__ArgProps
  }
);

export default PlasmicLessonInfoContainer;
/* prettier-ignore-end */
