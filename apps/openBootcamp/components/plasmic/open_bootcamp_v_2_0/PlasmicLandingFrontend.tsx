// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qJhJbLN2Wy56BDK1v9VeHg
// Component: HKomFaATo44
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: -CnkElqEbFOKi/component
import Button from "../../Button"; // plasmic-import: W52igaDMzA10w6/component
import LinkOb from "../../LinkOb"; // plasmic-import: MCZw6vVbPKy/component
import RoadmapSection from "../../RoadmapSection"; // plasmic-import: xSj-Ozd4Dq/component
import Roadmap from "../../Roadmap"; // plasmic-import: SFQJUY_7j6t/component
import TestimonialsTexts from "../../TestimonialsTexts"; // plasmic-import: PZVpznDmWug/component
import ProfileImage from "../../ProfileImage"; // plasmic-import: 2Y7usthzRd/component
import CourseLandingFaq from "../../CourseLandingFaq"; // plasmic-import: Mmwxop3xQ3/component
import Footer from "../../Footer"; // plasmic-import: b5lOT72QRjzHLq/component

import { useScreenVariants as useScreenVariantsgfTNvlXeClRRx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GfTNvlXE_ClRRx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_bootcamp_v_2_0.module.css"; // plasmic-import: qJhJbLN2Wy56BDK1v9VeHg/projectcss
import sty from "./PlasmicLandingFrontend.module.css"; // plasmic-import: HKomFaATo44/css

import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: MPKmKXARKW/icon
import Union3Icon from "./icons/PlasmicIcon__Union3"; // plasmic-import: GhQWX782d-/icon
import Vector8Icon from "./icons/PlasmicIcon__Vector8"; // plasmic-import: icZS_od47y/icon
import Vector9Icon from "./icons/PlasmicIcon__Vector9"; // plasmic-import: mVwYU7p2e/icon
import Vector11Icon from "./icons/PlasmicIcon__Vector11"; // plasmic-import: aDS2HTetYW/icon
import Icon27Icon from "./icons/PlasmicIcon__Icon27"; // plasmic-import: hKJX8YlwbG9/icon
import Icon30Icon from "./icons/PlasmicIcon__Icon30"; // plasmic-import: L0hZU5Oak/icon

export type PlasmicLandingFrontend__VariantMembers = {};

export type PlasmicLandingFrontend__VariantsArgs = {};
type VariantPropType = keyof PlasmicLandingFrontend__VariantsArgs;
export const PlasmicLandingFrontend__VariantProps =
  new Array<VariantPropType>();

export type PlasmicLandingFrontend__ArgsType = {
  heroButton?: React.ReactNode;
  testimonialsUsers?: React.ReactNode;
  leftArrow?: React.ReactNode;
  rightArrow?: React.ReactNode;
  testimonialsText?: React.ReactNode;
  faq?: React.ReactNode;
  navbar?: React.ReactNode;
  breadcrumb?: React.ReactNode;
  roadmap?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLandingFrontend__ArgsType;
export const PlasmicLandingFrontend__ArgProps = new Array<ArgPropType>(
  "heroButton",
  "testimonialsUsers",
  "leftArrow",
  "rightArrow",
  "testimonialsText",
  "faq",
  "navbar",
  "breadcrumb",
  "roadmap"
);

export type PlasmicLandingFrontend__OverridesType = {
  root?: p.Flex<"div">;
  hero?: p.Flex<"div">;
  bg?: p.Flex<"div">;
  floatItem2?: p.Flex<"div">;
  techItem01?: p.Flex<"div">;
  techItem02?: p.Flex<"div">;
  techItem03?: p.Flex<"div">;
  header?: p.Flex<"div">;
  breadcrumb?: p.Flex<"div">;
  sectionHeading2?: p.Flex<"h1">;
  floatItem01?: p.Flex<"div">;
  openBootcamp?: p.Flex<"div">;
  leftSide?: p.Flex<"div">;
  sectionHeading?: p.Flex<"div">;
  item1?: p.Flex<"div">;
  item2?: p.Flex<"div">;
  item3?: p.Flex<"div">;
  item4?: p.Flex<"div">;
  rightSide?: p.Flex<"div">;
  roadmap?: p.Flex<"div">;
  sectionHeadingRoadmap?: p.Flex<"div">;
  testimonial?: p.Flex<"div">;
  leftColumn?: p.Flex<"div">;
  rightColumn?: p.Flex<"div">;
  faq?: p.Flex<"div">;
  content?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultLandingFrontendProps {}

function PlasmicLandingFrontend__RenderFunc(props: {
  variants: PlasmicLandingFrontend__VariantsArgs;
  args: PlasmicLandingFrontend__ArgsType;
  overrides: PlasmicLandingFrontend__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgfTNvlXeClRRx()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__fpqZh)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <Navbar
                  className={classNames("__wab_instance", sty.navbar__qUknH)}
                />
              ),

              value: args.navbar
            })}
          </div>

          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              hasGap={true}
              className={classNames(projectcss.all, sty.hero)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptopL")
                  ? true
                  : true
              ) ? (
                <div
                  data-plasmic-name={"bg"}
                  data-plasmic-override={overrides.bg}
                  className={classNames(projectcss.all, sty.bg)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__my2G2)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "laptop")
                          ? true
                          : true
                      ) ? (
                        <div
                          data-plasmic-name={"floatItem2"}
                          data-plasmic-override={overrides.floatItem2}
                          className={classNames(projectcss.all, sty.floatItem2)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__iw0FE
                            )}
                          >
                            <p.Stack
                              as={"div"}
                              data-plasmic-name={"techItem01"}
                              data-plasmic-override={overrides.techItem01}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.techItem01
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lZ5Gf
                                )}
                              >
                                {"Git"}
                              </div>
                            </p.Stack>

                            <p.Stack
                              as={"div"}
                              data-plasmic-name={"techItem02"}
                              data-plasmic-override={overrides.techItem02}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.techItem02
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__iCxXo
                                )}
                              >
                                {"Java"}
                              </div>
                            </p.Stack>

                            <p.Stack
                              as={"div"}
                              data-plasmic-name={"techItem03"}
                              data-plasmic-override={overrides.techItem03}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.techItem03
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xDoIj
                                )}
                              >
                                {"React"}
                              </div>
                            </p.Stack>
                          </div>
                        </div>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : true
                      ) ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__nwqFg
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"header"}
                            data-plasmic-override={overrides.header}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.header)}
                          >
                            <div
                              data-plasmic-name={"breadcrumb"}
                              data-plasmic-override={overrides.breadcrumb}
                              className={classNames(
                                projectcss.all,
                                sty.breadcrumb
                              )}
                            >
                              {p.renderPlasmicSlot({
                                defaultContents: null,
                                value: args.breadcrumb
                              })}
                            </div>

                            <p.Stack
                              as={"h1"}
                              data-plasmic-name={"sectionHeading2"}
                              data-plasmic-override={overrides.sectionHeading2}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                projectcss.h1,
                                sty.sectionHeading2
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__iJrnj
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "Curso\nFront-End"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "laptop"
                                    )
                                  ? "Curso Front-End"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "laptopL"
                                    )
                                  ? "Curso Front-End"
                                  : "Curso Front-End"}
                              </div>

                              <span
                                className={classNames(
                                  projectcss.all,
                                  projectcss.span,
                                  projectcss.__wab_text,
                                  sty.span__wNnRi
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "gratis"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "laptop"
                                    )
                                  ? "gratis"
                                  : hasVariant(
                                      globalVariants,
                                      "screen",
                                      "laptopL"
                                    )
                                  ? "gratis"
                                  : "gratis"}
                              </span>
                            </p.Stack>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__m7Yk3
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? "Descubre una gran variedad de\ncursos gratuitos para adentrarte \nen el apasionante mundo de la programación."
                                : hasVariant(globalVariants, "screen", "laptop")
                                ? "Descubre una gran variedad de cursos gratuitos para adentrarte \nen el apasionante mundo de la programación."
                                : hasVariant(
                                    globalVariants,
                                    "screen",
                                    "laptopL"
                                  )
                                ? "Descubre una gran variedad de cursos gratuitos \npara adentrarte en el apasionante mundo \nde la programación."
                                : "Descubre una gran variedad de cursos gratuitos para \nadentrarte en el apasionante mundo \nde la programación."}
                            </div>
                          </p.Stack>

                          {p.renderPlasmicSlot({
                            defaultContents: (
                              <Button
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__injas
                                )}
                                color={"darkGray" as const}
                                endIcon={
                                  <svg
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__c7WSv
                                    )}
                                    role={"img"}
                                  />
                                }
                                link={
                                  "https://campus.open-bootcamp.com/register" as const
                                }
                                startIcon={
                                  <svg
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__pXpS
                                    )}
                                    role={"img"}
                                  />
                                }
                              >
                                {"Empieza ya"}
                              </Button>
                            ),

                            value: args.heroButton
                          })}
                        </p.Stack>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "laptop")
                          ? true
                          : true
                      ) ? (
                        <div
                          data-plasmic-name={"floatItem01"}
                          data-plasmic-override={overrides.floatItem01}
                          className={classNames(
                            projectcss.all,
                            sty.floatItem01
                          )}
                        >
                          <Union3Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__cnInp
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                    </p.Stack>
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__j8FuB)}
                  displayHeight={"100%" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loader={"plasmic"}
                  loading={"lazy" as const}
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: "https://site-assets.plasmic.app/5759d41ce607dd722a73377d053afcff.svg",
                          fullWidth: 161,
                          fullHeight: 150,
                          aspectRatio: 1.073795
                        }
                      : undefined
                  }
                />
              ) : null}
            </p.Stack>
          ) : null}

          <p.Stack
            as={"div"}
            data-plasmic-name={"openBootcamp"}
            data-plasmic-override={overrides.openBootcamp}
            hasGap={true}
            className={classNames(projectcss.all, sty.openBootcamp)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ofhZ2)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"leftSide"}
                data-plasmic-override={overrides.leftSide}
                hasGap={true}
                className={classNames(projectcss.all, sty.leftSide)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"sectionHeading"}
                  data-plasmic-override={overrides.sectionHeading}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.sectionHeading)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___22AZm
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "laptopL")
                      ? "¿Qué es OpenBootcamp?"
                      : "¿Qué es OpenBootcamp?"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__is0U8
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Un programa pionero en el que recibirás toda la formación que necesites hasta que encuentres \nun mejor empleo."
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? "Un programa pionero en el que recibirás toda la formación\nque necesites hasta que encuentres un mejor empleo."
                      : "Un programa pionero en el que recibirás toda la formación que necesites para que encuentres un mejor empleo."}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__blhyj)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"item1"}
                    data-plasmic-override={overrides.item1}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.item1)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sDAbS)}
                    >
                      <Vector8Icon
                        className={classNames(projectcss.all, sty.svg__rb0Vz)}
                        role={"img"}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6Eh3V
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mvaeT
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__upExd
                          )}
                        >
                          {"Formación"}
                        </div>

                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            sty.span__dJy8W
                          )}
                        >
                          {"100% gratuita"}
                        </span>
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vksOv
                        )}
                      >
                        {
                          "Nuestras empresas asumen el coste de tu \nformación una vez te contraten."
                        }
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"item2"}
                    data-plasmic-override={overrides.item2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.item2)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vxyfg)}
                    >
                      <Vector9Icon
                        className={classNames(projectcss.all, sty.svg__cp7DN)}
                        role={"img"}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ekBg8)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7QAga
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hs73D
                          )}
                        >
                          {"Flexibilidad total"}
                        </div>
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xUl44
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          <React.Fragment>
                            <React.Fragment>
                              {"Puedes formarte durante 12 meses en remoto "}
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"a tu ritmo."}
                            </span>
                          </React.Fragment>
                        ) : (
                          "Podrás formarte para siempre en remoto a tu ritmo."
                        )}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"item3"}
                    data-plasmic-override={overrides.item3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.item3)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nPxwa)}
                    >
                      <Vector11Icon
                        className={classNames(projectcss.all, sty.svg__cTTvb)}
                        role={"img"}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__iYxz2)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oRj4P
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__v4ZGo
                          )}
                        >
                          {"Tutorización"}
                        </div>
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sRwa
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Dispondrás de la ayuda "}
                            </span>
                            <React.Fragment>{"\n"}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"de profesionales"}
                            </span>
                            <React.Fragment>
                              {
                                " en todo momento para hacer de tu formación, una experiencia única."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        ) : hasVariant(globalVariants, "screen", "laptop") ? (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Dispondrás de la ayuda de profesionales"}
                            </span>
                            <React.Fragment>
                              {
                                " en todo momento para hacer de tu formación, una experiencia única."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"Dispondrás de la ayuda de profesionales"}
                            </span>
                            <React.Fragment>
                              {
                                " en \ntodo momento para hacer de tu formación, \nuna experiencia única."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        )}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"item4"}
                    data-plasmic-override={overrides.item4}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.item4)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mA7BA)}
                    >
                      <Icon27Icon
                        className={classNames(projectcss.all, sty.svg__hLqHw)}
                        role={"img"}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__uKx9A)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qe5Qw
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___3LvWr
                          )}
                        >
                          {"Oportunidades"}
                        </div>

                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            sty.span__olpx8
                          )}
                        >
                          {"laborales"}
                        </span>
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__e9HeY
                        )}
                      >
                        {
                          "Cuando quieras, te presentamos a ofertas laborales que encajan contigo en base a tus gustos y requisitos."
                        }
                      </div>
                    </p.Stack>
                  </p.Stack>

                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cWCe)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wmily
                        )}
                      >
                        {true ? (
                          <Icon30Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__yFbzU
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </div>
                    </div>
                  ) : null}
                </p.Stack>
              </p.Stack>

              <div
                data-plasmic-name={"rightSide"}
                data-plasmic-override={overrides.rightSide}
                className={classNames(projectcss.all, sty.rightSide)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__qe4Ut)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("356px" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("555px" as const)
                      : ("822px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0%" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100vw" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("100vw" as const)
                      : ("826px" as const)
                  }
                  loader={"plasmic"}
                  loading={"lazy" as const}
                  src={{
                    src: "https://img.plasmic.app/img-optimizer/v1/img/d7766c54eb55b859f2bbc13f1db91cc9.png",
                    fullWidth: 610,
                    fullHeight: 822
                  }}
                />
              </div>
            </p.Stack>
          </p.Stack>

          <div
            data-plasmic-name={"roadmap"}
            data-plasmic-override={overrides.roadmap}
            className={classNames(projectcss.all, sty.roadmap)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jj8F)}
            >
              {(
                hasVariant(globalVariants, "screen", "laptop")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptopL")
                  ? true
                  : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__br5O7)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___14DT)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vnydu
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___9UuOw)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"306px" as const}
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://img.plasmic.app/img-optimizer/v1/img/d33a8375fc9aec3d4146fb3ce25cde97.png",
                            fullWidth: 748,
                            fullHeight: 612
                          }}
                        />
                      </div>
                    ) : null}
                  </div>
                </div>
              ) : null}

              <p.Stack
                as={"div"}
                data-plasmic-name={"sectionHeadingRoadmap"}
                data-plasmic-override={overrides.sectionHeadingRoadmap}
                hasGap={true}
                className={classNames(
                  projectcss.all,
                  sty.sectionHeadingRoadmap
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__btlql
                  )}
                >
                  {"Nuestras tecnologías se adaptan a tí"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1Z58X
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Tenemos hojas de ruta confeccionadas para cada tipo de alumno, tanto los que empiezan en el mundo del desarrollo como los que ya tienen conocimientos avanzados y solo necesitan un último empujón que \nles lance al entorno laboral."
                    : hasVariant(globalVariants, "screen", "laptop")
                    ? "Tenemos hojas de ruta confeccionadas para cada tipo de alumno, tanto\nlos que empiezan en el mundo del desarrollo como los que ya tienen conocimientos avanzados y solo necesitan un último empujón que les\nlance al entorno laboral."
                    : hasVariant(globalVariants, "screen", "laptopL")
                    ? "Tenemos hojas de ruta confeccionadas para cada tipo de alumno, tanto los que empiezan en el mundo del desarrollo como los que ya tienen conocimientos avanzados y solo necesitan un último empujón que les lance al entorno laboral."
                    : "Tenemos hojas de ruta confeccionadas para cada tipo de alumno, tanto los que empiezan en el mundo del desarrollo como los que ya tienen conocimientos avanzados y solo necesitan un último empujón que les lance al entorno laboral."}
                </div>
              </p.Stack>

              {p.renderPlasmicSlot({
                defaultContents: (
                  <RoadmapSection
                    className={classNames(
                      "__wab_instance",
                      sty.roadmapSection___4SYe
                    )}
                  />
                ),

                value: args.roadmap
              })}
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"testimonial"}
            data-plasmic-override={overrides.testimonial}
            className={classNames(projectcss.all, sty.testimonial)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__lx2Md)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"leftColumn"}
                data-plasmic-override={overrides.leftColumn}
                hasGap={true}
                className={classNames(projectcss.all, sty.leftColumn)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dorki
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"¿Qué opinan nuestros "}</React.Fragment>
                    {
                      <span
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.span__lrCoG
                        )}
                      >
                        {"alumnos?"}
                      </span>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__bvi0L)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__iqLp4
                        )}
                        previousNextPage={"previousPageLastChild" as const}
                      />
                    ),

                    value: args.leftArrow
                  })}

                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___6Xf2F
                        )}
                        previousNextPage={"nextPage" as const}
                      />
                    ),

                    value: args.rightArrow
                  })}
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"rightColumn"}
                data-plasmic-override={overrides.rightColumn}
                hasGap={true}
                className={classNames(projectcss.all, sty.rightColumn)}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__cbb6N)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <TestimonialsTexts
                          className={classNames(
                            "__wab_instance",
                            sty.testimonialsTexts__r0OJx
                          )}
                        />
                      ),

                      value: args.testimonialsText
                    })}
                  </p.Stack>
                ) : null}

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___537W3)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <React.Fragment>
                        <ProfileImage
                          className={classNames(
                            "__wab_instance",
                            sty.profileImage__xJruS
                          )}
                        />

                        <ProfileImage
                          className={classNames(
                            "__wab_instance",
                            sty.profileImage__zafkh
                          )}
                        />

                        <ProfileImage
                          className={classNames(
                            "__wab_instance",
                            sty.profileImage__cK0Kq
                          )}
                        />

                        <ProfileImage
                          className={classNames(
                            "__wab_instance",
                            sty.profileImage__j0Eq5
                          )}
                        />
                      </React.Fragment>
                    ),
                    value: args.testimonialsUsers
                  })}
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"faq"}
            data-plasmic-override={overrides.faq}
            className={classNames(projectcss.all, sty.faq)}
          >
            <div
              data-plasmic-name={"content"}
              data-plasmic-override={overrides.content}
              className={classNames(projectcss.all, sty.content)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <CourseLandingFaq
                    className={classNames(
                      "__wab_instance",
                      sty.courseLandingFaq__pvenl
                    )}
                    subtitle={"Resolvamos tus dudas"}
                    title={
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2__zHcMz
                        )}
                      >
                        {"¿Tienes más preguntas? ¡Aquí te las respondemos!"}
                      </h2>
                    }
                  />
                ),

                value: args.faq
              })}
            </div>
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero",
    "bg",
    "floatItem2",
    "techItem01",
    "techItem02",
    "techItem03",
    "header",
    "breadcrumb",
    "sectionHeading2",
    "floatItem01",
    "openBootcamp",
    "leftSide",
    "sectionHeading",
    "item1",
    "item2",
    "item3",
    "item4",
    "rightSide",
    "roadmap",
    "sectionHeadingRoadmap",
    "testimonial",
    "leftColumn",
    "rightColumn",
    "faq",
    "content",
    "footer"
  ],
  hero: [
    "hero",
    "bg",
    "floatItem2",
    "techItem01",
    "techItem02",
    "techItem03",
    "header",
    "breadcrumb",
    "sectionHeading2",
    "floatItem01"
  ],
  bg: [
    "bg",
    "floatItem2",
    "techItem01",
    "techItem02",
    "techItem03",
    "header",
    "breadcrumb",
    "sectionHeading2",
    "floatItem01"
  ],
  floatItem2: ["floatItem2", "techItem01", "techItem02", "techItem03"],
  techItem01: ["techItem01"],
  techItem02: ["techItem02"],
  techItem03: ["techItem03"],
  header: ["header", "breadcrumb", "sectionHeading2"],
  breadcrumb: ["breadcrumb"],
  sectionHeading2: ["sectionHeading2"],
  floatItem01: ["floatItem01"],
  openBootcamp: [
    "openBootcamp",
    "leftSide",
    "sectionHeading",
    "item1",
    "item2",
    "item3",
    "item4",
    "rightSide"
  ],
  leftSide: ["leftSide", "sectionHeading", "item1", "item2", "item3", "item4"],
  sectionHeading: ["sectionHeading"],
  item1: ["item1"],
  item2: ["item2"],
  item3: ["item3"],
  item4: ["item4"],
  rightSide: ["rightSide"],
  roadmap: ["roadmap", "sectionHeadingRoadmap"],
  sectionHeadingRoadmap: ["sectionHeadingRoadmap"],
  testimonial: ["testimonial", "leftColumn", "rightColumn"],
  leftColumn: ["leftColumn"],
  rightColumn: ["rightColumn"],
  faq: ["faq", "content"],
  content: ["content"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  hero: "div";
  bg: "div";
  floatItem2: "div";
  techItem01: "div";
  techItem02: "div";
  techItem03: "div";
  header: "div";
  breadcrumb: "div";
  sectionHeading2: "h1";
  floatItem01: "div";
  openBootcamp: "div";
  leftSide: "div";
  sectionHeading: "div";
  item1: "div";
  item2: "div";
  item3: "div";
  item4: "div";
  rightSide: "div";
  roadmap: "div";
  sectionHeadingRoadmap: "div";
  testimonial: "div";
  leftColumn: "div";
  rightColumn: "div";
  faq: "div";
  content: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLandingFrontend__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLandingFrontend__VariantsArgs;
    args?: PlasmicLandingFrontend__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLandingFrontend__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLandingFrontend__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLandingFrontend__ArgProps,
          internalVariantPropNames: PlasmicLandingFrontend__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLandingFrontend__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLandingFrontend";
  } else {
    func.displayName = `PlasmicLandingFrontend.${nodeName}`;
  }
  return func;
}

export const PlasmicLandingFrontend = Object.assign(
  // Top-level PlasmicLandingFrontend renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    bg: makeNodeComponent("bg"),
    floatItem2: makeNodeComponent("floatItem2"),
    techItem01: makeNodeComponent("techItem01"),
    techItem02: makeNodeComponent("techItem02"),
    techItem03: makeNodeComponent("techItem03"),
    header: makeNodeComponent("header"),
    breadcrumb: makeNodeComponent("breadcrumb"),
    sectionHeading2: makeNodeComponent("sectionHeading2"),
    floatItem01: makeNodeComponent("floatItem01"),
    openBootcamp: makeNodeComponent("openBootcamp"),
    leftSide: makeNodeComponent("leftSide"),
    sectionHeading: makeNodeComponent("sectionHeading"),
    item1: makeNodeComponent("item1"),
    item2: makeNodeComponent("item2"),
    item3: makeNodeComponent("item3"),
    item4: makeNodeComponent("item4"),
    rightSide: makeNodeComponent("rightSide"),
    roadmap: makeNodeComponent("roadmap"),
    sectionHeadingRoadmap: makeNodeComponent("sectionHeadingRoadmap"),
    testimonial: makeNodeComponent("testimonial"),
    leftColumn: makeNodeComponent("leftColumn"),
    rightColumn: makeNodeComponent("rightColumn"),
    faq: makeNodeComponent("faq"),
    content: makeNodeComponent("content"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicLandingFrontend
    internalVariantProps: PlasmicLandingFrontend__VariantProps,
    internalArgProps: PlasmicLandingFrontend__ArgProps
  }
);

export default PlasmicLandingFrontend;
/* prettier-ignore-end */
