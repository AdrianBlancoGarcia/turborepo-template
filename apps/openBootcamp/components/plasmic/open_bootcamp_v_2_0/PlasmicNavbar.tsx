// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qJhJbLN2Wy56BDK1v9VeHg
// Component: -CnkElqEbFOKi
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import LogoAlt from "../../LogoAlt"; // plasmic-import: g_CaIFNNnX/component
import Logo from "../../Logo"; // plasmic-import: ot9dOcHnM075j/component
import Button from "../../Button"; // plasmic-import: W52igaDMzA10w6/component
import LinkOb from "../../LinkOb"; // plasmic-import: MCZw6vVbPKy/component

import { useScreenVariants as useScreenVariantsgfTNvlXeClRRx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GfTNvlXE_ClRRx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_bootcamp_v_2_0.module.css"; // plasmic-import: qJhJbLN2Wy56BDK1v9VeHg/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: -CnkElqEbFOKi/css

import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: MPKmKXARKW/icon

export type PlasmicNavbar__VariantMembers = {
  page: "home" | "empresas" | "cap";
};

export type PlasmicNavbar__VariantsArgs = {
  page?: SingleChoiceArg<"home" | "empresas" | "cap">;
};

type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>("page");

export type PlasmicNavbar__ArgsType = {
  links?: React.ReactNode;
  navButton?: React.ReactNode;
  loginButton?: React.ReactNode;
};

type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>(
  "links",
  "navButton",
  "loginButton"
);

export type PlasmicNavbar__OverridesType = {
  root?: p.Flex<"div">;
  leftNavbar?: p.Flex<"div">;
  logoAlt?: p.Flex<typeof LogoAlt>;
  logo?: p.Flex<typeof Logo>;
  links?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultNavbarProps {
  links?: React.ReactNode;
  navButton?: React.ReactNode;
  loginButton?: React.ReactNode;
  page?: SingleChoiceArg<"home" | "empresas" | "cap">;
  className?: string;
}

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgfTNvlXeClRRx()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootpage_empresas]: hasVariant(variants, "page", "empresas"),
          [sty.rootpage_home]: hasVariant(variants, "page", "home")
        }
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"leftNavbar"}
        data-plasmic-override={overrides.leftNavbar}
        hasGap={true}
        className={classNames(projectcss.all, sty.leftNavbar)}
      >
        {(hasVariant(variants, "page", "cap") ? true : true) ? (
          <LogoAlt
            data-plasmic-name={"logoAlt"}
            data-plasmic-override={overrides.logoAlt}
            className={classNames("__wab_instance", sty.logoAlt, {
              [sty.logoAltpage_cap]: hasVariant(variants, "page", "cap")
            })}
          />
        ) : null}
        {(hasVariant(variants, "page", "cap") ? true : true) ? (
          <Logo
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            className={classNames("__wab_instance", sty.logo, {
              [sty.logopage_cap]: hasVariant(variants, "page", "cap")
            })}
          />
        ) : null}
      </p.Stack>

      {(
        hasVariant(globalVariants, "screen", "mobileOnly")
          ? true
          : hasVariant(globalVariants, "screen", "laptop")
          ? true
          : hasVariant(globalVariants, "screen", "laptopM")
          ? true
          : true
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"links"}
          data-plasmic-override={overrides.links}
          hasGap={true}
          className={classNames(projectcss.all, sty.links, {
            [sty.linkspage_empresas]: hasVariant(variants, "page", "empresas")
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <Button
                  className={classNames("__wab_instance", sty.button__yLcmZ)}
                  color={"navLink" as const}
                  endIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg___3MaGv)}
                      role={"img"}
                    />
                  }
                  link={
                    "https://imagina-formacion.typeform.com/openmarketers" as const
                  }
                  size={"small" as const}
                  startIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg___1L1K)}
                      role={"img"}
                    />
                  }
                >
                  {"Empresas"}
                </Button>

                <LinkOb
                  className={classNames("__wab_instance", sty.linkOb__pzhZ)}
                >
                  {"Plataforma"}
                </LinkOb>

                <LinkOb
                  className={classNames("__wab_instance", sty.linkOb__tPEqg)}
                >
                  {"Comunidad"}
                </LinkOb>

                <LinkOb
                  className={classNames("__wab_instance", sty.linkOb__cog9W)}
                >
                  {"Opiniones"}
                </LinkOb>

                <LinkOb
                  className={classNames("__wab_instance", sty.linkOb__yCCxX)}
                >
                  {"Contenido"}
                </LinkOb>
              </React.Fragment>
            ),
            value: args.links
          })}
        </p.Stack>
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxpage_empresas]: hasVariant(variants, "page", "empresas")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <Button
              className={classNames("__wab_instance", sty.button__q98E7)}
              color={"white" as const}
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__q5Uij)}
                  role={"img"}
                />
              }
              link={"https://campus.open-bootcamp.com/login" as const}
              size={"small" as const}
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__lo2Is)}
                  role={"img"}
                />
              }
            >
              {"Ir al Campus"}
            </Button>
          ),

          value: args.loginButton
        })}

        {p.renderPlasmicSlot({
          defaultContents: (
            <Button
              className={classNames("__wab_instance", sty.button__bDl8S)}
              color={"gradient" as const}
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__ticsf)}
                  role={"img"}
                />
              }
              link={"https://campus.open-bootcamp.com/register" as const}
              size={"small" as const}
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__yq0EY)}
                  role={"img"}
                />
              }
            >
              {"Button"}
            </Button>
          ),

          value: args.navButton
        })}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "leftNavbar", "logoAlt", "logo", "links", "freeBox"],
  leftNavbar: ["leftNavbar", "logoAlt", "logo"],
  logoAlt: ["logoAlt"],
  logo: ["logo"],
  links: ["links"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  leftNavbar: "div";
  logoAlt: typeof LogoAlt;
  logo: typeof Logo;
  links: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    leftNavbar: makeNodeComponent("leftNavbar"),
    logoAlt: makeNodeComponent("logoAlt"),
    logo: makeNodeComponent("logo"),
    links: makeNodeComponent("links"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
