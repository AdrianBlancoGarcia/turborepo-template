// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qJhJbLN2Wy56BDK1v9VeHg
// Component: nl-iwxSy9T
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsgfTNvlXeClRRx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GfTNvlXE_ClRRx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_bootcamp_v_2_0.module.css"; // plasmic-import: qJhJbLN2Wy56BDK1v9VeHg/projectcss
import sty from "./PlasmicBreadcrumbItem.module.css"; // plasmic-import: nl-iwxSy9T/css

import Vector10Icon from "./icons/PlasmicIcon__Vector10"; // plasmic-import: koOZHLBI38/icon

export type PlasmicBreadcrumbItem__VariantMembers = {
  parent: "parent";
  child: "child";
};

export type PlasmicBreadcrumbItem__VariantsArgs = {
  parent?: SingleBooleanChoiceArg<"parent">;
  child?: MultiChoiceArg<"child">;
};

type VariantPropType = keyof PlasmicBreadcrumbItem__VariantsArgs;
export const PlasmicBreadcrumbItem__VariantProps = new Array<VariantPropType>(
  "parent",
  "child"
);

export type PlasmicBreadcrumbItem__ArgsType = {
  breadcrumbParent?: React.ReactNode;
  breadcrumbChild?: React.ReactNode;
};

type ArgPropType = keyof PlasmicBreadcrumbItem__ArgsType;
export const PlasmicBreadcrumbItem__ArgProps = new Array<ArgPropType>(
  "breadcrumbParent",
  "breadcrumbChild"
);

export type PlasmicBreadcrumbItem__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  svg?: p.Flex<"svg">;
};

export interface DefaultBreadcrumbItemProps {
  breadcrumbParent?: React.ReactNode;
  breadcrumbChild?: React.ReactNode;
  parent?: SingleBooleanChoiceArg<"parent">;
  child?: MultiChoiceArg<"child">;
  className?: string;
}

function PlasmicBreadcrumbItem__RenderFunc(props: {
  variants: PlasmicBreadcrumbItem__VariantsArgs;
  args: PlasmicBreadcrumbItem__ArgsType;
  overrides: PlasmicBreadcrumbItem__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgfTNvlXeClRRx()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootparent]: hasVariant(variants, "parent", "parent") }
      )}
    >
      {(hasVariant(variants, "parent", "parent") ? true : true) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__sxUuu, {
            [sty.freeBoxparent__sxUuuTagiV]: hasVariant(
              variants,
              "parent",
              "parent"
            )
          })}
        >
          {(hasVariant(variants, "child", "child") ? true : true) ? (
            <p.PlasmicLink
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(projectcss.all, projectcss.a, sty.link, {
                [sty.linkchild]: hasVariant(variants, "child", "child"),
                [sty.linkparent]: hasVariant(variants, "parent", "parent")
              })}
              component={Link}
              platform={"nextjs"}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Parent",
                value: args.breadcrumbParent
              })}
            </p.PlasmicLink>
          ) : null}
          {(
            hasVariant(variants, "child", "child")
              ? true
              : hasVariant(variants, "parent", "parent")
              ? true
              : true
          ) ? (
            <p.PlasmicIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              PlasmicIconType={
                hasVariant(globalVariants, "screen", "laptopM")
                  ? Vector10Icon
                  : Vector10Icon
              }
              className={classNames(projectcss.all, sty.svg, {
                [sty.svgchild]: hasVariant(variants, "child", "child"),
                [sty.svgparent]: hasVariant(variants, "parent", "parent")
              })}
              role={"img"}
            />
          ) : null}
          {(
            hasVariant(variants, "child", "child")
              ? true
              : hasVariant(variants, "parent", "parent")
              ? true
              : true
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__uNzr, {
                [sty.freeBoxchild__uNzrTvYfY]: hasVariant(
                  variants,
                  "child",
                  "child"
                ),
                [sty.freeBoxparent__uNzrTagiV]: hasVariant(
                  variants,
                  "parent",
                  "parent"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Child",
                value: args.breadcrumbChild,
                className: classNames(sty.slotTargetBreadcrumbChild, {
                  [sty.slotTargetBreadcrumbChildchild]: hasVariant(
                    variants,
                    "child",
                    "child"
                  ),
                  [sty.slotTargetBreadcrumbChildparent]: hasVariant(
                    variants,
                    "parent",
                    "parent"
                  )
                })
              })}
            </div>
          ) : null}
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "svg"],
  link: ["link"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBreadcrumbItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBreadcrumbItem__VariantsArgs;
    args?: PlasmicBreadcrumbItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBreadcrumbItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBreadcrumbItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBreadcrumbItem__ArgProps,
          internalVariantPropNames: PlasmicBreadcrumbItem__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBreadcrumbItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBreadcrumbItem";
  } else {
    func.displayName = `PlasmicBreadcrumbItem.${nodeName}`;
  }
  return func;
}

export const PlasmicBreadcrumbItem = Object.assign(
  // Top-level PlasmicBreadcrumbItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicBreadcrumbItem
    internalVariantProps: PlasmicBreadcrumbItem__VariantProps,
    internalArgProps: PlasmicBreadcrumbItem__ArgProps
  }
);

export default PlasmicBreadcrumbItem;
/* prettier-ignore-end */
