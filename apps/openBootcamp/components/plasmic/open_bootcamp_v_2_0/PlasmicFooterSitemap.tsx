// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qJhJbLN2Wy56BDK1v9VeHg
// Component: CFLpNLrOTXl
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Logo from "../../Logo"; // plasmic-import: ot9dOcHnM075j/component
import Button from "../../Button"; // plasmic-import: W52igaDMzA10w6/component

import { useScreenVariants as useScreenVariantsgfTNvlXeClRRx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GfTNvlXE_ClRRx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_bootcamp_v_2_0.module.css"; // plasmic-import: qJhJbLN2Wy56BDK1v9VeHg/projectcss
import sty from "./PlasmicFooterSitemap.module.css"; // plasmic-import: CFLpNLrOTXl/css

import LinkedInsvgIcon from "./icons/PlasmicIcon__LinkedInsvg"; // plasmic-import: uOq4ABuNhS/icon
import TwittersvgIcon from "./icons/PlasmicIcon__Twittersvg"; // plasmic-import: Ydk_hocEhI/icon
import InstagramsvgIcon from "./icons/PlasmicIcon__Instagramsvg"; // plasmic-import: IZbwU0kHup/icon
import FacebooksvgIcon from "./icons/PlasmicIcon__Facebooksvg"; // plasmic-import: 5g8a3BHjPH/icon

export type PlasmicFooterSitemap__VariantMembers = {};

export type PlasmicFooterSitemap__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooterSitemap__VariantsArgs;
export const PlasmicFooterSitemap__VariantProps = new Array<VariantPropType>();

export type PlasmicFooterSitemap__ArgsType = {};
type ArgPropType = keyof PlasmicFooterSitemap__ArgsType;
export const PlasmicFooterSitemap__ArgProps = new Array<ArgPropType>();

export type PlasmicFooterSitemap__OverridesType = {
  root?: p.Flex<"div">;
  logo?: p.Flex<typeof Logo>;
  text?: p.Flex<"div">;
  _2021LandifyUiKitAllRightsReserved?: p.Flex<"div">;
};

export interface DefaultFooterSitemapProps {
  className?: string;
}

function PlasmicFooterSitemap__RenderFunc(props: {
  variants: PlasmicFooterSitemap__VariantsArgs;
  args: PlasmicFooterSitemap__ArgsType;
  overrides: PlasmicFooterSitemap__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgfTNvlXeClRRx()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__hfBNp)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__yapRc)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__mh0Aj)}
          >
            <Logo
              data-plasmic-name={"logo"}
              data-plasmic-override={overrides.logo}
              className={classNames("__wab_instance", sty.logo)}
              whiteLogo={true}
            />
          </p.Stack>

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mRbNi)}
            >
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Redes Sociales"
                  : "Redes Sociales"}
              </div>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__cZfbu)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__n3Pi)}
                    link={
                      hasVariant(globalVariants, "screen", "laptopM")
                        ? ("https://www.linkedin.com/school/openbootcamp-escuela/" as const)
                        : ("https://www.linkedin.com/school/openbootcamp-escuela/" as const)
                    }
                    showStartIcon={
                      hasVariant(globalVariants, "screen", "laptopM")
                        ? true
                        : true
                    }
                    size={
                      hasVariant(globalVariants, "screen", "laptopM")
                        ? ("linkOnly" as const)
                        : ("linkOnly" as const)
                    }
                    startIcon={
                      <LinkedInsvgIcon
                        className={classNames(projectcss.all, sty.svg__vxjsd)}
                        role={"img"}
                      />
                    }
                  >
                    {hasVariant(globalVariants, "screen", "laptopM")
                      ? "LinkedIn"
                      : "LinkedIn"}
                  </Button>

                  <Button
                    className={classNames("__wab_instance", sty.button__bb9Bq)}
                    link={"https://twitter.com/Open_Bootcamp" as const}
                    showStartIcon={true}
                    size={"linkOnly" as const}
                    startIcon={
                      <TwittersvgIcon
                        className={classNames(projectcss.all, sty.svg__la7Dq)}
                        role={"img"}
                      />
                    }
                  >
                    {"Twitter"}
                  </Button>

                  <Button
                    className={classNames("__wab_instance", sty.button__w2UYf)}
                    link={"https://www.instagram.com/openbootcamp_/" as const}
                    showStartIcon={true}
                    size={"linkOnly" as const}
                    startIcon={
                      <InstagramsvgIcon
                        className={classNames(projectcss.all, sty.svg__wtlgO)}
                        role={"img"}
                      />
                    }
                  >
                    {"Instagram"}
                  </Button>

                  <Button
                    className={classNames("__wab_instance", sty.button__qJkds)}
                    link={
                      "https://www.facebook.com/OpenBootcamp-228890059099006/" as const
                    }
                    showStartIcon={true}
                    size={"linkOnly" as const}
                    startIcon={
                      <FacebooksvgIcon
                        className={classNames(projectcss.all, sty.svg__po6Tn)}
                        role={"img"}
                      />
                    }
                  >
                    {"Facebook"}
                  </Button>
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
        </p.Stack>

        <div
          data-plasmic-name={"_2021LandifyUiKitAllRightsReserved"}
          data-plasmic-override={overrides._2021LandifyUiKitAllRightsReserved}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty._2021LandifyUiKitAllRightsReserved
          )}
        >
          {"Â© 2022 OpenBootcamp SL. Todos los derechos reservados."}
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "logo", "text", "_2021LandifyUiKitAllRightsReserved"],
  logo: ["logo"],
  text: ["text"],
  _2021LandifyUiKitAllRightsReserved: ["_2021LandifyUiKitAllRightsReserved"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  logo: typeof Logo;
  text: "div";
  _2021LandifyUiKitAllRightsReserved: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooterSitemap__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooterSitemap__VariantsArgs;
    args?: PlasmicFooterSitemap__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooterSitemap__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooterSitemap__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooterSitemap__ArgProps,
          internalVariantPropNames: PlasmicFooterSitemap__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicFooterSitemap__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterSitemap";
  } else {
    func.displayName = `PlasmicFooterSitemap.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterSitemap = Object.assign(
  // Top-level PlasmicFooterSitemap renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    text: makeNodeComponent("text"),
    _2021LandifyUiKitAllRightsReserved: makeNodeComponent(
      "_2021LandifyUiKitAllRightsReserved"
    ),

    // Metadata about props expected for PlasmicFooterSitemap
    internalVariantProps: PlasmicFooterSitemap__VariantProps,
    internalArgProps: PlasmicFooterSitemap__ArgProps
  }
);

export default PlasmicFooterSitemap;
/* prettier-ignore-end */
