// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qJhJbLN2Wy56BDK1v9VeHg
// Component: R8_ND72D7VJ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TableRow from "../../TableRow"; // plasmic-import: 8vgCLJCzW_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_bootcamp_v_2_0.module.css"; // plasmic-import: qJhJbLN2Wy56BDK1v9VeHg/projectcss
import sty from "./PlasmicLessonTable.module.css"; // plasmic-import: R8_ND72D7VJ/css

export type PlasmicLessonTable__VariantMembers = {};

export type PlasmicLessonTable__VariantsArgs = {};
type VariantPropType = keyof PlasmicLessonTable__VariantsArgs;
export const PlasmicLessonTable__VariantProps = new Array<VariantPropType>();

export type PlasmicLessonTable__ArgsType = {};
type ArgPropType = keyof PlasmicLessonTable__ArgsType;
export const PlasmicLessonTable__ArgProps = new Array<ArgPropType>();

export type PlasmicLessonTable__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultLessonTableProps {
  className?: string;
}

function PlasmicLessonTable__RenderFunc(props: {
  variants: PlasmicLessonTable__VariantsArgs;
  args: PlasmicLessonTable__ArgsType;
  overrides: PlasmicLessonTable__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <TableRow
              className={classNames("__wab_instance", sty.tableRow__kaNx4)}
              title={
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {"INT"}
                </div>
              }
            />

            <TableRow
              className={classNames("__wab_instance", sty.tableRow___4CEMp)}
              description={
                "Define un dato de tipo flotante, es decir valores con coma (,) por ejemplo 12,2."
              }
              title={"FLOAT"}
            />

            <TableRow
              className={classNames("__wab_instance", sty.tableRow__fcPS)}
              description={
                "Un char es un carácter, una letra, un espacio, una coma, un punto, etc."
              }
              title={"CHAR"}
            />

            <TableRow
              className={classNames("__wab_instance", sty.tableRow__fuGcV)}
              description={
                "Define un dato de tipo lógico, cuyo resultado es verdadero o falso."
              }
              title={"BOOLEAN"}
            />

            <TableRow
              className={classNames("__wab_instance", sty.tableRow__hI6YR)}
              description={
                "Crea una variable constante de alcance global o local y no puede cambiarse posteriormente."
              }
              title={"CONST"}
            />

            <TableRow
              className={classNames("__wab_instance", sty.tableRow___89ZOv)}
              description={
                "Fuerza la salida de un bucle (sale completamente del mismo)."
              }
              title={"BREAK"}
            />

            <TableRow
              className={classNames("__wab_instance", sty.tableRow__xuo0I)}
              description={
                "Sale de la iteración actual y salta directamente a la siguiente."
              }
              title={"CONTINUE"}
            />

            <TableRow
              className={classNames("__wab_instance", sty.tableRow___84MF)}
              description={
                "Estructura que se utiliza para ejecutar un bloque de código un número determinado de veces."
              }
              title={"FOR"}
            />

            <TableRow
              className={classNames("__wab_instance", sty.tableRow__u8Ttb)}
              description={
                "Bucle que repite una acción siempre y cuando se cumpla una condición booleana de control."
              }
              title={"WHILE"}
            />

            <TableRow
              className={classNames("__wab_instance", sty.tableRow__x7VEu)}
              description={
                "Representa el valor verdadero de una expresión booleana."
              }
              title={"TRUE"}
            />

            <TableRow
              className={classNames("__wab_instance", sty.tableRow__emyaY)}
              description={
                "Representa el valor falso de una expresión booleana."
              }
              title={"FALSE"}
            />
          </p.Stack>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "text"],
  freeBox: ["freeBox", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLessonTable__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLessonTable__VariantsArgs;
    args?: PlasmicLessonTable__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLessonTable__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLessonTable__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLessonTable__ArgProps,
          internalVariantPropNames: PlasmicLessonTable__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLessonTable__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLessonTable";
  } else {
    func.displayName = `PlasmicLessonTable.${nodeName}`;
  }
  return func;
}

export const PlasmicLessonTable = Object.assign(
  // Top-level PlasmicLessonTable renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicLessonTable
    internalVariantProps: PlasmicLessonTable__VariantProps,
    internalArgProps: PlasmicLessonTable__ArgProps
  }
);

export default PlasmicLessonTable;
/* prettier-ignore-end */
