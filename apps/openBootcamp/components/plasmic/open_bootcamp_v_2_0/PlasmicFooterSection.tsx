// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qJhJbLN2Wy56BDK1v9VeHg
// Component: b5lOT72QRjzHLq
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Logo from "../../Logo"; // plasmic-import: ot9dOcHnM075j/component
import Button from "../../Button"; // plasmic-import: W52igaDMzA10w6/component

import { useScreenVariants as useScreenVariantsgfTNvlXeClRRx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GfTNvlXE_ClRRx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_bootcamp_v_2_0.module.css"; // plasmic-import: qJhJbLN2Wy56BDK1v9VeHg/projectcss
import sty from "./PlasmicFooterSection.module.css"; // plasmic-import: b5lOT72QRjzHLq/css

import LinkedInsvgIcon from "./icons/PlasmicIcon__LinkedInsvg"; // plasmic-import: uOq4ABuNhS/icon
import TwittersvgIcon from "./icons/PlasmicIcon__Twittersvg"; // plasmic-import: Ydk_hocEhI/icon
import InstagramsvgIcon from "./icons/PlasmicIcon__Instagramsvg"; // plasmic-import: IZbwU0kHup/icon
import FacebooksvgIcon from "./icons/PlasmicIcon__Facebooksvg"; // plasmic-import: 5g8a3BHjPH/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: MPKmKXARKW/icon

export type PlasmicFooterSection__VariantMembers = {};

export type PlasmicFooterSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooterSection__VariantsArgs;
export const PlasmicFooterSection__VariantProps = new Array<VariantPropType>();

export type PlasmicFooterSection__ArgsType = {};
type ArgPropType = keyof PlasmicFooterSection__ArgsType;
export const PlasmicFooterSection__ArgProps = new Array<ArgPropType>();

export type PlasmicFooterSection__OverridesType = {
  root?: p.Flex<"div">;
  logo?: p.Flex<typeof Logo>;
  _2021LandifyUiKitAllRightsReserved?: p.Flex<"div">;
};

export interface DefaultFooterSectionProps {
  className?: string;
}

function PlasmicFooterSection__RenderFunc(props: {
  variants: PlasmicFooterSection__VariantsArgs;
  args: PlasmicFooterSection__ArgsType;
  overrides: PlasmicFooterSection__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgfTNvlXeClRRx()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__sqh7D)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ef6HA)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ag1Wi)}
          >
            <Logo
              data-plasmic-name={"logo"}
              data-plasmic-override={overrides.logo}
              className={classNames("__wab_instance", sty.logo)}
              whiteLogo={true}
            />
          </p.Stack>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__yxv2U)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___76J9G
                )}
              >
                {"Redes Sociales"}
              </div>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__niOkV)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__l1J6O)}
                    link={
                      "https://www.linkedin.com/school/openbootcamp-escuela/" as const
                    }
                    showStartIcon={true}
                    size={
                      hasVariant(globalVariants, "screen", "_1200Px")
                        ? ("linkOnly" as const)
                        : ("linkOnly" as const)
                    }
                    startIcon={
                      <LinkedInsvgIcon
                        className={classNames(projectcss.all, sty.svg__qnp0Q)}
                        role={"img"}
                      />
                    }
                  >
                    {"LinkedIn"}
                  </Button>

                  <Button
                    className={classNames("__wab_instance", sty.button__vttqG)}
                    link={"https://twitter.com/Open_Bootcamp" as const}
                    showStartIcon={true}
                    size={"linkOnly" as const}
                    startIcon={
                      <TwittersvgIcon
                        className={classNames(projectcss.all, sty.svg___2IJun)}
                        role={"img"}
                      />
                    }
                  >
                    {"Twitter"}
                  </Button>

                  <Button
                    className={classNames("__wab_instance", sty.button__zQEiR)}
                    link={"https://www.instagram.com/openbootcamp_/" as const}
                    showStartIcon={true}
                    size={"linkOnly" as const}
                    startIcon={
                      <InstagramsvgIcon
                        className={classNames(projectcss.all, sty.svg__imCbt)}
                        role={"img"}
                      />
                    }
                  >
                    {"Instagram"}
                  </Button>

                  <Button
                    className={classNames("__wab_instance", sty.button__cYmlk)}
                    link={
                      "https://www.facebook.com/OpenBootcamp-228890059099006/" as const
                    }
                    showStartIcon={true}
                    size={"linkOnly" as const}
                    startIcon={
                      <FacebooksvgIcon
                        className={classNames(projectcss.all, sty.svg__wOcEp)}
                        role={"img"}
                      />
                    }
                  >
                    {"Facebook"}
                  </Button>
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mOb1F)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bqvDi
                )}
              >
                {"Políticas"}
              </div>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fYlJh)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button___3K7Ho)}
                    link={"/politica-cookies" as const}
                    size={"linkOnly" as const}
                  >
                    {"Política de cookies"}
                  </Button>

                  <Button
                    className={classNames("__wab_instance", sty.button__sbw5M)}
                    link={"/politica-privacidad" as const}
                    size={"linkOnly" as const}
                  >
                    {"Política de privacidad"}
                  </Button>

                  <Button
                    className={classNames("__wab_instance", sty.button___6UyT)}
                    link={"/terminos-condiciones" as const}
                    size={"linkOnly" as const}
                  >
                    {"Términos y condiciones"}
                  </Button>
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zCwUh)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1stQu
                )}
              >
                {"Explora"}
              </div>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ag0Qs)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__olHGf)}
                    link={"https://campus.open-bootcamp.com/" as const}
                    size={"linkOnly" as const}
                  >
                    {"Acceso a campus"}
                  </Button>
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
        </p.Stack>

        <div
          data-plasmic-name={"_2021LandifyUiKitAllRightsReserved"}
          data-plasmic-override={overrides._2021LandifyUiKitAllRightsReserved}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty._2021LandifyUiKitAllRightsReserved
          )}
        >
          {"© 2022 OpenBootcamp SL. Todos los derechos reservados."}
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "logo", "_2021LandifyUiKitAllRightsReserved"],
  logo: ["logo"],
  _2021LandifyUiKitAllRightsReserved: ["_2021LandifyUiKitAllRightsReserved"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  logo: typeof Logo;
  _2021LandifyUiKitAllRightsReserved: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooterSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooterSection__VariantsArgs;
    args?: PlasmicFooterSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooterSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooterSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooterSection__ArgProps,
      internalVariantPropNames: PlasmicFooterSection__VariantProps
    });

    return PlasmicFooterSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterSection";
  } else {
    func.displayName = `PlasmicFooterSection.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterSection = Object.assign(
  // Top-level PlasmicFooterSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    _2021LandifyUiKitAllRightsReserved: makeNodeComponent(
      "_2021LandifyUiKitAllRightsReserved"
    ),

    // Metadata about props expected for PlasmicFooterSection
    internalVariantProps: PlasmicFooterSection__VariantProps,
    internalArgProps: PlasmicFooterSection__ArgProps
  }
);

export default PlasmicFooterSection;
/* prettier-ignore-end */
