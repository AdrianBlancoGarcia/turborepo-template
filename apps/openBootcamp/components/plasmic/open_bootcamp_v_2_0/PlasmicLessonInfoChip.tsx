// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qJhJbLN2Wy56BDK1v9VeHg
// Component: l1jB988kix
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_bootcamp_v_2_0.module.css"; // plasmic-import: qJhJbLN2Wy56BDK1v9VeHg/projectcss
import sty from "./PlasmicLessonInfoChip.module.css"; // plasmic-import: l1jB988kix/css

export type PlasmicLessonInfoChip__VariantMembers = {
  tipos: "dificultad" | "duracion";
};

export type PlasmicLessonInfoChip__VariantsArgs = {
  tipos?: SingleChoiceArg<"dificultad" | "duracion">;
};

type VariantPropType = keyof PlasmicLessonInfoChip__VariantsArgs;
export const PlasmicLessonInfoChip__VariantProps = new Array<VariantPropType>(
  "tipos"
);

export type PlasmicLessonInfoChip__ArgsType = {
  dificultad?: React.ReactNode;
  duracion?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLessonInfoChip__ArgsType;
export const PlasmicLessonInfoChip__ArgProps = new Array<ArgPropType>(
  "dificultad",
  "duracion"
);

export type PlasmicLessonInfoChip__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultLessonInfoChipProps {
  dificultad?: React.ReactNode;
  duracion?: React.ReactNode;
  tipos?: SingleChoiceArg<"dificultad" | "duracion">;
  className?: string;
}

function PlasmicLessonInfoChip__RenderFunc(props: {
  variants: PlasmicLessonInfoChip__VariantsArgs;
  args: PlasmicLessonInfoChip__ArgsType;
  overrides: PlasmicLessonInfoChip__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.roottipos_duracion]: hasVariant(variants, "tipos", "duracion") }
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {(hasVariant(variants, "tipos", "duracion") ? false : true)
          ? p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yFm
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"Baja"}
                    </span>
                  </React.Fragment>
                </div>
              ),

              value: args.dificultad,
              className: classNames(sty.slotTargetDificultad, {
                [sty.slotTargetDificultadtipos_dificultad]: hasVariant(
                  variants,
                  "tipos",
                  "dificultad"
                ),
                [sty.slotTargetDificultadtipos_duracion]: hasVariant(
                  variants,
                  "tipos",
                  "duracion"
                )
              })
            })
          : null}
        {(hasVariant(variants, "tipos", "duracion") ? true : false)
          ? p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__k40Bd
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"14 min"}
                    </span>
                  </React.Fragment>
                </div>
              ),

              value: args.duracion,
              className: classNames(sty.slotTargetDuracion, {
                [sty.slotTargetDuraciontipos_dificultad]: hasVariant(
                  variants,
                  "tipos",
                  "dificultad"
                ),
                [sty.slotTargetDuraciontipos_duracion]: hasVariant(
                  variants,
                  "tipos",
                  "duracion"
                )
              })
            })
          : null}

        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.texttipos_duracion]: hasVariant(
                variants,
                "tipos",
                "duracion"
              )
            }
          )}
        >
          {hasVariant(variants, "tipos", "duracion")
            ? "de lectura"
            : "Dificultad"}
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "text"],
  freeBox: ["freeBox", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLessonInfoChip__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLessonInfoChip__VariantsArgs;
    args?: PlasmicLessonInfoChip__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLessonInfoChip__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLessonInfoChip__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLessonInfoChip__ArgProps,
          internalVariantPropNames: PlasmicLessonInfoChip__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLessonInfoChip__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLessonInfoChip";
  } else {
    func.displayName = `PlasmicLessonInfoChip.${nodeName}`;
  }
  return func;
}

export const PlasmicLessonInfoChip = Object.assign(
  // Top-level PlasmicLessonInfoChip renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicLessonInfoChip
    internalVariantProps: PlasmicLessonInfoChip__VariantProps,
    internalArgProps: PlasmicLessonInfoChip__ArgProps
  }
);

export default PlasmicLessonInfoChip;
/* prettier-ignore-end */
