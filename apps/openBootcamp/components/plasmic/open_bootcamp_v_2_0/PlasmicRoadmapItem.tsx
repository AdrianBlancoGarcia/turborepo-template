// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qJhJbLN2Wy56BDK1v9VeHg
// Component: BoQ7_6X7lS
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CourseItem from "../../CourseItem"; // plasmic-import: 0_B7hzne-3/component

import { useScreenVariants as useScreenVariantsgfTNvlXeClRRx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GfTNvlXE_ClRRx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_bootcamp_v_2_0.module.css"; // plasmic-import: qJhJbLN2Wy56BDK1v9VeHg/projectcss
import sty from "./PlasmicRoadmapItem.module.css"; // plasmic-import: BoQ7_6X7lS/css

import Ellipse66Icon from "./icons/PlasmicIcon__Ellipse66"; // plasmic-import: 9zoYrnWQq8/icon
import Icon24Icon from "./icons/PlasmicIcon__Icon24"; // plasmic-import: i9ODyMIYQy/icon

export type PlasmicRoadmapItem__VariantMembers = {
  otherside: "otherside";
};

export type PlasmicRoadmapItem__VariantsArgs = {
  otherside?: SingleBooleanChoiceArg<"otherside">;
};

type VariantPropType = keyof PlasmicRoadmapItem__VariantsArgs;
export const PlasmicRoadmapItem__VariantProps = new Array<VariantPropType>(
  "otherside"
);

export type PlasmicRoadmapItem__ArgsType = {
  line?: React.ReactNode;
  roadmapPoint?: React.ReactNode;
  courseIcon?: React.ReactNode;
  courseTitle?: React.ReactNode;
  courseDescription?: React.ReactNode;
  roadmapNumber?: React.ReactNode;
};

type ArgPropType = keyof PlasmicRoadmapItem__ArgsType;
export const PlasmicRoadmapItem__ArgProps = new Array<ArgPropType>(
  "line",
  "roadmapPoint",
  "courseIcon",
  "courseTitle",
  "courseDescription",
  "roadmapNumber"
);

export type PlasmicRoadmapItem__OverridesType = {
  root?: p.Flex<"div">;
  courseItem?: p.Flex<typeof CourseItem>;
};

export interface DefaultRoadmapItemProps {
  line?: React.ReactNode;
  roadmapPoint?: React.ReactNode;
  courseIcon?: React.ReactNode;
  courseTitle?: React.ReactNode;
  courseDescription?: React.ReactNode;
  roadmapNumber?: React.ReactNode;
  otherside?: SingleBooleanChoiceArg<"otherside">;
  className?: string;
}

function PlasmicRoadmapItem__RenderFunc(props: {
  variants: PlasmicRoadmapItem__VariantsArgs;
  args: PlasmicRoadmapItem__ArgsType;
  overrides: PlasmicRoadmapItem__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgfTNvlXeClRRx()
  });

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
          {
            [sty.roototherside]: hasVariant(variants, "otherside", "otherside")
          }
        )}
      >
        {(
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? true
            : hasVariant(globalVariants, "screen", "laptop")
            ? true
            : true
        ) ? (
          <div className={classNames(projectcss.all, sty.freeBox__ikfsO)} />
        ) : null}

        <div className={classNames(projectcss.all, sty.freeBox__mIb85)}>
          {true ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__mHuva, {
                [sty.freeBoxotherside__mHuvAcrAxp]: hasVariant(
                  variants,
                  "otherside",
                  "otherside"
                )
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__v4ZOy)}>
                {p.renderPlasmicSlot({
                  defaultContents: "1",
                  value: args.roadmapNumber,
                  className: classNames(sty.slotTargetRoadmapNumber)
                })}
              </div>
            </div>
          ) : null}
          {p.renderPlasmicSlot({
            defaultContents: true ? (
              <Ellipse66Icon
                className={classNames(projectcss.all, sty.svg__xb9W)}
                role={"img"}
              />
            ) : null,
            value: args.roadmapPoint
          })}
        </div>

        {true ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__nBeX0, {
              [sty.freeBoxotherside__nBeX0CrAxp]: hasVariant(
                variants,
                "otherside",
                "otherside"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__wsko)}>
              {p.renderPlasmicSlot({
                defaultContents: (
                  <Icon24Icon
                    className={classNames(projectcss.all, sty.svg___2CErx)}
                    role={"img"}
                  />
                ),

                value: args.line
              })}
            </div>

            <CourseItem
              data-plasmic-name={"courseItem"}
              data-plasmic-override={overrides.courseItem}
              className={classNames("__wab_instance", sty.courseItem)}
              slot={p.renderPlasmicSlot({
                defaultContents: "TÃ­tuloCurso",
                value: args.courseTitle
              })}
              slot2={p.renderPlasmicSlot({
                defaultContents: "DetallesCurso",
                value: args.courseDescription
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___7PMb)}
                    displayHeight={"60px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"60px" as const}
                    loader={"plasmic"}
                    loading={"lazy" as const}
                  />
                ),

                value: args.courseIcon
              })}
            </CourseItem>
          </div>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "courseItem"],
  courseItem: ["courseItem"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  courseItem: typeof CourseItem;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRoadmapItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRoadmapItem__VariantsArgs;
    args?: PlasmicRoadmapItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRoadmapItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRoadmapItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRoadmapItem__ArgProps,
          internalVariantPropNames: PlasmicRoadmapItem__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicRoadmapItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRoadmapItem";
  } else {
    func.displayName = `PlasmicRoadmapItem.${nodeName}`;
  }
  return func;
}

export const PlasmicRoadmapItem = Object.assign(
  // Top-level PlasmicRoadmapItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    courseItem: makeNodeComponent("courseItem"),

    // Metadata about props expected for PlasmicRoadmapItem
    internalVariantProps: PlasmicRoadmapItem__VariantProps,
    internalArgProps: PlasmicRoadmapItem__ArgProps
  }
);

export default PlasmicRoadmapItem;
/* prettier-ignore-end */
