// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qJhJbLN2Wy56BDK1v9VeHg
// Component: br33Q-v40l8
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TestimonialItem from "../../TestimonialItem"; // plasmic-import: ZOePmbDjbr/component
import Button from "../../Button"; // plasmic-import: W52igaDMzA10w6/component

import { useScreenVariants as useScreenVariantsgfTNvlXeClRRx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GfTNvlXE_ClRRx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_bootcamp_v_2_0.module.css"; // plasmic-import: qJhJbLN2Wy56BDK1v9VeHg/projectcss
import sty from "./PlasmicTestimonialsLinkedin.module.css"; // plasmic-import: br33Q-v40l8/css

import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: vVZm8N2wdn/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: MPKmKXARKW/icon

export type PlasmicTestimonialsLinkedin__VariantMembers = {};

export type PlasmicTestimonialsLinkedin__VariantsArgs = {};
type VariantPropType = keyof PlasmicTestimonialsLinkedin__VariantsArgs;
export const PlasmicTestimonialsLinkedin__VariantProps =
  new Array<VariantPropType>();

export type PlasmicTestimonialsLinkedin__ArgsType = {
  testimonialsBox?: React.ReactNode;
  button5?: React.ReactNode;
};

type ArgPropType = keyof PlasmicTestimonialsLinkedin__ArgsType;
export const PlasmicTestimonialsLinkedin__ArgProps = new Array<ArgPropType>(
  "testimonialsBox",
  "button5"
);

export type PlasmicTestimonialsLinkedin__OverridesType = {
  root?: p.Flex<"div">;
  sectionHeading7?: p.Flex<"div">;
  sectionTitle7?: p.Flex<"h4">;
  description14?: p.Flex<"p">;
};

export interface DefaultTestimonialsLinkedinProps {
  testimonialsBox?: React.ReactNode;
  button5?: React.ReactNode;
  className?: string;
}

function PlasmicTestimonialsLinkedin__RenderFunc(props: {
  variants: PlasmicTestimonialsLinkedin__VariantsArgs;
  args: PlasmicTestimonialsLinkedin__ArgsType;
  overrides: PlasmicTestimonialsLinkedin__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgfTNvlXeClRRx()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      id={"testimonioslinkedin" as const}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___7GqU8)}
      >
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__xpcCc)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"sectionHeading7"}
              data-plasmic-override={overrides.sectionHeading7}
              hasGap={true}
              className={classNames(projectcss.all, sty.sectionHeading7)}
            >
              <h4
                data-plasmic-name={"sectionTitle7"}
                data-plasmic-override={overrides.sectionTitle7}
                className={classNames(
                  projectcss.all,
                  projectcss.h4,
                  projectcss.__wab_text,
                  sty.sectionTitle7
                )}
              >
                {"¿Por qué elegir OpenBootcamp?"}
              </h4>

              <p
                data-plasmic-name={"description14"}
                data-plasmic-override={overrides.description14}
                className={classNames(
                  projectcss.all,
                  projectcss.p,
                  projectcss.__wab_text,
                  sty.description14
                )}
              >
                {
                  "Nuestros alumnos os cuentan la experiencia que han tenido desde que comenzaron la formación en nuestro campus hasta la introducción en nuestra bolsa de empleo y obtención de vacantes de trabajo que les hemos facilitado."
                }
              </p>
            </p.Stack>
          </p.Stack>
        ) : null}

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__kKr0A)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <TestimonialItem
                  className={classNames(
                    "__wab_instance",
                    sty.testimonialItem__jnWkr
                  )}
                  description={
                    <p
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p__zg0Xt
                      )}
                    >
                      {
                        '"Gracias a OpenBootcamp en 4 meses pude actualizarme y conocer nuevas tecnologías con las que conseguí un trabajo como FullStack en el que estoy muy contenta".'
                      }
                    </p>
                  }
                  linkedin={
                    true ? (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__aOJif
                        )}
                        link={
                          "https://www.linkedin.com/in/mar%C3%ADa-beatriz-vivanco-marrero-a8b30421b/" as const
                        }
                        socialIcons={"linkedin" as const}
                      />
                    ) : null
                  }
                  title={"María Beatriz Vivanco"}
                  userImage={
                    <p.PlasmicImg
                      alt={"Beatriz Vivanco" as const}
                      className={classNames(sty.img__uy8GW)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loader={"plasmic"}
                      loading={"lazy" as const}
                      src={{
                        src: "https://img.plasmic.app/img-optimizer/v1/img/e9b32061c4bb1e216c6ffc5ce88fa928.png",
                        fullWidth: 50,
                        fullHeight: 50
                      }}
                    />
                  }
                />

                <TestimonialItem
                  className={classNames(
                    "__wab_instance",
                    sty.testimonialItem__eikTq
                  )}
                  description={
                    <p
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p__j2Rla
                      )}
                    >
                      {
                        '"Vengo de la rama del diseño gráfico y he estado estudiando en OpenBootcamp 2-3 meses y gracias a esta formación, estoy trabajando de desarrolladora web en una empresa".'
                      }
                    </p>
                  }
                  linkedin={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___2C562
                      )}
                      link={
                        "https://www.linkedin.com/in/anafernandezvaldes/" as const
                      }
                      socialIcons={"linkedin" as const}
                    />
                  }
                  title={"Ana Fernández"}
                  userImage={
                    <p.PlasmicImg
                      alt={"Ana Fernández" as const}
                      className={classNames(sty.img__bllw2)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loader={"plasmic"}
                      loading={"lazy" as const}
                      src={{
                        src: "https://img.plasmic.app/img-optimizer/v1/img/35ec1f1c468cd69559a35e7d7322324b.png",
                        fullWidth: 75,
                        fullHeight: 75
                      }}
                    />
                  }
                  videoSlot={
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__gjs3M)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__pzSfd
                        )}
                      >
                        <Icon9Icon
                          className={classNames(projectcss.all, sty.svg__vJr7I)}
                          role={"img"}
                        />
                      </p.Stack>
                    </p.Stack>
                  }
                />

                <TestimonialItem
                  className={classNames(
                    "__wab_instance",
                    sty.testimonialItem__bCe0D
                  )}
                  description={
                    <p
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.p__gzZqp
                      )}
                    >
                      {
                        '"Entré a principios de Octubre cuando empezó OB y el 10 de Enero ya estaba firmando el contrato como programador".'
                      }
                    </p>
                  }
                  linkedin={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___1ZgEd
                      )}
                      link={"https://www.linkedin.com/in/ibatz/" as const}
                      socialIcons={"linkedin" as const}
                    />
                  }
                  title={"Ignacio de Bats"}
                  userImage={
                    <p.PlasmicImg
                      alt={"Ignacio Bats" as const}
                      className={classNames(sty.img__qpn4N)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loader={"plasmic"}
                      loading={"lazy" as const}
                      src={{
                        src: "https://img.plasmic.app/img-optimizer/v1/img/1c15226b4fe0cf3b7e26794fd30cffd3.png",
                        fullWidth: 50,
                        fullHeight: 50
                      }}
                    />
                  }
                  videoSlot={
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___8Ef3L
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6FGVw
                        )}
                      >
                        <Icon9Icon
                          className={classNames(projectcss.all, sty.svg___4FW)}
                          role={"img"}
                        />
                      </p.Stack>
                    </p.Stack>
                  }
                />
              </React.Fragment>
            ),
            value: args.testimonialsBox
          })}
        </p.Stack>

        <div className={classNames(projectcss.all, sty.freeBox__wRegR)}>
          {p.renderPlasmicSlot({
            defaultContents: (
              <Button
                className={classNames("__wab_instance", sty.button__auYlj)}
                color={"blue" as const}
                endIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg__ikzui)}
                    role={"img"}
                  />
                }
                link={"https://campus.open-bootcamp.com/register" as const}
                startIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg__oFbmu)}
                    role={"img"}
                  />
                }
              >
                {"Empieza ya"}
              </Button>
            ),

            value: args.button5
          })}
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "sectionHeading7", "sectionTitle7", "description14"],
  sectionHeading7: ["sectionHeading7", "sectionTitle7", "description14"],
  sectionTitle7: ["sectionTitle7"],
  description14: ["description14"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sectionHeading7: "div";
  sectionTitle7: "h4";
  description14: "p";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTestimonialsLinkedin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTestimonialsLinkedin__VariantsArgs;
    args?: PlasmicTestimonialsLinkedin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTestimonialsLinkedin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTestimonialsLinkedin__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTestimonialsLinkedin__ArgProps,
          internalVariantPropNames: PlasmicTestimonialsLinkedin__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicTestimonialsLinkedin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestimonialsLinkedin";
  } else {
    func.displayName = `PlasmicTestimonialsLinkedin.${nodeName}`;
  }
  return func;
}

export const PlasmicTestimonialsLinkedin = Object.assign(
  // Top-level PlasmicTestimonialsLinkedin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionHeading7: makeNodeComponent("sectionHeading7"),
    sectionTitle7: makeNodeComponent("sectionTitle7"),
    description14: makeNodeComponent("description14"),

    // Metadata about props expected for PlasmicTestimonialsLinkedin
    internalVariantProps: PlasmicTestimonialsLinkedin__VariantProps,
    internalArgProps: PlasmicTestimonialsLinkedin__ArgProps
  }
);

export default PlasmicTestimonialsLinkedin;
/* prettier-ignore-end */
