// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qJhJbLN2Wy56BDK1v9VeHg
// Component: Bep5CT3W1T
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Logo from "../../Logo"; // plasmic-import: ot9dOcHnM075j/component
import Button from "../../Button"; // plasmic-import: W52igaDMzA10w6/component

import { useScreenVariants as useScreenVariantsgfTNvlXeClRRx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GfTNvlXE_ClRRx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_bootcamp_v_2_0.module.css"; // plasmic-import: qJhJbLN2Wy56BDK1v9VeHg/projectcss
import sty from "./PlasmicDrawer.module.css"; // plasmic-import: Bep5CT3W1T/css

export type PlasmicDrawer__VariantMembers = {};

export type PlasmicDrawer__VariantsArgs = {};
type VariantPropType = keyof PlasmicDrawer__VariantsArgs;
export const PlasmicDrawer__VariantProps = new Array<VariantPropType>();

export type PlasmicDrawer__ArgsType = {
  links?: React.ReactNode;
  buttons?: React.ReactNode;
  drawerButton?: React.ReactNode;
};

type ArgPropType = keyof PlasmicDrawer__ArgsType;
export const PlasmicDrawer__ArgProps = new Array<ArgPropType>(
  "links",
  "buttons",
  "drawerButton"
);

export type PlasmicDrawer__OverridesType = {
  root?: p.Flex<"div">;
  leftNavbar?: p.Flex<"div">;
  logo?: p.Flex<typeof Logo>;
};

export interface DefaultDrawerProps {
  links?: React.ReactNode;
  buttons?: React.ReactNode;
  drawerButton?: React.ReactNode;
  className?: string;
}

function PlasmicDrawer__RenderFunc(props: {
  variants: PlasmicDrawer__VariantsArgs;
  args: PlasmicDrawer__ArgsType;
  overrides: PlasmicDrawer__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgfTNvlXeClRRx()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__evTvs)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"leftNavbar"}
          data-plasmic-override={overrides.leftNavbar}
          hasGap={true}
          className={classNames(projectcss.all, sty.leftNavbar)}
        >
          <Logo
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            className={classNames("__wab_instance", sty.logo)}
          />
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__dzwCd)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <Button
                className={classNames("__wab_instance", sty.button__qk3Jf)}
                drawer={"close" as const}
                endIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg__sDm0X)}
                    role={"img"}
                  />
                }
                link={"https://campus.open-bootcamp.com/register" as const}
                startIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg__tBBwt)}
                    role={"img"}
                  />
                }
              >
                {"Button"}
              </Button>
            ),

            value: args.drawerButton
          })}
        </p.Stack>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__fd9O)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___5Qh6Y)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__t2Q7G
                  )}
                >
                  {"Consigue trabajo"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__guFbl
                  )}
                >
                  {"Opiniones"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oeMtI
                  )}
                >
                  {"Especializaciones"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ww5Y
                  )}
                >
                  {"Contrata Desarrolladores"}
                </div>
              </React.Fragment>
            ),
            value: args.links
          })}
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___88X1E)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <Button
                  className={classNames("__wab_instance", sty.button__m35PF)}
                  color={"blue" as const}
                  endIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__rzJqz)}
                      role={"img"}
                    />
                  }
                  link={"" as const}
                  size={"small" as const}
                  startIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__nv0EQ)}
                      role={"img"}
                    />
                  }
                >
                  {"Ir al Campus"}
                </Button>

                <Button
                  className={classNames("__wab_instance", sty.button__h22Ij)}
                  color={"accentBlue" as const}
                  endIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg___0GmPy)}
                      role={"img"}
                    />
                  }
                  link={"" as const}
                  size={"small" as const}
                  startIcon={
                    <svg
                      className={classNames(projectcss.all, sty.svg__qhVku)}
                      role={"img"}
                    />
                  }
                >
                  {"Empieza ya"}
                </Button>
              </React.Fragment>
            ),
            value: args.buttons
          })}
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "leftNavbar", "logo"],
  leftNavbar: ["leftNavbar", "logo"],
  logo: ["logo"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  leftNavbar: "div";
  logo: typeof Logo;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDrawer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDrawer__VariantsArgs;
    args?: PlasmicDrawer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDrawer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDrawer__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDrawer__ArgProps,
          internalVariantPropNames: PlasmicDrawer__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicDrawer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDrawer";
  } else {
    func.displayName = `PlasmicDrawer.${nodeName}`;
  }
  return func;
}

export const PlasmicDrawer = Object.assign(
  // Top-level PlasmicDrawer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    leftNavbar: makeNodeComponent("leftNavbar"),
    logo: makeNodeComponent("logo"),

    // Metadata about props expected for PlasmicDrawer
    internalVariantProps: PlasmicDrawer__VariantProps,
    internalArgProps: PlasmicDrawer__ArgProps
  }
);

export default PlasmicDrawer;
/* prettier-ignore-end */
