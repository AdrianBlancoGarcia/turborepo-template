// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qJhJbLN2Wy56BDK1v9VeHg
// Component: N8qcIo-HKDa
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: -CnkElqEbFOKi/component
import Button from "../../Button"; // plasmic-import: W52igaDMzA10w6/component
import Footer from "../../Footer"; // plasmic-import: b5lOT72QRjzHLq/component

import { useScreenVariants as useScreenVariantsgfTNvlXeClRRx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GfTNvlXE_ClRRx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_bootcamp_v_2_0.module.css"; // plasmic-import: qJhJbLN2Wy56BDK1v9VeHg/projectcss
import sty from "./PlasmicLandingCap.module.css"; // plasmic-import: N8qcIo-HKDa/css

import Line29Icon from "./icons/PlasmicIcon__Line29"; // plasmic-import: 9t32WTzkF9/icon
import Face52Icon from "./icons/PlasmicIcon__Face52"; // plasmic-import: S3dbXXT2_d/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: MPKmKXARKW/icon

export type PlasmicLandingCap__VariantMembers = {};

export type PlasmicLandingCap__VariantsArgs = {};
type VariantPropType = keyof PlasmicLandingCap__VariantsArgs;
export const PlasmicLandingCap__VariantProps = new Array<VariantPropType>();

export type PlasmicLandingCap__ArgsType = {
  heroButton?: React.ReactNode;
  navbar?: React.ReactNode;
  ctaLead?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLandingCap__ArgsType;
export const PlasmicLandingCap__ArgProps = new Array<ArgPropType>(
  "heroButton",
  "navbar",
  "ctaLead"
);

export type PlasmicLandingCap__OverridesType = {
  root?: p.Flex<"div">;
  hero?: p.Flex<"div">;
  header?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  trainers?: p.Flex<"div">;
  container8?: p.Flex<"div">;
  sectionHeading5?: p.Flex<"div">;
  sectionTitle5?: p.Flex<"div">;
  description5?: p.Flex<"div">;
  profile4?: p.Flex<"div">;
  testimonials?: p.Flex<"div">;
  sectionHeading7?: p.Flex<"div">;
  sectionTitle7?: p.Flex<"div">;
  description14?: p.Flex<"p">;
  sectionHeading?: p.Flex<"div">;
  sectionHeading2?: p.Flex<"div">;
  sectionHeading3?: p.Flex<"div">;
  cities?: p.Flex<"div">;
  sectionHeading9?: p.Flex<"div">;
  sectionTitle9?: p.Flex<"div">;
  description16?: p.Flex<"p">;
  contact?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultLandingCapProps {}

function PlasmicLandingCap__RenderFunc(props: {
  variants: PlasmicLandingCap__VariantsArgs;
  args: PlasmicLandingCap__ArgsType;
  overrides: PlasmicLandingCap__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgfTNvlXeClRRx()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">
          {"¿Tienes el Máster en profesorado o CAP? ¡ENTRA AQUÍ!"}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={"¿Tienes el Máster en profesorado o CAP? ¡ENTRA AQUÍ!"}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={"¿Tienes el Máster en profesorado o CAP? ¡ENTRA AQUÍ!"}
        />
        <meta
          key="description"
          name="description"
          content={
            "Buscamos 40 docentes para trabajar como profesor de Programación. FORMACIÓN + EMPLEO ¡GRATIS!"
          }
        />
        <meta
          key="og:description"
          property="og:description"
          content={
            "Buscamos 40 docentes para trabajar como profesor de Programación. FORMACIÓN + EMPLEO ¡GRATIS!"
          }
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={
            "Buscamos 40 docentes para trabajar como profesor de Programación. FORMACIÓN + EMPLEO ¡GRATIS!"
          }
        />
        <meta
          key="og:image"
          property="og:image"
          content={
            "https://site-assets.plasmic.app/d28fdc04cf8185ac3fcbef9062d12a33.png"
          }
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={
            "https://site-assets.plasmic.app/d28fdc04cf8185ac3fcbef9062d12a33.png"
          }
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__f4800)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <Navbar
                  className={classNames("__wab_instance", sty.navbar__rRfz8)}
                  links={
                    <React.Fragment>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__h2JaI
                        )}
                        color={"navLink" as const}
                        endIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg___6FwU6
                            )}
                            role={"img"}
                          />
                        }
                        link={
                          "https://imagina-formacion.typeform.com/openmarketers" as const
                        }
                        size={"small" as const}
                        startIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__tFLyd
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"Elige tu camino"}
                      </Button>

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__vsqRb
                        )}
                        color={"navLink" as const}
                        endIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__jvUPm
                            )}
                            role={"img"}
                          />
                        }
                        link={
                          "https://imagina-formacion.typeform.com/openmarketers" as const
                        }
                        size={"small" as const}
                        startIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__axtb9
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"Vacantes"}
                      </Button>

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__gFAsH
                        )}
                        color={"navLink" as const}
                        endIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__tKRga
                            )}
                            role={"img"}
                          />
                        }
                        link={
                          "https://imagina-formacion.typeform.com/openmarketers" as const
                        }
                        size={"small" as const}
                        startIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__xVfAb
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"¿Dónde estamos?"}
                      </Button>
                    </React.Fragment>
                  }
                  loginButton={
                    true ? (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__wFvIh
                        )}
                        color={"white" as const}
                        endIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg___1VkY6
                            )}
                            role={"img"}
                          />
                        }
                        link={"https://campus.open-bootcamp.com/login" as const}
                        size={"small" as const}
                        startIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__tspAa
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"Ir al Campus"}
                      </Button>
                    ) : null
                  }
                  navButton={
                    <Button
                      className={classNames("__wab_instance", sty.button__fbgL)}
                      color={"darkGray" as const}
                      endIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__iRnRr)}
                          role={"img"}
                        />
                      }
                      link={"/profesor-informatica" as const}
                      size={"small" as const}
                      startIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__eNoU)}
                          role={"img"}
                        />
                      }
                    >
                      {"Solicita información"}
                    </Button>
                  }
                  page={"cap" as const}
                />
              ),

              value: args.navbar
            })}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            hasGap={true}
            className={classNames(projectcss.all, sty.hero)}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ilEms)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__f7X7E)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"header"}
                    data-plasmic-override={overrides.header}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.header)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kvhjL)}
                    >
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "¿Quieres ser profesor/a de informática?"
                          : hasVariant(globalVariants, "screen", "laptop")
                          ? "¿Quieres ser profesor/a de informática?"
                          : hasVariant(globalVariants, "screen", "laptopM")
                          ? "¿Quieres ser profesor/a de informática?"
                          : hasVariant(globalVariants, "screen", "laptopL")
                          ? "¿Quieres ser profesor/a \nde informática?"
                          : "¿Quieres ser profesor/a \nde informática?"}
                      </h1>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kbO76
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "laptopM")
                            ? true
                            : true
                        ) ? (
                          <Line29Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__lkZx
                            )}
                            role={"img"}
                          />
                        ) : null}

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pv09M
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            <React.Fragment>
                              <React.Fragment>{"¿Tienes el "}</React.Fragment>
                              {
                                <span
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.span,
                                    projectcss.__wab_text,
                                    projectcss.plasmic_default__inline,
                                    sty.span__u5Dkf
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "Máster en profesorado o CAP?"
                                    : "Máster de profesorado o CAP?"}
                                </span>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              <React.Fragment>{"¿Tienes el "}</React.Fragment>
                              {
                                <span
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.span,
                                    projectcss.__wab_text,
                                    projectcss.plasmic_default__inline,
                                    sty.span__vq2Mc
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "laptop"
                                  )
                                    ? "Máster en profesorado o CAP?"
                                    : "Máster en profesorado o CAP?"}
                                </span>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          )}
                        </div>
                      </p.Stack>
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__k4Kte
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Tenemos varias vacantes disponibles, "}
                          </span>
                          <React.Fragment>
                            {"puedes estar trabajando en septiembre."}
                          </React.Fragment>
                        </React.Fragment>
                      ) : hasVariant(globalVariants, "screen", "laptop") ? (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Tenemos varias vacantes disponibles,  "}
                          </span>
                          <React.Fragment>
                            {"\npuedes estar trabajando en septiembre."}
                          </React.Fragment>
                        </React.Fragment>
                      ) : hasVariant(globalVariants, "screen", "laptopM") ? (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Tenemos varias vacantes disponibles, "}
                          </span>
                          <React.Fragment>
                            {"puedes estar trabajando\n en septiembre."}
                          </React.Fragment>
                        </React.Fragment>
                      ) : hasVariant(globalVariants, "screen", "laptopL") ? (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Tenemos varias vacantes disponibles, "}
                          </span>
                          <React.Fragment>
                            {"puedes estar \ntrabajando en septiembre."}
                          </React.Fragment>
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Tenemos varias vacantes disponibles, "}
                          </span>
                          <React.Fragment>
                            {"puedes estar \ntrabajando en septiembre."}
                          </React.Fragment>
                        </React.Fragment>
                      )}
                    </div>
                  </p.Stack>

                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__nQ5U
                        )}
                        color={"darkGray" as const}
                        endIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__plbqu
                            )}
                            role={"img"}
                          />
                        }
                        link={"/profesor-informatica" as const}
                        round={true}
                        size={"normal" as const}
                        startIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__vp4Jm
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"Solicita información"}
                      </Button>
                    ),

                    value: args.heroButton
                  })}
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  alt={"Desarrollador probando App" as const}
                  className={classNames(projectcss.all, sty.freeBox__uqNhM)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__uOAsE)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("auto" as const)
                          : hasVariant(globalVariants, "screen", "laptop")
                          ? ("100%" as const)
                          : hasVariant(globalVariants, "screen", "laptopL")
                          ? ("100%" as const)
                          : ("580px" as const)
                      }
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("100%" as const)
                          : ("auto" as const)
                      }
                      loader={"plasmic"}
                      loading={"lazy" as const}
                      src={{
                        src: "https://img.plasmic.app/img-optimizer/v1/img/c5751ca4840ad4a4ffc6de9e9e1c6152.png",
                        fullWidth: 890,
                        fullHeight: 774
                      }}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>
            ) : null}
          </p.Stack>

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__iEhm2)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sqc5T)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__n0Jg2)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1Ty5I)}
                  >
                    <Face52Icon
                      className={classNames(projectcss.all, sty.svg__ivh5G)}
                      role={"img"}
                    />
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0HU10
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <React.Fragment>
                          {"Vacantes disponibles para un centro de FP"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {" líder en el sector"}
                        </span>
                      </React.Fragment>
                    ) : hasVariant(globalVariants, "screen", "laptop") ? (
                      <React.Fragment>
                        <React.Fragment>
                          {"Vacantes disponibles para un centro de FP"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {" líder en el sector"}
                        </span>
                      </React.Fragment>
                    ) : hasVariant(globalVariants, "screen", "laptopL") ? (
                      <React.Fragment>
                        <React.Fragment>
                          {"Vacantes disponibles para un centro de FP"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {" líder en el sector"}
                        </span>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <React.Fragment>
                          {"Vacantes disponibles para un centro de FP"}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {" líder en el sector"}
                        </span>
                      </React.Fragment>
                    )}
                  </div>
                </p.Stack>
              </p.Stack>
            </div>
          ) : null}

          <p.Stack
            as={"div"}
            data-plasmic-name={"trainers"}
            data-plasmic-override={overrides.trainers}
            hasGap={true}
            className={classNames(projectcss.all, sty.trainers)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wzL6W)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"container8"}
                data-plasmic-override={overrides.container8}
                hasGap={true}
                className={classNames(projectcss.all, sty.container8)}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__yltfH)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"sectionHeading5"}
                      data-plasmic-override={overrides.sectionHeading5}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.sectionHeading5
                      )}
                    >
                      <div
                        data-plasmic-name={"sectionTitle5"}
                        data-plasmic-override={overrides.sectionTitle5}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.sectionTitle5
                        )}
                      >
                        {"Te preparamos para el reto"}
                      </div>

                      <div
                        data-plasmic-name={"description5"}
                        data-plasmic-override={overrides.description5}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.description5
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Durante julio y agosto realizaremos un intensivo (de forma gratuita) para prepararte a fondo."
                          : hasVariant(globalVariants, "screen", "laptop")
                          ? "Durante julio y agosto realizaremos un intensivo \n(de forma gratuita) para prepararte a fondo."
                          : hasVariant(globalVariants, "screen", "laptopM")
                          ? "Durante julio y agosto realizaremos un intensivo (de forma gratuita) \npara prepararte a fondo."
                          : hasVariant(globalVariants, "screen", "laptopL")
                          ? "Durante julio y agosto realizaremos un intensivo (de forma gratuita) para prepararte a fondo."
                          : "Durante julio y agosto realizaremos un intensivo (de forma gratuita) para prepararte a fondo."}
                      </div>
                    </p.Stack>
                  </p.Stack>
                ) : null}

                <div
                  className={classNames(projectcss.all, sty.freeBox___3AQ6H)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__shlaM)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nwknI)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__uf3LY)}
                        displayHeight={"19px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"23px" as const}
                        loader={"plasmic"}
                        loading={"lazy" as const}
                        src={{
                          src: "https://site-assets.plasmic.app/cb28c1fa9b00516eac68b085bb4fba82.svg",
                          fullWidth: 23,
                          fullHeight: 19,
                          aspectRatio: 1.210526
                        }}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__aw6Ev)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tFyS
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "laptop") ? (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"¿Tienes experiencia dando clase?"}
                            </span>
                          </React.Fragment>
                        ) : hasVariant(globalVariants, "screen", "laptopM") ? (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"¿Tienes experiencia dando clase?"}
                            </span>
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"¿Tienes experiencia dando clase?"}
                            </span>
                          </React.Fragment>
                        )}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__p1Va0
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "laptop")
                          ? "Te enseñamos a desarrollar"
                          : hasVariant(globalVariants, "screen", "laptopM")
                          ? "Te enseñamos a desarrollar"
                          : "Te enseñamos a desarrollar"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__n8A7A)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9Nja5
                      )}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__fFz5C)}
                        displayHeight={"18px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"22px" as const}
                        loader={"plasmic"}
                        loading={"lazy" as const}
                        src={{
                          src: "https://site-assets.plasmic.app/f90e9ec2b1385a9a24dd3d8eaadac2ce.svg",
                          fullWidth: 22,
                          fullHeight: 18,
                          aspectRatio: 1.222222
                        }}
                      />
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__f1A3N)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2PXNf
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "laptop") ? (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"¿Tienes experiencia en desarrollo?"}
                            </span>
                          </React.Fragment>
                        ) : hasVariant(globalVariants, "screen", "laptopM") ? (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"¿Tienes experiencia en desarrollo?"}
                            </span>
                          </React.Fragment>
                        ) : hasVariant(globalVariants, "screen", "laptopL") ? (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"¿Tienes experiencia en desarrollo?"}
                            </span>
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"¿Tienes experiencia en desarrollo?"}
                            </span>
                          </React.Fragment>
                        )}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__u0EYp
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "laptop")
                          ? "Te enseñamos a dar clase"
                          : hasVariant(globalVariants, "screen", "laptopM")
                          ? "Te enseñamos a dar clase"
                          : "Te enseñamos a dar clase"}
                      </div>
                    </p.Stack>
                  </p.Stack>
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"profile4"}
                data-plasmic-override={overrides.profile4}
                hasGap={true}
                className={classNames(projectcss.all, sty.profile4)}
              >
                <p.PlasmicImg
                  alt={"Profesores de la Plataforma" as const}
                  className={classNames(sty.img__nHz00)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("auto" as const)
                      : hasVariant(globalVariants, "screen", "laptopM")
                      ? ("auto" as const)
                      : ("100%" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? ("70vw" as const)
                      : hasVariant(globalVariants, "screen", "laptopM")
                      ? ("47vw" as const)
                      : hasVariant(globalVariants, "screen", "laptopL")
                      ? ("100%" as const)
                      : ("541px" as const)
                  }
                  loader={"plasmic"}
                  src={{
                    src: "https://img.plasmic.app/img-optimizer/v1/img/f6540c386d2144666ab6fa386afa0ea9.png",
                    fullWidth: 541,
                    fullHeight: 581
                  }}
                />
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"testimonials"}
            data-plasmic-override={overrides.testimonials}
            hasGap={true}
            className={classNames(projectcss.all, sty.testimonials)}
            id={"sobre-oferta" as const}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__sOiI)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rs1VC)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"sectionHeading7"}
                    data-plasmic-override={overrides.sectionHeading7}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.sectionHeading7)}
                  >
                    <div
                      data-plasmic-name={"sectionTitle7"}
                      data-plasmic-override={overrides.sectionTitle7}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.sectionTitle7
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Si te gusta el mundo de la educación, estás en el lugar correcto"
                        : hasVariant(globalVariants, "screen", "laptop")
                        ? "Si te gusta el mundo de la educación, \nestás en el lugar correcto"
                        : hasVariant(globalVariants, "screen", "laptopM")
                        ? "Si te gusta el mundo de la educación, \nestás en el lugar correcto"
                        : hasVariant(globalVariants, "screen", "laptopL")
                        ? "Si te gusta el mundo de la educación, \nestás en el lugar correcto"
                        : "Si te gusta el mundo de la educación, \nestás en el lugar correcto"}
                    </div>

                    <p
                      data-plasmic-name={"description14"}
                      data-plasmic-override={overrides.description14}
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.description14
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "OpenBootcamp te abre las puertas del mercado laboral para que puedas convertirte en el profesor que siempre \nhas soñado."
                        : hasVariant(globalVariants, "screen", "laptop")
                        ? "OpenBootcamp te abre las puertas del mercado laboral\n para que puedas convertirte en el profesor que \nsiempre has soñado."
                        : hasVariant(globalVariants, "screen", "laptopM")
                        ? "OpenBootcamp te abre las puertas del mercado laboral para que puedas \nconvertirte en el profesor que siempre has soñado."
                        : "OpenBoocamp te abre las puertas del mercado laboral para que puedas convertirte en\n el profesor que siempre has soñado."}
                    </p>
                  </p.Stack>
                </p.Stack>
              ) : null}
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox___3JGC)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__p4C2)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fgDtf
                      )}
                    >
                      {"Detalles de la oferta"}
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__lxjUm)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__gZAgr)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___948Rm
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__hLbDk)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("20px" as const)
                              : ("24px" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("20px" as const)
                              : ("24px" as const)
                          }
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://site-assets.plasmic.app/ec397b2b83dad4e51463e89173fea296.svg",
                            fullWidth: 24,
                            fullHeight: 24,
                            aspectRatio: 1
                          }}
                        />
                      </div>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"sectionHeading"}
                        data-plasmic-override={overrides.sectionHeading}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.sectionHeading
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qbUfe
                          )}
                        >
                          {"Salario Competitivo"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mcZwn
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "El Rango salarial medio de las ofertas oscila entre 25.000 y 30.000€."
                            : hasVariant(globalVariants, "screen", "laptop")
                            ? "El Rango salarial medio de las ofertas\noscila entre 25.000 y 30.000€."
                            : hasVariant(globalVariants, "screen", "laptopM")
                            ? "El Rango salarial medio de las ofertas\noscila entre 25.000 y 30.000€."
                            : hasVariant(globalVariants, "screen", "laptopL")
                            ? "El Rango salarial medio de las ofertas\noscila entre 25.000 y 30.000€."
                            : "El Rango salarial medio de las ofertas\noscila entre 25.000 y 30.000€"}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__e5IcR)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___6Hunx
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__hNhUw)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("20px" as const)
                              : ("27px" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("20px" as const)
                              : ("27px" as const)
                          }
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://site-assets.plasmic.app/b2e84fdb4e1b8ba361d28ba4cd07a3bd.svg",
                            fullWidth: 27,
                            fullHeight: 27,
                            aspectRatio: 1
                          }}
                        />
                      </div>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"sectionHeading2"}
                        data-plasmic-override={overrides.sectionHeading2}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.sectionHeading2
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rxcdu
                          )}
                        >
                          {"Jornada flexible"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dmtza
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Aproximadamente 24 horas lectivas semanales, vacaciones en épocas no lectivas."
                            : hasVariant(globalVariants, "screen", "laptop")
                            ? "Aproximadamente 24 horas lectivas \nsemanales, vacaciones en épocas no \nlectivas."
                            : hasVariant(globalVariants, "screen", "laptopM")
                            ? "Aproximadamente 24 horas lectivas semanales, vacaciones en épocas no lectivas."
                            : hasVariant(globalVariants, "screen", "laptopL")
                            ? "Aproximadamente 24 horas lectivas semanales, vacaciones en épocas no lectivas."
                            : "Aproximadamente 24 horas lectivas semanales, vacaciones en épocas no lectivas."}
                        </div>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__potLv)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__txOHo
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__aEjYb)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("20px" as const)
                              : ("30px" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("20px" as const)
                              : ("30px" as const)
                          }
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://site-assets.plasmic.app/65a80f3a9322c68368180047db907cb0.svg",
                            fullWidth: 21,
                            fullHeight: 21,
                            aspectRatio: 1
                          }}
                        />
                      </div>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"sectionHeading3"}
                        data-plasmic-override={overrides.sectionHeading3}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.sectionHeading3
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yLsSc
                          )}
                        >
                          {"Alumnos motivados"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__t4Zlj
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Formarás a alumnos de FP."
                            : hasVariant(globalVariants, "screen", "laptop")
                            ? "Formarás a alumnos de FP."
                            : hasVariant(globalVariants, "screen", "laptopM")
                            ? "Formarás a alumnos de FP."
                            : hasVariant(globalVariants, "screen", "laptopL")
                            ? "Formarás a alumnos de FP."
                            : "Formarás a alumnos de FP."}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </div>
                </div>
              ) : null}
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"cities"}
            data-plasmic-override={overrides.cities}
            hasGap={true}
            className={classNames(projectcss.all, sty.cities)}
            id={"donde-estamos" as const}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__eI2Wb)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__aovRa)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"sectionHeading9"}
                    data-plasmic-override={overrides.sectionHeading9}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.sectionHeading9)}
                  >
                    <div
                      data-plasmic-name={"sectionTitle9"}
                      data-plasmic-override={overrides.sectionTitle9}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.sectionTitle9
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Estamos en las principales ciudades"
                        : hasVariant(globalVariants, "screen", "laptop")
                        ? "Estamos en las principales ciudades"
                        : hasVariant(globalVariants, "screen", "laptopM")
                        ? "Estamos en las principales ciudades"
                        : hasVariant(globalVariants, "screen", "laptopL")
                        ? "Estamos en las principales ciudades"
                        : "Estamos en las principales ciudades"}
                    </div>

                    <p
                      data-plasmic-name={"description16"}
                      data-plasmic-override={overrides.description16}
                      className={classNames(
                        projectcss.all,
                        projectcss.p,
                        projectcss.__wab_text,
                        sty.description16
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Fórmate Online con nosotros y trabaja en las principales ciudades de España"
                        : hasVariant(globalVariants, "screen", "laptop")
                        ? "Fórmate Online con nosotros y trabaja en las principales ciudades de España"
                        : hasVariant(globalVariants, "screen", "laptopM")
                        ? "Fórmate Online con nosotros y trabaja en las principales ciudades de España"
                        : hasVariant(globalVariants, "screen", "laptopL")
                        ? "Fórmate Online con nosotros y trabaja en las principales ciudades de España"
                        : "Fórmate Online con nosotros y trabaja en las principales ciudades de España"}
                    </p>
                  </p.Stack>
                </p.Stack>
              ) : null}

              <div className={classNames(projectcss.all, sty.freeBox__r7Gn)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__pfop1)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox___8YE3)}
                    >
                      <div
                        className={classNames(projectcss.all, sty.freeBox__bdR)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fzZrD
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"AL"}
                            </span>
                          </React.Fragment>
                        </div>
                      </div>
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jAo
                      )}
                    >
                      {"Almería"}
                    </div>
                  </p.Stack>
                ) : null}
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__mAdxL)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__chYee)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yejhP
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jkZef
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"CO"}
                            </span>
                          </React.Fragment>
                        </div>
                      </div>
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qlGf
                      )}
                    >
                      {"Córdoba"}
                    </div>
                  </p.Stack>
                ) : null}

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__zPqCe)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__j74Jw)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qICbr)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___89XJw
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"GR"}
                          </span>
                        </React.Fragment>
                      </div>
                    </div>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fA6M5
                    )}
                  >
                    {"Granada"}
                  </div>
                </p.Stack>

                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__nHgGy)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nCwhc)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___4Hbvj
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yn1Rx
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"MD"}
                            </span>
                          </React.Fragment>
                        </div>
                      </div>
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fm9Ih
                      )}
                    >
                      {"Madrid"}
                    </div>
                  </p.Stack>
                ) : null}

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tc5Ea)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__aPxcs)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tcGBs)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__exkhw
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"ML"}
                          </span>
                        </React.Fragment>
                      </div>
                    </div>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hVq4H
                    )}
                  >
                    {"Málaga"}
                  </div>
                </p.Stack>

                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___9Vtb)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___8Xqbj
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__n32Aj
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tRqw
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"MU"}
                            </span>
                          </React.Fragment>
                        </div>
                      </div>
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pw2Xw
                      )}
                    >
                      {"Murcia"}
                    </div>
                  </p.Stack>
                ) : null}
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__aIbNm)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ucyaw)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hre0P
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gUcNt
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"SE"}
                            </span>
                          </React.Fragment>
                        </div>
                      </div>
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__amw4E
                      )}
                    >
                      {"Sevilla"}
                    </div>
                  </p.Stack>
                ) : null}

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mik2)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__e3Vq)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__pWb0O)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hQbhk
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"ZA"}
                          </span>
                        </React.Fragment>
                      </div>
                    </div>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__e7Yzr
                    )}
                  >
                    {"Zaragoza"}
                  </div>
                </p.Stack>
              </div>
            </p.Stack>
          </p.Stack>

          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"contact"}
              data-plasmic-override={overrides.contact}
              hasGap={true}
              className={classNames(projectcss.all, sty.contact)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__aXjY)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : hasVariant(globalVariants, "screen", "laptop")
                    ? true
                    : hasVariant(globalVariants, "screen", "laptopL")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__xy7S)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox___6Eso)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ixEvc
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {"Apúntate y empieza a trabajar "}
                          </React.Fragment>
                          {
                            <span
                              className={classNames(
                                projectcss.all,
                                projectcss.span,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.span___5Ywh
                              )}
                            >
                              {"en Septiembre"}
                            </span>
                          }
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </div>
                    </p.Stack>

                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__ejr6H
                          )}
                          color={"darkGray" as const}
                          endIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__nuHLh
                              )}
                              role={"img"}
                            />
                          }
                          link={
                            "https://campus.open-bootcamp.com/register" as const
                          }
                          round={true}
                          size={"normal" as const}
                          startIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__wjvjF
                              )}
                              role={"img"}
                            />
                          }
                        >
                          {"Solicita información"}
                        </Button>
                      ),

                      value: args.ctaLead
                    })}
                  </p.Stack>
                ) : null}

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__e57T)}
                >
                  <p.PlasmicImg
                    alt={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("Diseño Plataforma" as const)
                        : hasVariant(globalVariants, "screen", "laptop")
                        ? ("Diseño Plataforma" as const)
                        : hasVariant(globalVariants, "screen", "laptopL")
                        ? ("Diseño Plataforma" as const)
                        : ("Diseño Plataforma" as const)
                    }
                    className={classNames(sty.img__pvToJ)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("100%" as const)
                        : hasVariant(globalVariants, "screen", "laptop")
                        ? ("557px" as const)
                        : hasVariant(globalVariants, "screen", "laptopM")
                        ? ("auto" as const)
                        : ("567px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("100vw" as const)
                        : hasVariant(globalVariants, "screen", "laptop")
                        ? ("100vw" as const)
                        : ("52vw" as const)
                    }
                    loader={"plasmic"}
                    src={{
                      src: "https://img.plasmic.app/img-optimizer/v1/img/c5d5c2b34fc41ab6d8bd871dbf0ce5bc.png",
                      fullWidth: 1594,
                      fullHeight: 1292
                    }}
                  />
                </p.Stack>
              </p.Stack>
            </p.Stack>
          ) : null}

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
            page={["cap"]}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero",
    "header",
    "h1",
    "trainers",
    "container8",
    "sectionHeading5",
    "sectionTitle5",
    "description5",
    "profile4",
    "testimonials",
    "sectionHeading7",
    "sectionTitle7",
    "description14",
    "sectionHeading",
    "sectionHeading2",
    "sectionHeading3",
    "cities",
    "sectionHeading9",
    "sectionTitle9",
    "description16",
    "contact",
    "footer"
  ],
  hero: ["hero", "header", "h1"],
  header: ["header", "h1"],
  h1: ["h1"],
  trainers: [
    "trainers",
    "container8",
    "sectionHeading5",
    "sectionTitle5",
    "description5",
    "profile4"
  ],
  container8: [
    "container8",
    "sectionHeading5",
    "sectionTitle5",
    "description5"
  ],
  sectionHeading5: ["sectionHeading5", "sectionTitle5", "description5"],
  sectionTitle5: ["sectionTitle5"],
  description5: ["description5"],
  profile4: ["profile4"],
  testimonials: [
    "testimonials",
    "sectionHeading7",
    "sectionTitle7",
    "description14",
    "sectionHeading",
    "sectionHeading2",
    "sectionHeading3"
  ],
  sectionHeading7: ["sectionHeading7", "sectionTitle7", "description14"],
  sectionTitle7: ["sectionTitle7"],
  description14: ["description14"],
  sectionHeading: ["sectionHeading"],
  sectionHeading2: ["sectionHeading2"],
  sectionHeading3: ["sectionHeading3"],
  cities: ["cities", "sectionHeading9", "sectionTitle9", "description16"],
  sectionHeading9: ["sectionHeading9", "sectionTitle9", "description16"],
  sectionTitle9: ["sectionTitle9"],
  description16: ["description16"],
  contact: ["contact"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  hero: "div";
  header: "div";
  h1: "h1";
  trainers: "div";
  container8: "div";
  sectionHeading5: "div";
  sectionTitle5: "div";
  description5: "div";
  profile4: "div";
  testimonials: "div";
  sectionHeading7: "div";
  sectionTitle7: "div";
  description14: "p";
  sectionHeading: "div";
  sectionHeading2: "div";
  sectionHeading3: "div";
  cities: "div";
  sectionHeading9: "div";
  sectionTitle9: "div";
  description16: "p";
  contact: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLandingCap__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLandingCap__VariantsArgs;
    args?: PlasmicLandingCap__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLandingCap__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLandingCap__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLandingCap__ArgProps,
          internalVariantPropNames: PlasmicLandingCap__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLandingCap__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLandingCap";
  } else {
    func.displayName = `PlasmicLandingCap.${nodeName}`;
  }
  return func;
}

export const PlasmicLandingCap = Object.assign(
  // Top-level PlasmicLandingCap renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    header: makeNodeComponent("header"),
    h1: makeNodeComponent("h1"),
    trainers: makeNodeComponent("trainers"),
    container8: makeNodeComponent("container8"),
    sectionHeading5: makeNodeComponent("sectionHeading5"),
    sectionTitle5: makeNodeComponent("sectionTitle5"),
    description5: makeNodeComponent("description5"),
    profile4: makeNodeComponent("profile4"),
    testimonials: makeNodeComponent("testimonials"),
    sectionHeading7: makeNodeComponent("sectionHeading7"),
    sectionTitle7: makeNodeComponent("sectionTitle7"),
    description14: makeNodeComponent("description14"),
    sectionHeading: makeNodeComponent("sectionHeading"),
    sectionHeading2: makeNodeComponent("sectionHeading2"),
    sectionHeading3: makeNodeComponent("sectionHeading3"),
    cities: makeNodeComponent("cities"),
    sectionHeading9: makeNodeComponent("sectionHeading9"),
    sectionTitle9: makeNodeComponent("sectionTitle9"),
    description16: makeNodeComponent("description16"),
    contact: makeNodeComponent("contact"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicLandingCap
    internalVariantProps: PlasmicLandingCap__VariantProps,
    internalArgProps: PlasmicLandingCap__ArgProps
  }
);

export default PlasmicLandingCap;
/* prettier-ignore-end */
