// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qJhJbLN2Wy56BDK1v9VeHg
// Component: 2Y7usthzRd
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_bootcamp_v_2_0.module.css"; // plasmic-import: qJhJbLN2Wy56BDK1v9VeHg/projectcss
import sty from "./PlasmicProfileImage.module.css"; // plasmic-import: 2Y7usthzRd/css

export type PlasmicProfileImage__VariantMembers = {
  active: "active";
};

export type PlasmicProfileImage__VariantsArgs = {
  active?: SingleBooleanChoiceArg<"active">;
};

type VariantPropType = keyof PlasmicProfileImage__VariantsArgs;
export const PlasmicProfileImage__VariantProps = new Array<VariantPropType>(
  "active"
);

export type PlasmicProfileImage__ArgsType = {
  userImage?: React.ReactNode;
};

type ArgPropType = keyof PlasmicProfileImage__ArgsType;
export const PlasmicProfileImage__ArgProps = new Array<ArgPropType>(
  "userImage"
);

export type PlasmicProfileImage__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultProfileImageProps {
  userImage?: React.ReactNode;
  active?: SingleBooleanChoiceArg<"active">;
  className?: string;
}

function PlasmicProfileImage__RenderFunc(props: {
  variants: PlasmicProfileImage__VariantsArgs;
  args: PlasmicProfileImage__ArgsType;
  overrides: PlasmicProfileImage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
          { [sty.rootactive]: hasVariant(variants, "active", "active") }
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents: true ? (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__ikMd0)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loader={"plasmic"}
              loading={"lazy" as const}
            />
          ) : null,
          value: args.userImage
        })}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProfileImage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProfileImage__VariantsArgs;
    args?: PlasmicProfileImage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProfileImage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProfileImage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProfileImage__ArgProps,
          internalVariantPropNames: PlasmicProfileImage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicProfileImage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProfileImage";
  } else {
    func.displayName = `PlasmicProfileImage.${nodeName}`;
  }
  return func;
}

export const PlasmicProfileImage = Object.assign(
  // Top-level PlasmicProfileImage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicProfileImage
    internalVariantProps: PlasmicProfileImage__VariantProps,
    internalArgProps: PlasmicProfileImage__ArgProps
  }
);

export default PlasmicProfileImage;
/* prettier-ignore-end */
