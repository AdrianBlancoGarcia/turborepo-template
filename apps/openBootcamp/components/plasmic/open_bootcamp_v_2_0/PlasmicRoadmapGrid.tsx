// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qJhJbLN2Wy56BDK1v9VeHg
// Component: XjZkPKXlmtd
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsgfTNvlXeClRRx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GfTNvlXE_ClRRx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_bootcamp_v_2_0.module.css"; // plasmic-import: qJhJbLN2Wy56BDK1v9VeHg/projectcss
import sty from "./PlasmicRoadmapGrid.module.css"; // plasmic-import: XjZkPKXlmtd/css

import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: UhuH78E4uB/icon
import Icon35Icon from "./icons/PlasmicIcon__Icon35"; // plasmic-import: _4smdNWrLp/icon

export type PlasmicRoadmapGrid__VariantMembers = {};

export type PlasmicRoadmapGrid__VariantsArgs = {};
type VariantPropType = keyof PlasmicRoadmapGrid__VariantsArgs;
export const PlasmicRoadmapGrid__VariantProps = new Array<VariantPropType>();

export type PlasmicRoadmapGrid__ArgsType = {};
type ArgPropType = keyof PlasmicRoadmapGrid__ArgsType;
export const PlasmicRoadmapGrid__ArgProps = new Array<ArgPropType>();

export type PlasmicRoadmapGrid__OverridesType = {
  root?: p.Flex<"div">;
  sectionHeading?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  cursoDeProgramacion?: p.Flex<"div">;
  textItem2?: p.Flex<"div">;
  tech01?: p.Flex<"div">;
  tech2?: p.Flex<"a"> & Partial<LinkProps>;
  tech3?: p.Flex<"a"> & Partial<LinkProps>;
  sectionHeading2?: p.Flex<"div">;
  linkFrontend?: p.Flex<"a"> & Partial<LinkProps>;
  cursoDeProgramacion2?: p.Flex<"div">;
  textItem3?: p.Flex<"div">;
  tech4?: p.Flex<"a"> & Partial<LinkProps>;
  tech5?: p.Flex<"a"> & Partial<LinkProps>;
  tech7?: p.Flex<"div">;
  sectionHeading6?: p.Flex<"div">;
  linkBackend?: p.Flex<"a"> & Partial<LinkProps>;
  cursoDeProgramacion3?: p.Flex<"div">;
  textItem4?: p.Flex<"div">;
  tech14?: p.Flex<"a"> & Partial<LinkProps>;
  tech8?: p.Flex<"a"> & Partial<LinkProps>;
  tech9?: p.Flex<"a"> & Partial<LinkProps>;
  tech19?: p.Flex<"div">;
  tech13?: p.Flex<"a"> & Partial<LinkProps>;
  sectionHeading10?: p.Flex<"div">;
  linkFullStack?: p.Flex<"a"> & Partial<LinkProps>;
  cursoDeProgramacion4?: p.Flex<"div">;
  textItem5?: p.Flex<"div">;
  tech10?: p.Flex<"div">;
  tech15?: p.Flex<"div">;
  tech16?: p.Flex<"a"> & Partial<LinkProps>;
  tech17?: p.Flex<"div">;
  tech18?: p.Flex<"div">;
};

export interface DefaultRoadmapGridProps {
  className?: string;
}

function PlasmicRoadmapGrid__RenderFunc(props: {
  variants: PlasmicRoadmapGrid__VariantsArgs;
  args: PlasmicRoadmapGrid__ArgsType;
  overrides: PlasmicRoadmapGrid__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgfTNvlXeClRRx()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ibR)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"sectionHeading"}
          data-plasmic-override={overrides.sectionHeading}
          hasGap={true}
          className={classNames(projectcss.all, sty.sectionHeading)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wir4I
            )}
          >
            {"Principiante"}
          </div>

          <p.Stack
            as={p.PlasmicLink}
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.a, sty.link)}
            component={Link}
            href={"/aprender-programar" as const}
            platform={"nextjs"}
          >
            <div
              data-plasmic-name={"cursoDeProgramacion"}
              data-plasmic-override={overrides.cursoDeProgramacion}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.cursoDeProgramacion
              )}
            >
              {hasVariant(globalVariants, "screen", "laptop")
                ? "Curso de Programaci贸n "
                : "Curso de Programaci贸n "}
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"textItem2"}
              data-plasmic-override={overrides.textItem2}
              hasGap={true}
              className={classNames(projectcss.all, sty.textItem2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dpBy
                )}
              >
                {"desde 0 Gratis"}
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__plOpK)}>
                <Icon34Icon
                  className={classNames(projectcss.all, sty.svg__eJjL9)}
                  role={"img"}
                />
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__kBb0Y)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"tech01"}
            data-plasmic-override={overrides.tech01}
            hasGap={true}
            className={classNames(projectcss.all, sty.tech01)}
          >
            <p.PlasmicImg
              alt={"Curso de HTML y CSS Gratis" as const}
              className={classNames(sty.img__h5Pho)}
              displayHeight={"50px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"50px" as const}
              loader={"plasmic"}
              loading={"lazy" as const}
              src={{
                src: "https://img.plasmic.app/img-optimizer/v1/img/6d0aa59a4e950fc2d2263daf6568bcbc.png",
                fullWidth: 460,
                fullHeight: 461
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__w8JRj
              )}
            >
              {"Introducci贸n a la\nprogramaci贸n"}
            </div>
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            data-plasmic-name={"tech2"}
            data-plasmic-override={overrides.tech2}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.a, sty.tech2)}
            component={Link}
            href={"/cursos/html-y-css" as const}
            platform={"nextjs"}
          >
            <p.PlasmicImg
              alt={"Curso de HTML y CSS Gratis" as const}
              className={classNames(sty.img__nY)}
              displayHeight={"50px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"50px" as const}
              loader={"plasmic"}
              loading={"lazy" as const}
              src={{
                src: "https://img.plasmic.app/img-optimizer/v1/img/907cbb94d50a09da5e4b9885924d137f.png",
                fullWidth: 100,
                fullHeight: 100
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vyTv9
              )}
            >
              {"HTML y CSS"}
            </div>
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            data-plasmic-name={"tech3"}
            data-plasmic-override={overrides.tech3}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.a, sty.tech3)}
            component={Link}
            href={"/cursos/javascript" as const}
            platform={"nextjs"}
          >
            <p.PlasmicImg
              alt={"Curso de Javascript Gratis" as const}
              className={classNames(sty.img__mtyn1)}
              displayHeight={"50px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"50px" as const}
              loader={"plasmic"}
              loading={"lazy" as const}
              src={{
                src: "https://img.plasmic.app/img-optimizer/v1/img/5d7f22ab1e6be7dd663e6edae8d70075.png",
                fullWidth: 60,
                fullHeight: 60
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vrOh7
              )}
            >
              {"JavaScript"}
            </div>
          </p.Stack>
        </p.Stack>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ewLCp)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"sectionHeading2"}
          data-plasmic-override={overrides.sectionHeading2}
          hasGap={true}
          className={classNames(projectcss.all, sty.sectionHeading2)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__aQmav
            )}
          >
            {"Front-End"}
          </div>

          <p.Stack
            as={p.PlasmicLink}
            data-plasmic-name={"linkFrontend"}
            data-plasmic-override={overrides.linkFrontend}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.linkFrontend
            )}
            component={Link}
            href={"/front-end" as const}
            platform={"nextjs"}
          >
            <div
              data-plasmic-name={"cursoDeProgramacion2"}
              data-plasmic-override={overrides.cursoDeProgramacion2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.cursoDeProgramacion2
              )}
            >
              {"Curso de Front-End"}
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"textItem3"}
              data-plasmic-override={overrides.textItem3}
              hasGap={true}
              className={classNames(projectcss.all, sty.textItem3)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__e9Lg2
                )}
              >
                {"Gratis"}
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__vy04U)}>
                <Icon34Icon
                  className={classNames(projectcss.all, sty.svg__wfOew)}
                  role={"img"}
                />
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__rS1P)}
        >
          <p.Stack
            as={p.PlasmicLink}
            data-plasmic-name={"tech4"}
            data-plasmic-override={overrides.tech4}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.a, sty.tech4)}
            component={Link}
            href={"/cursos/react" as const}
            platform={"nextjs"}
          >
            <p.PlasmicImg
              alt={"Curso de React Gratis" as const}
              className={classNames(sty.img__bjfG1)}
              displayHeight={"50px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"50px" as const}
              loader={"plasmic"}
              loading={"lazy" as const}
              src={{
                src: "https://img.plasmic.app/img-optimizer/v1/img/86adce8a4da5af9dc5c370f9f4e29ffc.png",
                fullWidth: 60,
                fullHeight: 60
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__h3CR
              )}
            >
              {"React"}
            </div>
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            data-plasmic-name={"tech5"}
            data-plasmic-override={overrides.tech5}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.a, sty.tech5)}
            component={Link}
            href={"cursos/angular" as const}
            platform={"nextjs"}
          >
            <p.PlasmicImg
              alt={"Curso de Angular Gratis" as const}
              className={classNames(sty.img__fMLio)}
              displayHeight={"50px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"50px" as const}
              loader={"plasmic"}
              loading={"lazy" as const}
              src={{
                src: "https://img.plasmic.app/img-optimizer/v1/img/b5a4efb4575d17e55e133fd522e522ad.png",
                fullWidth: 60,
                fullHeight: 60
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mMab
              )}
            >
              {"Angular"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"tech7"}
            data-plasmic-override={overrides.tech7}
            hasGap={true}
            className={classNames(projectcss.all, sty.tech7)}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__anxF)}
              displayHeight={"50px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"50px" as const}
              loader={"plasmic"}
              loading={"lazy" as const}
              src={{
                src: "https://img.plasmic.app/img-optimizer/v1/img/395ce1bddcf9e2c40f25d6b7857b2f53.png",
                fullWidth: 100,
                fullHeight: 100
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qmdbz
              )}
            >
              {"VueJS"}
            </div>
          </p.Stack>
        </p.Stack>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__gbao4)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"sectionHeading6"}
          data-plasmic-override={overrides.sectionHeading6}
          hasGap={true}
          className={classNames(projectcss.all, sty.sectionHeading6)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mHgNm
            )}
          >
            {"Back-End"}
          </div>

          <p.Stack
            as={p.PlasmicLink}
            data-plasmic-name={"linkBackend"}
            data-plasmic-override={overrides.linkBackend}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.linkBackend
            )}
            component={Link}
            href={"/back-end" as const}
            platform={"nextjs"}
          >
            <div
              data-plasmic-name={"cursoDeProgramacion3"}
              data-plasmic-override={overrides.cursoDeProgramacion3}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.cursoDeProgramacion3
              )}
            >
              {"Curso de Back-End"}
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"textItem4"}
              data-plasmic-override={overrides.textItem4}
              hasGap={true}
              className={classNames(projectcss.all, sty.textItem4)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rzq3V
                )}
              >
                {"Gratis"}
              </div>

              <div className={classNames(projectcss.all, sty.freeBox___324Mc)}>
                <Icon34Icon
                  className={classNames(projectcss.all, sty.svg__xwrPe)}
                  role={"img"}
                />
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__f0P8M)}
        >
          <p.Stack
            as={p.PlasmicLink}
            data-plasmic-name={"tech14"}
            data-plasmic-override={overrides.tech14}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.a, sty.tech14)}
            component={Link}
            href={"/cursos/php" as const}
            platform={"nextjs"}
          >
            <p.PlasmicImg
              alt={"Curso de PHP Gratis" as const}
              className={classNames(sty.img__niY0F)}
              displayHeight={"50px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"50px" as const}
              loader={"plasmic"}
              loading={"lazy" as const}
              src={{
                src: "https://img.plasmic.app/img-optimizer/v1/img/a4e507246ba15eef375f6d2d07a092e1.png",
                fullWidth: 512,
                fullHeight: 512
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mOz0G
              )}
            >
              {"Php"}
            </div>
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            data-plasmic-name={"tech8"}
            data-plasmic-override={overrides.tech8}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.a, sty.tech8)}
            component={Link}
            href={"/cursos/python" as const}
            platform={"nextjs"}
          >
            <p.PlasmicImg
              alt={"Curso de Python Gratis" as const}
              className={classNames(sty.img__zyKKa)}
              displayHeight={"50px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"50px" as const}
              loader={"plasmic"}
              loading={"lazy" as const}
              src={{
                src: "https://img.plasmic.app/img-optimizer/v1/img/422b543405a1642c3e7c03e7ef76c4f8.png",
                fullWidth: 461,
                fullHeight: 460
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mdhQc
              )}
            >
              {"Python"}
            </div>
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            data-plasmic-name={"tech9"}
            data-plasmic-override={overrides.tech9}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.a, sty.tech9)}
            component={Link}
            href={"/cursos/java" as const}
            platform={"nextjs"}
          >
            <p.PlasmicImg
              alt={"Curso de Java Gratis" as const}
              className={classNames(sty.img__dEvRx)}
              displayHeight={"50px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"50px" as const}
              loader={"plasmic"}
              loading={"lazy" as const}
              src={{
                src: "https://img.plasmic.app/img-optimizer/v1/img/86c6aaee42cbfdfaf047b5fe848b0453.png",
                fullWidth: 461,
                fullHeight: 460
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__x5KMf
              )}
            >
              {"Java"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"tech19"}
            data-plasmic-override={overrides.tech19}
            hasGap={true}
            className={classNames(projectcss.all, sty.tech19)}
          >
            <p.PlasmicImg
              alt={"" as const}
              className={classNames(sty.img__jOgAa)}
              displayHeight={"50px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"50px" as const}
              loader={"plasmic"}
              loading={"lazy" as const}
              src={{
                src: "https://img.plasmic.app/img-optimizer/v1/img/80d40be304fe43bb79796985af273494.png",
                fullWidth: 150,
                fullHeight: 150
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sErqA
              )}
            >
              {"NodeJS"}
            </div>
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            data-plasmic-name={"tech13"}
            data-plasmic-override={overrides.tech13}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.a, sty.tech13)}
            component={Link}
            href={"/cursos/c-sharp" as const}
            platform={"nextjs"}
          >
            <p.PlasmicImg
              alt={"Curso de C# Gratis" as const}
              className={classNames(sty.img___33YcG)}
              displayHeight={"50px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"50px" as const}
              loader={"plasmic"}
              loading={"lazy" as const}
              src={{
                src: "https://img.plasmic.app/img-optimizer/v1/img/381ef619225be9cba65ae4cd6d972f3b.png",
                fullWidth: 460,
                fullHeight: 460
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bRxuk
              )}
            >
              {"C#"}
            </div>
          </p.Stack>
        </p.Stack>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__eXOtb)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"sectionHeading10"}
          data-plasmic-override={overrides.sectionHeading10}
          hasGap={true}
          className={classNames(projectcss.all, sty.sectionHeading10)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yuMiS
            )}
          >
            {"FullStack"}
          </div>

          <p.Stack
            as={p.PlasmicLink}
            data-plasmic-name={"linkFullStack"}
            data-plasmic-override={overrides.linkFullStack}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.linkFullStack
            )}
            component={Link}
            href={"/full-stack" as const}
            platform={"nextjs"}
          >
            <div
              data-plasmic-name={"cursoDeProgramacion4"}
              data-plasmic-override={overrides.cursoDeProgramacion4}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.cursoDeProgramacion4
              )}
            >
              {"Curso de FullStack"}
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"textItem5"}
              data-plasmic-override={overrides.textItem5}
              hasGap={true}
              className={classNames(projectcss.all, sty.textItem5)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oJtKn
                )}
              >
                {"Gratis"}
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__qOGoA)}>
                <Icon34Icon
                  className={classNames(projectcss.all, sty.svg__y7Vs3)}
                  role={"img"}
                />
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__w7AC)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"tech10"}
            data-plasmic-override={overrides.tech10}
            hasGap={true}
            className={classNames(projectcss.all, sty.tech10)}
          >
            <Icon35Icon
              className={classNames(projectcss.all, sty.svg___0UNdX)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__l4JAf
              )}
            >
              {"Front + Back"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"tech15"}
            data-plasmic-override={overrides.tech15}
            hasGap={true}
            className={classNames(projectcss.all, sty.tech15)}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img___8UnGt)}
              displayHeight={"50px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"50px" as const}
              loader={"plasmic"}
              loading={"lazy" as const}
              src={{
                src: "https://img.plasmic.app/img-optimizer/v1/img/b5a4efb4575d17e55e133fd522e522ad.png",
                fullWidth: 60,
                fullHeight: 60
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___5Kwib
              )}
            >
              {"MEAN"}
            </div>
          </p.Stack>

          <p.Stack
            as={p.PlasmicLink}
            data-plasmic-name={"tech16"}
            data-plasmic-override={overrides.tech16}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.a, sty.tech16)}
            component={Link}
            href={"/cursos/mern" as const}
            platform={"nextjs"}
          >
            <p.PlasmicImg
              alt={"Curso de MERN Stack Gratis" as const}
              className={classNames(sty.img__jc53Q)}
              displayHeight={"50px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"50px" as const}
              loader={"plasmic"}
              loading={"lazy" as const}
              src={{
                src: "https://img.plasmic.app/img-optimizer/v1/img/86adce8a4da5af9dc5c370f9f4e29ffc.png",
                fullWidth: 60,
                fullHeight: 60
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jqeT
              )}
            >
              {"MERN"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"tech17"}
            data-plasmic-override={overrides.tech17}
            hasGap={true}
            className={classNames(projectcss.all, sty.tech17)}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__aKxEj)}
              displayHeight={"50px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"50px" as const}
              loader={"plasmic"}
              loading={"lazy" as const}
              src={{
                src: "https://img.plasmic.app/img-optimizer/v1/img/395ce1bddcf9e2c40f25d6b7857b2f53.png",
                fullWidth: 100,
                fullHeight: 100
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__u4RpA
              )}
            >
              {"MEVN"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"tech18"}
            data-plasmic-override={overrides.tech18}
            hasGap={true}
            className={classNames(projectcss.all, sty.tech18)}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__dyJ8J)}
              displayHeight={"50px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"50px" as const}
              loader={"plasmic"}
              loading={"lazy" as const}
              src={{
                src: "https://img.plasmic.app/img-optimizer/v1/img/5d7f22ab1e6be7dd663e6edae8d70075.png",
                fullWidth: 60,
                fullHeight: 60
              }}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__phxdc
              )}
            >
              {"Serverless"}
            </div>
          </p.Stack>
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sectionHeading",
    "link",
    "cursoDeProgramacion",
    "textItem2",
    "tech01",
    "tech2",
    "tech3",
    "sectionHeading2",
    "linkFrontend",
    "cursoDeProgramacion2",
    "textItem3",
    "tech4",
    "tech5",
    "tech7",
    "sectionHeading6",
    "linkBackend",
    "cursoDeProgramacion3",
    "textItem4",
    "tech14",
    "tech8",
    "tech9",
    "tech19",
    "tech13",
    "sectionHeading10",
    "linkFullStack",
    "cursoDeProgramacion4",
    "textItem5",
    "tech10",
    "tech15",
    "tech16",
    "tech17",
    "tech18"
  ],
  sectionHeading: [
    "sectionHeading",
    "link",
    "cursoDeProgramacion",
    "textItem2"
  ],
  link: ["link", "cursoDeProgramacion", "textItem2"],
  cursoDeProgramacion: ["cursoDeProgramacion"],
  textItem2: ["textItem2"],
  tech01: ["tech01"],
  tech2: ["tech2"],
  tech3: ["tech3"],
  sectionHeading2: [
    "sectionHeading2",
    "linkFrontend",
    "cursoDeProgramacion2",
    "textItem3"
  ],
  linkFrontend: ["linkFrontend", "cursoDeProgramacion2", "textItem3"],
  cursoDeProgramacion2: ["cursoDeProgramacion2"],
  textItem3: ["textItem3"],
  tech4: ["tech4"],
  tech5: ["tech5"],
  tech7: ["tech7"],
  sectionHeading6: [
    "sectionHeading6",
    "linkBackend",
    "cursoDeProgramacion3",
    "textItem4"
  ],
  linkBackend: ["linkBackend", "cursoDeProgramacion3", "textItem4"],
  cursoDeProgramacion3: ["cursoDeProgramacion3"],
  textItem4: ["textItem4"],
  tech14: ["tech14"],
  tech8: ["tech8"],
  tech9: ["tech9"],
  tech19: ["tech19"],
  tech13: ["tech13"],
  sectionHeading10: [
    "sectionHeading10",
    "linkFullStack",
    "cursoDeProgramacion4",
    "textItem5"
  ],
  linkFullStack: ["linkFullStack", "cursoDeProgramacion4", "textItem5"],
  cursoDeProgramacion4: ["cursoDeProgramacion4"],
  textItem5: ["textItem5"],
  tech10: ["tech10"],
  tech15: ["tech15"],
  tech16: ["tech16"],
  tech17: ["tech17"],
  tech18: ["tech18"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sectionHeading: "div";
  link: "a";
  cursoDeProgramacion: "div";
  textItem2: "div";
  tech01: "div";
  tech2: "a";
  tech3: "a";
  sectionHeading2: "div";
  linkFrontend: "a";
  cursoDeProgramacion2: "div";
  textItem3: "div";
  tech4: "a";
  tech5: "a";
  tech7: "div";
  sectionHeading6: "div";
  linkBackend: "a";
  cursoDeProgramacion3: "div";
  textItem4: "div";
  tech14: "a";
  tech8: "a";
  tech9: "a";
  tech19: "div";
  tech13: "a";
  sectionHeading10: "div";
  linkFullStack: "a";
  cursoDeProgramacion4: "div";
  textItem5: "div";
  tech10: "div";
  tech15: "div";
  tech16: "a";
  tech17: "div";
  tech18: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRoadmapGrid__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRoadmapGrid__VariantsArgs;
    args?: PlasmicRoadmapGrid__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRoadmapGrid__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRoadmapGrid__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRoadmapGrid__ArgProps,
          internalVariantPropNames: PlasmicRoadmapGrid__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicRoadmapGrid__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRoadmapGrid";
  } else {
    func.displayName = `PlasmicRoadmapGrid.${nodeName}`;
  }
  return func;
}

export const PlasmicRoadmapGrid = Object.assign(
  // Top-level PlasmicRoadmapGrid renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionHeading: makeNodeComponent("sectionHeading"),
    link: makeNodeComponent("link"),
    cursoDeProgramacion: makeNodeComponent("cursoDeProgramacion"),
    textItem2: makeNodeComponent("textItem2"),
    tech01: makeNodeComponent("tech01"),
    tech2: makeNodeComponent("tech2"),
    tech3: makeNodeComponent("tech3"),
    sectionHeading2: makeNodeComponent("sectionHeading2"),
    linkFrontend: makeNodeComponent("linkFrontend"),
    cursoDeProgramacion2: makeNodeComponent("cursoDeProgramacion2"),
    textItem3: makeNodeComponent("textItem3"),
    tech4: makeNodeComponent("tech4"),
    tech5: makeNodeComponent("tech5"),
    tech7: makeNodeComponent("tech7"),
    sectionHeading6: makeNodeComponent("sectionHeading6"),
    linkBackend: makeNodeComponent("linkBackend"),
    cursoDeProgramacion3: makeNodeComponent("cursoDeProgramacion3"),
    textItem4: makeNodeComponent("textItem4"),
    tech14: makeNodeComponent("tech14"),
    tech8: makeNodeComponent("tech8"),
    tech9: makeNodeComponent("tech9"),
    tech19: makeNodeComponent("tech19"),
    tech13: makeNodeComponent("tech13"),
    sectionHeading10: makeNodeComponent("sectionHeading10"),
    linkFullStack: makeNodeComponent("linkFullStack"),
    cursoDeProgramacion4: makeNodeComponent("cursoDeProgramacion4"),
    textItem5: makeNodeComponent("textItem5"),
    tech10: makeNodeComponent("tech10"),
    tech15: makeNodeComponent("tech15"),
    tech16: makeNodeComponent("tech16"),
    tech17: makeNodeComponent("tech17"),
    tech18: makeNodeComponent("tech18"),

    // Metadata about props expected for PlasmicRoadmapGrid
    internalVariantProps: PlasmicRoadmapGrid__VariantProps,
    internalArgProps: PlasmicRoadmapGrid__ArgProps
  }
);

export default PlasmicRoadmapGrid;
/* prettier-ignore-end */
