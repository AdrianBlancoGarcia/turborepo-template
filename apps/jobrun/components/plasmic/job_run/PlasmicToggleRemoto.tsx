// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: upY9cnzMG3kZgeoF6ecCnw
// Component: DGYc-zpwpl
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Toggle from "../../Toggle"; // plasmic-import: jzkOxDkpw3/component

import { useScreenVariants as useScreenVariants_2SafZfzx0FlS7 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2SAFZfzx0FlS7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_job_run.module.css"; // plasmic-import: upY9cnzMG3kZgeoF6ecCnw/projectcss
import sty from "./PlasmicToggleRemoto.module.css"; // plasmic-import: DGYc-zpwpl/css

import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: aSITYRiVge/icon

export type PlasmicToggleRemoto__VariantMembers = {
  isChecked: "isChecked";
};

export type PlasmicToggleRemoto__VariantsArgs = {
  isChecked?: SingleBooleanChoiceArg<"isChecked">;
};

type VariantPropType = keyof PlasmicToggleRemoto__VariantsArgs;
export const PlasmicToggleRemoto__VariantProps = new Array<VariantPropType>(
  "isChecked"
);

export type PlasmicToggleRemoto__ArgsType = {};
type ArgPropType = keyof PlasmicToggleRemoto__ArgsType;
export const PlasmicToggleRemoto__ArgProps = new Array<ArgPropType>();

export type PlasmicToggleRemoto__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  text?: p.Flex<"div">;
  toggle?: p.Flex<typeof Toggle>;
};

export interface DefaultToggleRemotoProps {
  isChecked?: SingleBooleanChoiceArg<"isChecked">;
  className?: string;
}

function PlasmicToggleRemoto__RenderFunc(props: {
  variants: PlasmicToggleRemoto__VariantsArgs;
  args: PlasmicToggleRemoto__ArgsType;
  overrides: PlasmicToggleRemoto__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2SafZfzx0FlS7()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootisChecked]: hasVariant(variants, "isChecked", "isChecked") }
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___89Ztr, {
          [sty.freeBoxisChecked___89ZtrEi9W]: hasVariant(
            variants,
            "isChecked",
            "isChecked"
          )
        })}
      >
        {true ? (
          <div
            className={classNames(projectcss.all, sty.freeBox___7FZr, {
              [sty.freeBoxisChecked___7FZrEi9W]: hasVariant(
                variants,
                "isChecked",
                "isChecked"
              )
            })}
          />
        ) : null}

        <Icon28Icon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgisChecked]: hasVariant(variants, "isChecked", "isChecked")
          })}
          role={"img"}
        />

        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.textisChecked]: hasVariant(
                variants,
                "isChecked",
                "isChecked"
              )
            }
          )}
        >
          {"Remoto"}
        </div>

        <Toggle
          data-plasmic-name={"toggle"}
          data-plasmic-override={overrides.toggle}
          className={classNames("__wab_instance", sty.toggle, {
            [sty.toggleisChecked]: hasVariant(
              variants,
              "isChecked",
              "isChecked"
            )
          })}
          data-cy={"filtro_remoto" as const}
          isChecked={
            hasVariant(variants, "isChecked", "isChecked") ? true : undefined
          }
        />
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "text", "toggle"],
  svg: ["svg"],
  text: ["text"],
  toggle: ["toggle"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  text: "div";
  toggle: typeof Toggle;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicToggleRemoto__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicToggleRemoto__VariantsArgs;
    args?: PlasmicToggleRemoto__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicToggleRemoto__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicToggleRemoto__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicToggleRemoto__ArgProps,
          internalVariantPropNames: PlasmicToggleRemoto__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicToggleRemoto__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicToggleRemoto";
  } else {
    func.displayName = `PlasmicToggleRemoto.${nodeName}`;
  }
  return func;
}

export const PlasmicToggleRemoto = Object.assign(
  // Top-level PlasmicToggleRemoto renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    toggle: makeNodeComponent("toggle"),

    // Metadata about props expected for PlasmicToggleRemoto
    internalVariantProps: PlasmicToggleRemoto__VariantProps,
    internalArgProps: PlasmicToggleRemoto__ArgProps
  }
);

export default PlasmicToggleRemoto;
/* prettier-ignore-end */
