// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: upY9cnzMG3kZgeoF6ecCnw
// Component: LdyX8IaXajR
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_job_run.module.css"; // plasmic-import: upY9cnzMG3kZgeoF6ecCnw/projectcss
import sty from "./PlasmicCompanyCard.module.css"; // plasmic-import: LdyX8IaXajR/css

export type PlasmicCompanyCard__VariantMembers = {};

export type PlasmicCompanyCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicCompanyCard__VariantsArgs;
export const PlasmicCompanyCard__VariantProps = new Array<VariantPropType>();

export type PlasmicCompanyCard__ArgsType = {
  companyImg?: React.ReactNode;
  companyName?: React.ReactNode;
  workers?: React.ReactNode;
  flagIcon?: React.ReactNode;
  location?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCompanyCard__ArgsType;
export const PlasmicCompanyCard__ArgProps = new Array<ArgPropType>(
  "companyImg",
  "companyName",
  "workers",
  "flagIcon",
  "location"
);

export type PlasmicCompanyCard__OverridesType = {
  root?: p.Flex<"div">;
  companyData?: p.Flex<"div">;
  text?: p.Flex<"div">;
  cardDetailItem?: p.Flex<"div">;
};

export interface DefaultCompanyCardProps {
  companyImg?: React.ReactNode;
  companyName?: React.ReactNode;
  workers?: React.ReactNode;
  flagIcon?: React.ReactNode;
  location?: React.ReactNode;
  className?: string;
}

function PlasmicCompanyCard__RenderFunc(props: {
  variants: PlasmicCompanyCard__VariantsArgs;
  args: PlasmicCompanyCard__ArgsType;
  overrides: PlasmicCompanyCard__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__l7Lqy)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__tNkzd)}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__zZuwX)}>
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__sosuZ)}
                      displayHeight={"72px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"72px" as const}
                      loader={"plasmic"}
                      loading={"lazy" as const}
                    />
                  ),

                  value: args.companyImg
                })}
              </div>
            ) : null}

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__saEOp)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__mnzIb)}>
                {p.renderPlasmicSlot({
                  defaultContents: "NombreEmpresa",
                  value: args.companyName,
                  className: classNames(sty.slotTargetCompanyName)
                })}
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"companyData"}
                data-plasmic-override={overrides.companyData}
                hasGap={true}
                className={classNames(projectcss.all, sty.companyData)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "WorkersNumber",
                  value: args.workers,
                  className: classNames(sty.slotTargetWorkers)
                })}

                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {"|"}
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardDetailItem"}
                  data-plasmic-override={overrides.cardDetailItem}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.cardDetailItem)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <svg
                        className={classNames(projectcss.all, sty.svg__guZjy)}
                        role={"img"}
                      />
                    ),

                    value: args.flagIcon
                  })}

                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fdnfF
                        )}
                      >
                        {"Location"}
                      </div>
                    ),

                    value: args.location,
                    className: classNames(sty.slotTargetLocation)
                  })}
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "companyData", "text", "cardDetailItem"],
  companyData: ["companyData", "text", "cardDetailItem"],
  text: ["text"],
  cardDetailItem: ["cardDetailItem"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  companyData: "div";
  text: "div";
  cardDetailItem: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCompanyCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCompanyCard__VariantsArgs;
    args?: PlasmicCompanyCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCompanyCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCompanyCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCompanyCard__ArgProps,
          internalVariantPropNames: PlasmicCompanyCard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCompanyCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCompanyCard";
  } else {
    func.displayName = `PlasmicCompanyCard.${nodeName}`;
  }
  return func;
}

export const PlasmicCompanyCard = Object.assign(
  // Top-level PlasmicCompanyCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    companyData: makeNodeComponent("companyData"),
    text: makeNodeComponent("text"),
    cardDetailItem: makeNodeComponent("cardDetailItem"),

    // Metadata about props expected for PlasmicCompanyCard
    internalVariantProps: PlasmicCompanyCard__VariantProps,
    internalArgProps: PlasmicCompanyCard__ArgProps
  }
);

export default PlasmicCompanyCard;
/* prettier-ignore-end */
