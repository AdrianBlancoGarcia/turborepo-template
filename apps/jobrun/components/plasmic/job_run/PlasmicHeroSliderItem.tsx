// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: upY9cnzMG3kZgeoF6ecCnw
// Component: 6KsDjXRa5s
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: BnsO6Lq9gm/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_job_run.module.css"; // plasmic-import: upY9cnzMG3kZgeoF6ecCnw/projectcss
import sty from "./PlasmicHeroSliderItem.module.css"; // plasmic-import: 6KsDjXRa5s/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: XprJXoBQrR/icon

export type PlasmicHeroSliderItem__VariantMembers = {
  category: "remoto" | "fullStack" | "frontEnd" | "backEnd";
};

export type PlasmicHeroSliderItem__VariantsArgs = {
  category?: SingleChoiceArg<"remoto" | "fullStack" | "frontEnd" | "backEnd">;
};

type VariantPropType = keyof PlasmicHeroSliderItem__VariantsArgs;
export const PlasmicHeroSliderItem__VariantProps = new Array<VariantPropType>(
  "category"
);

export type PlasmicHeroSliderItem__ArgsType = {
  title?: React.ReactNode;
  ctaOfertas?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHeroSliderItem__ArgsType;
export const PlasmicHeroSliderItem__ArgProps = new Array<ArgPropType>(
  "title",
  "ctaOfertas"
);

export type PlasmicHeroSliderItem__OverridesType = {
  root?: p.Flex<"div">;
  titleContainer?: p.Flex<"p">;
};

export interface DefaultHeroSliderItemProps {
  title?: React.ReactNode;
  ctaOfertas?: React.ReactNode;
  category?: SingleChoiceArg<"remoto" | "fullStack" | "frontEnd" | "backEnd">;
  className?: string;
}

function PlasmicHeroSliderItem__RenderFunc(props: {
  variants: PlasmicHeroSliderItem__VariantsArgs;
  args: PlasmicHeroSliderItem__ArgsType;
  overrides: PlasmicHeroSliderItem__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootcategory_backEnd]: hasVariant(
            variants,
            "category",
            "backEnd"
          ),
          [sty.rootcategory_frontEnd]: hasVariant(
            variants,
            "category",
            "frontEnd"
          ),
          [sty.rootcategory_fullStack]: hasVariant(
            variants,
            "category",
            "fullStack"
          ),
          [sty.rootcategory_remoto]: hasVariant(variants, "category", "remoto")
        }
      )}
    >
      <p
        data-plasmic-name={"titleContainer"}
        data-plasmic-override={overrides.titleContainer}
        className={classNames(projectcss.all, projectcss.p, sty.titleContainer)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Category",
          value: args.title,
          className: classNames(sty.slotTargetTitle, {
            [sty.slotTargetTitlecategory_backEnd]: hasVariant(
              variants,
              "category",
              "backEnd"
            ),
            [sty.slotTargetTitlecategory_frontEnd]: hasVariant(
              variants,
              "category",
              "frontEnd"
            ),
            [sty.slotTargetTitlecategory_fullStack]: hasVariant(
              variants,
              "category",
              "fullStack"
            ),
            [sty.slotTargetTitlecategory_remoto]: hasVariant(
              variants,
              "category",
              "remoto"
            )
          })
        })}
      </p>

      {p.renderPlasmicSlot({
        defaultContents: (
          <Button
            className={classNames("__wab_instance", sty.button__t8Gn)}
            color={["whiteText"]}
            icon={
              <Icon2Icon
                className={classNames(projectcss.all, sty.svg__k9KPn)}
                role={"img"}
              />
            }
            label={"Ver ofertas"}
            showEndIcon={true}
            size={["linkOnly"]}
          />
        ),

        value: args.ctaOfertas
      })}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "titleContainer"],
  titleContainer: ["titleContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  titleContainer: "p";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeroSliderItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeroSliderItem__VariantsArgs;
    args?: PlasmicHeroSliderItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeroSliderItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeroSliderItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHeroSliderItem__ArgProps,
          internalVariantPropNames: PlasmicHeroSliderItem__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHeroSliderItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeroSliderItem";
  } else {
    func.displayName = `PlasmicHeroSliderItem.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroSliderItem = Object.assign(
  // Top-level PlasmicHeroSliderItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    titleContainer: makeNodeComponent("titleContainer"),

    // Metadata about props expected for PlasmicHeroSliderItem
    internalVariantProps: PlasmicHeroSliderItem__VariantProps,
    internalArgProps: PlasmicHeroSliderItem__ArgProps
  }
);

export default PlasmicHeroSliderItem;
/* prettier-ignore-end */
