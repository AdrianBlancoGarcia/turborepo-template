// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: upY9cnzMG3kZgeoF6ecCnw
// Component: hCWJLkCV8Q
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import OfferCategoryItem from "../../OfferCategoryItem"; // plasmic-import: dm1mZrQM9M/component

import { useScreenVariants as useScreenVariants_2SafZfzx0FlS7 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2SAFZfzx0FlS7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_job_run.module.css"; // plasmic-import: upY9cnzMG3kZgeoF6ecCnw/projectcss
import sty from "./PlasmicOfferCategory.module.css"; // plasmic-import: hCWJLkCV8Q/css

export type PlasmicOfferCategory__VariantMembers = {};

export type PlasmicOfferCategory__VariantsArgs = {};
type VariantPropType = keyof PlasmicOfferCategory__VariantsArgs;
export const PlasmicOfferCategory__VariantProps = new Array<VariantPropType>();

export type PlasmicOfferCategory__ArgsType = {
  items?: React.ReactNode;
};

type ArgPropType = keyof PlasmicOfferCategory__ArgsType;
export const PlasmicOfferCategory__ArgProps = new Array<ArgPropType>("items");

export type PlasmicOfferCategory__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultOfferCategoryProps {
  items?: React.ReactNode;
  className?: string;
}

function PlasmicOfferCategory__RenderFunc(props: {
  variants: PlasmicOfferCategory__VariantsArgs;
  args: PlasmicOfferCategory__ArgsType;
  overrides: PlasmicOfferCategory__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2SafZfzx0FlS7()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__bs7P)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <OfferCategoryItem
                categoryName={"CLASSNAME"}
                className={classNames(
                  "__wab_instance",
                  sty.offerCategoryItem__tZp21
                )}
              />

              <OfferCategoryItem
                categoryName={"CLASSNAME"}
                className={classNames(
                  "__wab_instance",
                  sty.offerCategoryItem__aJYp
                )}
              />

              <OfferCategoryItem
                categoryName={"CLASSNAME"}
                className={classNames(
                  "__wab_instance",
                  sty.offerCategoryItem___9NSfb
                )}
              />

              <OfferCategoryItem
                categoryName={"CLASSNAME"}
                className={classNames(
                  "__wab_instance",
                  sty.offerCategoryItem__hC40I
                )}
              />

              <OfferCategoryItem
                categoryName={"CLASSNAME"}
                className={classNames(
                  "__wab_instance",
                  sty.offerCategoryItem__f3ONb
                )}
              />
            </React.Fragment>
          ),
          value: args.items
        })}
      </p.Stack>

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__gjhJ)}>
          <OfferCategoryItem
            categoryName={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mn6Et
                )}
              >
                {"CLASSNAME"}
              </div>
            }
            className={classNames(
              "__wab_instance",
              sty.offerCategoryItem__xctJm
            )}
          />

          <OfferCategoryItem
            categoryName={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___16So9
                )}
              >
                {"CLASSNAME"}
              </div>
            }
            className={classNames(
              "__wab_instance",
              sty.offerCategoryItem___0Rqwe
            )}
          />

          <OfferCategoryItem
            categoryName={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__f2Muo
                )}
              >
                {"CLASSNAME"}
              </div>
            }
            className={classNames(
              "__wab_instance",
              sty.offerCategoryItem__k7Ydv
            )}
          />

          <OfferCategoryItem
            categoryName={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___66ZlP
                )}
              >
                {"CLASSNAME"}
              </div>
            }
            className={classNames(
              "__wab_instance",
              sty.offerCategoryItem__qCaXb
            )}
          />
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOfferCategory__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOfferCategory__VariantsArgs;
    args?: PlasmicOfferCategory__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOfferCategory__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOfferCategory__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicOfferCategory__ArgProps,
          internalVariantPropNames: PlasmicOfferCategory__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicOfferCategory__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOfferCategory";
  } else {
    func.displayName = `PlasmicOfferCategory.${nodeName}`;
  }
  return func;
}

export const PlasmicOfferCategory = Object.assign(
  // Top-level PlasmicOfferCategory renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicOfferCategory
    internalVariantProps: PlasmicOfferCategory__VariantProps,
    internalArgProps: PlasmicOfferCategory__ArgProps
  }
);

export default PlasmicOfferCategory;
/* prettier-ignore-end */
