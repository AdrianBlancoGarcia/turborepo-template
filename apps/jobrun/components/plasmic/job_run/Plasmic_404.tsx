// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: upY9cnzMG3kZgeoF6ecCnw
// Component: QAPkHyCKz4X
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: GfUnvF4AzI/component
import LinkJr2 from "../../LinkJr2"; // plasmic-import: tsRi3ugy1sA/component
import Button from "../../Button"; // plasmic-import: BnsO6Lq9gm/component
import Logo from "../../Logo"; // plasmic-import: EamO-yxXIE/component
import Banner from "../../Banner"; // plasmic-import: CVyrqsg7IH/component
import Footer from "../../Footer"; // plasmic-import: JpAsUvUFqp/component

import { useScreenVariants as useScreenVariants_2SafZfzx0FlS7 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2SAFZfzx0FlS7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_job_run.module.css"; // plasmic-import: upY9cnzMG3kZgeoF6ecCnw/projectcss
import sty from "./Plasmic_404.module.css"; // plasmic-import: QAPkHyCKz4X/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: -Kyqm1yXpr_/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: -bUtD9hB_g5/icon
import Vector6Icon from "./icons/PlasmicIcon__Vector6"; // plasmic-import: Gbkvuahq9N/icon
import Vector7Icon from "./icons/PlasmicIcon__Vector7"; // plasmic-import: 1KVijtEtSK/icon
import Vector8Icon from "./icons/PlasmicIcon__Vector8"; // plasmic-import: e2hxgpzMOc/icon

export type Plasmic_404__VariantMembers = {};

export type Plasmic_404__VariantsArgs = {};
type VariantPropType = keyof Plasmic_404__VariantsArgs;
export const Plasmic_404__VariantProps = new Array<VariantPropType>();

export type Plasmic_404__ArgsType = {
  navbar?: React.ReactNode;
  banner?: React.ReactNode;
  footer?: React.ReactNode;
  ctaOfertas?: React.ReactNode;
  ctaConoceMas?: React.ReactNode;
};

type ArgPropType = keyof Plasmic_404__ArgsType;
export const Plasmic_404__ArgProps = new Array<ArgPropType>(
  "navbar",
  "banner",
  "footer",
  "ctaOfertas",
  "ctaConoceMas"
);

export type Plasmic_404__OverridesType = {
  root?: p.Flex<"div">;
  content404?: p.Flex<"div">;
};

export interface Default_404Props {}

function Plasmic_404__RenderFunc(props: {
  variants: Plasmic_404__VariantsArgs;
  args: Plasmic_404__ArgsType;
  overrides: Plasmic_404__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2SafZfzx0FlS7()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__dAEh)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <NavBar
                  className={classNames("__wab_instance", sty.navBar__rS3D)}
                  links={
                    <React.Fragment>
                      <LinkJr2
                        className={classNames(
                          "__wab_instance",
                          sty.linkJr2__e34T2
                        )}
                        color={"white" as const}
                      />

                      <LinkJr2
                        className={classNames(
                          "__wab_instance",
                          sty.linkJr2__cmrP5
                        )}
                        color={"white" as const}
                        label={"Ofertas"}
                      />

                      <LinkJr2
                        className={classNames(
                          "__wab_instance",
                          sty.linkJr2___3EUMr
                        )}
                        color={"white" as const}
                        label={"Empresas"}
                      />

                      <LinkJr2
                        className={classNames(
                          "__wab_instance",
                          sty.linkJr2__hzgqn
                        )}
                        color={"white" as const}
                        label={"Formación gratuita"}
                      />
                    </React.Fragment>
                  }
                  menuButton={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__fQ095
                      )}
                      color={[]}
                      label={"Únete a JobRun"}
                      menu={"white" as const}
                    />
                  }
                  navLogo={
                    <Logo
                      className={classNames("__wab_instance", sty.logo___4Mwis)}
                      logo={"complexWhite" as const}
                    />
                  }
                  page={"detail" as const}
                />
              ),

              value: args.navbar
            })}
          </div>

          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"content404"}
              data-plasmic-override={overrides.content404}
              hasGap={true}
              className={classNames(projectcss.all, sty.content404)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__klEoW)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__tlSBx)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "laptopM")
                      ? ("auto" as const)
                      : ("410px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("190px" as const)
                      : hasVariant(globalVariants, "screen", "laptopM")
                      ? ("293px" as const)
                      : ("342px" as const)
                  }
                  loader={"plasmic"}
                  loading={"lazy" as const}
                  src={{
                    src: "https://site-assets.plasmic.app/c34ed7bccd5223293ff674c3e015b54d.svg",
                    fullWidth: 126,
                    fullHeight: 150,
                    aspectRatio: 0.836983
                  }}
                />

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__w6Ozy)}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__btdB1)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__muKoQ
                        )}
                      >
                        {"Houston tenemos un problema"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dctFi
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "No hemos podido encontrar la página que estás buscando pero te ofrecemos algunas recomendaciones. "
                          : "No hemos podido encontrar la página que estás buscando \npero te ofrecemos algunas recomendaciones. "}
                      </div>
                    </p.Stack>
                  ) : null}
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wXrYt)}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__ifgqF
                            )}
                            color={["gradientStroke"]}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__wzbgA
                                )}
                              >
                                {"Ver ofertas"}
                              </div>
                            }
                            size={["medium"]}
                          />
                        ),

                        value: args.ctaOfertas
                      })}

                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__z9DN
                            )}
                            color={["gradientRound2"]}
                            label={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___0Er5O
                                )}
                              >
                                {"Conoce más sobre JobRun"}
                              </div>
                            }
                            size={[]}
                          />
                        ),

                        value: args.ctaConoceMas
                      })}
                    </p.Stack>
                  ) : null}
                </p.Stack>
              </p.Stack>

              {(
                hasVariant(globalVariants, "screen", "laptopM") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__cAulW)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__uKMoZ)}
                    displayHeight={"642px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"642px" as const}
                    loader={"plasmic"}
                    loading={"lazy" as const}
                    src={{
                      src: "https://site-assets.plasmic.app/661d7739218ec615b37b85065ad07173.svg",
                      fullWidth: 642,
                      fullHeight: 642,
                      aspectRatio: 1
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__crC5E)}
                    displayHeight={"304px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"304px" as const}
                    loader={"plasmic"}
                    loading={"lazy" as const}
                    src={{
                      src: "https://site-assets.plasmic.app/7c951c75e459dc24ebd9b812fa09f1fa.svg",
                      fullWidth: 304,
                      fullHeight: 304,
                      aspectRatio: 1
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__pRnoD)}
                    displayHeight={"297px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"297px" as const}
                    loader={"plasmic"}
                    loading={"lazy" as const}
                    src={{
                      src: "https://site-assets.plasmic.app/c3241a48da1ced5ded632b89b6797814.svg",
                      fullWidth: 297,
                      fullHeight: 297,
                      aspectRatio: 1
                    }}
                  />

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__oSqLo)}
                    displayHeight={"623px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"623px" as const}
                    loader={"plasmic"}
                    loading={"lazy" as const}
                    src={{
                      src: "https://site-assets.plasmic.app/2b5e6ff301af5c8b7704725f7a6ca556.svg",
                      fullWidth: 623,
                      fullHeight: 623,
                      aspectRatio: 1
                    }}
                  />
                </div>
              ) : null}
            </p.Stack>
          ) : null}
          {false
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <Banner
                    className={classNames("__wab_instance", sty.banner__zsBEn)}
                  />
                ),

                value: args.banner
              })
            : null}
          {p.renderPlasmicSlot({
            defaultContents: (
              <Footer
                className={classNames("__wab_instance", sty.footer___9Brn8)}
              />
            ),

            value: args.footer
          })}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "content404"],
  content404: ["content404"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  content404: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  Plasmic_404__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: Plasmic_404__VariantsArgs;
    args?: Plasmic_404__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<Plasmic_404__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<Plasmic_404__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: Plasmic_404__ArgProps,
          internalVariantPropNames: Plasmic_404__VariantProps
        }),
      [props, nodeName]
    );

    return Plasmic_404__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "Plasmic_404";
  } else {
    func.displayName = `Plasmic_404.${nodeName}`;
  }
  return func;
}

export const Plasmic_404 = Object.assign(
  // Top-level Plasmic_404 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    content404: makeNodeComponent("content404"),

    // Metadata about props expected for Plasmic_404
    internalVariantProps: Plasmic_404__VariantProps,
    internalArgProps: Plasmic_404__ArgProps
  }
);

export default Plasmic_404;
/* prettier-ignore-end */
