// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: upY9cnzMG3kZgeoF6ecCnw
// Component: HyiTRqmvoZE
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import OfferCard from "../../OfferCard"; // plasmic-import: j3ZEEkH_dZ/component
import Tag from "../../Tag"; // plasmic-import: y2UxC8Idw2/component
import OfferCardDetailsItem from "../../OfferCardDetailsItem"; // plasmic-import: E8-Ct61FHc/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_job_run.module.css"; // plasmic-import: upY9cnzMG3kZgeoF6ecCnw/projectcss
import sty from "./PlasmicOfferGrid.module.css"; // plasmic-import: HyiTRqmvoZE/css

import Vector10Icon from "./icons/PlasmicIcon__Vector10"; // plasmic-import: m0MmFEQ7ZK/icon

export type PlasmicOfferGrid__VariantMembers = {};

export type PlasmicOfferGrid__VariantsArgs = {};
type VariantPropType = keyof PlasmicOfferGrid__VariantsArgs;
export const PlasmicOfferGrid__VariantProps = new Array<VariantPropType>();

export type PlasmicOfferGrid__ArgsType = {
  offerContent?: React.ReactNode;
};

type ArgPropType = keyof PlasmicOfferGrid__ArgsType;
export const PlasmicOfferGrid__ArgProps = new Array<ArgPropType>(
  "offerContent"
);

export type PlasmicOfferGrid__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultOfferGridProps {
  offerContent?: React.ReactNode;
  className?: string;
}

function PlasmicOfferGrid__RenderFunc(props: {
  variants: PlasmicOfferGrid__VariantsArgs;
  args: PlasmicOfferGrid__ArgsType;
  overrides: PlasmicOfferGrid__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <React.Fragment>
            <OfferCard
              className={classNames("__wab_instance", sty.offerCard__bpv72)}
            />

            <OfferCard
              className={classNames("__wab_instance", sty.offerCard__kbZv4)}
            />

            <OfferCard
              className={classNames("__wab_instance", sty.offerCard__gsY5)}
            />

            <OfferCard
              className={classNames("__wab_instance", sty.offerCard___1PZoE)}
            />

            <OfferCard
              className={classNames("__wab_instance", sty.offerCard__sfmUy)}
            />

            {true ? (
              <OfferCard
                className={classNames("__wab_instance", sty.offerCard__wiMI)}
              />
            ) : null}
          </React.Fragment>
        ),
        value: args.offerContent
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOfferGrid__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOfferGrid__VariantsArgs;
    args?: PlasmicOfferGrid__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOfferGrid__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOfferGrid__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicOfferGrid__ArgProps,
          internalVariantPropNames: PlasmicOfferGrid__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicOfferGrid__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOfferGrid";
  } else {
    func.displayName = `PlasmicOfferGrid.${nodeName}`;
  }
  return func;
}

export const PlasmicOfferGrid = Object.assign(
  // Top-level PlasmicOfferGrid renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicOfferGrid
    internalVariantProps: PlasmicOfferGrid__VariantProps,
    internalArgProps: PlasmicOfferGrid__ArgProps
  }
);

export default PlasmicOfferGrid;
/* prettier-ignore-end */
