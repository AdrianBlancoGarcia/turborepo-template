// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: upY9cnzMG3kZgeoF6ecCnw
// Component: Yg7kNNCv4J
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: GfUnvF4AzI/component
import Logo from "../../Logo"; // plasmic-import: EamO-yxXIE/component
import Button from "../../Button"; // plasmic-import: BnsO6Lq9gm/component
import LinkJr2 from "../../LinkJr2"; // plasmic-import: tsRi3ugy1sA/component
import Header from "../../Header"; // plasmic-import: 53Ko38uc5Yv/component
import FilterItems from "../../FilterItems"; // plasmic-import: x9QoXVx29j/component
import Heading from "../../Heading"; // plasmic-import: 8ez1zMXNia/component
import OfferCategory from "../../OfferCategory"; // plasmic-import: hCWJLkCV8Q/component
import OfferCategoryItem from "../../OfferCategoryItem"; // plasmic-import: dm1mZrQM9M/component
import Banner from "../../Banner"; // plasmic-import: CVyrqsg7IH/component
import Footer from "../../Footer"; // plasmic-import: JpAsUvUFqp/component

import { useScreenVariants as useScreenVariants_2SafZfzx0FlS7 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2SAFZfzx0FlS7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_job_run.module.css"; // plasmic-import: upY9cnzMG3kZgeoF6ecCnw/projectcss
import sty from "./PlasmicOfertas.module.css"; // plasmic-import: Yg7kNNCv4J/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: -Kyqm1yXpr_/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: -bUtD9hB_g5/icon
import FilterIconIcon from "./icons/PlasmicIcon__FilterIcon"; // plasmic-import: -GAFpvgMLj/icon
import Vector6Icon from "./icons/PlasmicIcon__Vector6"; // plasmic-import: Gbkvuahq9N/icon
import Vector7Icon from "./icons/PlasmicIcon__Vector7"; // plasmic-import: 1KVijtEtSK/icon
import Vector8Icon from "./icons/PlasmicIcon__Vector8"; // plasmic-import: e2hxgpzMOc/icon

export type PlasmicOfertas__VariantMembers = {};

export type PlasmicOfertas__VariantsArgs = {};
type VariantPropType = keyof PlasmicOfertas__VariantsArgs;
export const PlasmicOfertas__VariantProps = new Array<VariantPropType>();

export type PlasmicOfertas__ArgsType = {
  activeOffers?: React.ReactNode;
  headeroffers?: React.ReactNode;
  filterButton?: React.ReactNode;
  offerCategory?: React.ReactNode;
  offerContainer?: React.ReactNode;
  banner?: React.ReactNode;
  footer?: React.ReactNode;
  navbar?: React.ReactNode;
  heading?: React.ReactNode;
};

type ArgPropType = keyof PlasmicOfertas__ArgsType;
export const PlasmicOfertas__ArgProps = new Array<ArgPropType>(
  "activeOffers",
  "headeroffers",
  "filterButton",
  "offerCategory",
  "offerContainer",
  "banner",
  "footer",
  "navbar",
  "heading"
);

export type PlasmicOfertas__OverridesType = {
  root?: p.Flex<"div">;
  heading?: p.Flex<typeof Heading>;
  text?: p.Flex<"div">;
};

export interface DefaultOfertasProps {}

function PlasmicOfertas__RenderFunc(props: {
  variants: PlasmicOfertas__VariantsArgs;
  args: PlasmicOfertas__ArgsType;
  overrides: PlasmicOfertas__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2SafZfzx0FlS7()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox___1L3Md)}>
              <div className={classNames(projectcss.all, sty.freeBox__hBfAl)}>
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <NavBar
                      className={classNames("__wab_instance", sty.navBar__d60J)}
                      menuButton={
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__ljaXf
                          )}
                          color={[]}
                          label={"Únete a JobRun"}
                          menu={"white" as const}
                        />
                      }
                      navLogo={
                        <Logo
                          className={classNames(
                            "__wab_instance",
                            sty.logo__ppGy7
                          )}
                          logo={"complexWhite" as const}
                        />
                      }
                      page={"detail" as const}
                    />
                  ),

                  value: args.navbar
                })}
              </div>

              {(hasVariant(globalVariants, "screen", "tablet") ? false : true)
                ? p.renderPlasmicSlot({
                    defaultContents: (
                      <Header
                        className={classNames(
                          "__wab_instance",
                          sty.header__i2Yjn
                        )}
                        ctaPublish3={
                          true ? (
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__oqI1P
                              )}
                              color={["yellow"]}
                              label={"Publicar oferta"}
                              size={["small"]}
                            />
                          ) : null
                        }
                        navLogo={
                          <Logo
                            className={classNames(
                              "__wab_instance",
                              sty.logo__pzCeE
                            )}
                            logo={"complexWhite" as const}
                          />
                        }
                      />
                    ),

                    value: args.headeroffers
                  })
                : null}
            </div>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__eejTn)}
            >
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__rZrX5)}>
                  {p.renderPlasmicSlot({
                    defaultContents:
                      "Echa un vistazo a estas ofertas de empleo:",
                    value: args.heading,
                    className: classNames(sty.slotTargetHeading)
                  })}
                </div>
              ) : null}

              <Heading
                data-plasmic-name={"heading"}
                data-plasmic-override={overrides.heading}
                className={classNames("__wab_instance", sty.heading)}
              />

              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__nBStY)}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Categorías"}
                        </span>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Categorías"}
                        </span>
                      </React.Fragment>
                    )}
                  </div>

                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <OfferCategory
                        className={classNames(
                          "__wab_instance",
                          sty.offerCategory___1G7C7
                        )}
                      />
                    ),

                    value: args.offerCategory
                  })}
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__sGh8C)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__kKyYl)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__f2Ctc
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__df90
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: "124 Ofertas activas",
                            value: args.activeOffers,
                            className: classNames(sty.slotTargetActiveOffers)
                          })}

                          {(
                            hasVariant(globalVariants, "screen", "tablet")
                              ? true
                              : false
                          )
                            ? p.renderPlasmicSlot({
                                defaultContents: (
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__mLkq8
                                    )}
                                    icon={
                                      <FilterIconIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg___4Uwj2
                                        )}
                                        role={"img"}
                                      />
                                    }
                                    label={"Filtrar por"}
                                    showStartIcon={true}
                                  />
                                ),

                                value: args.filterButton
                              })
                            : null}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__djoK
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents: null,
                            value: args.offerContainer
                          })}
                        </div>
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
          {p.renderPlasmicSlot({
            defaultContents: (
              <Banner
                className={classNames("__wab_instance", sty.banner__fhHw)}
              />
            ),

            value: args.banner
          })}

          {p.renderPlasmicSlot({
            defaultContents: (
              <Footer
                className={classNames("__wab_instance", sty.footer__pczmF)}
              />
            ),

            value: args.footer
          })}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "heading", "text"],
  heading: ["heading"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  heading: typeof Heading;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOfertas__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOfertas__VariantsArgs;
    args?: PlasmicOfertas__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOfertas__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOfertas__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicOfertas__ArgProps,
          internalVariantPropNames: PlasmicOfertas__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicOfertas__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOfertas";
  } else {
    func.displayName = `PlasmicOfertas.${nodeName}`;
  }
  return func;
}

export const PlasmicOfertas = Object.assign(
  // Top-level PlasmicOfertas renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    heading: makeNodeComponent("heading"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicOfertas
    internalVariantProps: PlasmicOfertas__VariantProps,
    internalArgProps: PlasmicOfertas__ArgProps
  }
);

export default PlasmicOfertas;
/* prettier-ignore-end */
