// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: upY9cnzMG3kZgeoF6ecCnw
// Component: JpAsUvUFqp
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Logo from "../../Logo"; // plasmic-import: EamO-yxXIE/component
import LinkJr2 from "../../LinkJr2"; // plasmic-import: tsRi3ugy1sA/component

import { useScreenVariants as useScreenVariants_2SafZfzx0FlS7 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2SAFZfzx0FlS7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_job_run.module.css"; // plasmic-import: upY9cnzMG3kZgeoF6ecCnw/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: JpAsUvUFqp/css

import Vector6Icon from "./icons/PlasmicIcon__Vector6"; // plasmic-import: Gbkvuahq9N/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: -bUtD9hB_g5/icon
import Vector7Icon from "./icons/PlasmicIcon__Vector7"; // plasmic-import: 1KVijtEtSK/icon
import Vector8Icon from "./icons/PlasmicIcon__Vector8"; // plasmic-import: e2hxgpzMOc/icon

export type PlasmicFooter__VariantMembers = {};

export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {
  linksRrss?: React.ReactNode;
  linksPoliticas?: React.ReactNode;
  linksInteres?: React.ReactNode;
};

type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>(
  "linksRrss",
  "linksPoliticas",
  "linksInteres"
);

export type PlasmicFooter__OverridesType = {
  root?: p.Flex<"div">;
  logo?: p.Flex<typeof Logo>;
  buttonContent?: p.Flex<"div">;
  copyright?: p.Flex<"div">;
};

export interface DefaultFooterProps {
  linksRrss?: React.ReactNode;
  linksPoliticas?: React.ReactNode;
  linksInteres?: React.ReactNode;
  className?: string;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2SafZfzx0FlS7()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___6VMlk)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__wAP2)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__v1Yzy)}>
            <Logo
              data-plasmic-name={"logo"}
              data-plasmic-override={overrides.logo}
              className={classNames("__wab_instance", sty.logo)}
              logo={"simpleBlack" as const}
            />
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___67Eo)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zqhpj
              )}
            >
              {"Redes Sociales"}
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"buttonContent"}
              data-plasmic-override={overrides.buttonContent}
              hasGap={true}
              className={classNames(projectcss.all, sty.buttonContent)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__lSuhY)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <React.Fragment>
                        <LinkJr2
                          className={classNames(
                            "__wab_instance",
                            sty.linkJr2__ryFXj
                          )}
                          label={"LinkedIn"}
                          link={
                            "https://www.linkedin.com/company/jobrundev" as const
                          }
                          showStartIcon={true}
                          size={"minimal" as const}
                          startIcon={
                            <Vector6Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__t658E
                              )}
                              role={"img"}
                            />
                          }
                        />

                        <LinkJr2
                          className={classNames(
                            "__wab_instance",
                            sty.linkJr2__kvL
                          )}
                          label={"Twitter"}
                          link={"https://twitter.com/JobRun_Dev" as const}
                          showStartIcon={true}
                          size={"minimal" as const}
                          startIcon={
                            <Vector7Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__f40Jv
                              )}
                              role={"img"}
                            />
                          }
                        />

                        <LinkJr2
                          className={classNames(
                            "__wab_instance",
                            sty.linkJr2__lCfZ
                          )}
                          label={"Instagram"}
                          link={"https://www.instagram.com/jobrundev/" as const}
                          showStartIcon={true}
                          size={"minimal" as const}
                          startIcon={
                            <Vector8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__eJmev
                              )}
                              role={"img"}
                            />
                          }
                        />
                      </React.Fragment>
                    ),
                    value: args.linksRrss
                  })}
                </p.Stack>
              ) : null}
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___2VJql)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kIbud
              )}
            >
              {"Políticas"}
            </div>

            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fKoIy)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <React.Fragment>
                      <LinkJr2
                        className={classNames(
                          "__wab_instance",
                          sty.linkJr2__rcpYf
                        )}
                        label={"Política de cookies"}
                        size={"minimal" as const}
                        startIcon={
                          <Vector6Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__pZkP7
                            )}
                            role={"img"}
                          />
                        }
                      />

                      <LinkJr2
                        className={classNames(
                          "__wab_instance",
                          sty.linkJr2__axU7P
                        )}
                        label={"Política de privacidad"}
                        size={"minimal" as const}
                        startIcon={
                          <Vector6Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__fheAr
                            )}
                            role={"img"}
                          />
                        }
                      />

                      <LinkJr2
                        className={classNames(
                          "__wab_instance",
                          sty.linkJr2__r4H0I
                        )}
                        label={"Términos y condiciones"}
                        size={"minimal" as const}
                        startIcon={
                          <Vector6Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___2KCub
                            )}
                            role={"img"}
                          />
                        }
                      />
                    </React.Fragment>
                  ),
                  value: args.linksPoliticas
                })}
              </p.Stack>
            ) : null}
          </p.Stack>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nKmLq)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mnikf
                )}
              >
                {"Enlaces de interés"}
              </div>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__aBp8M)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <React.Fragment>
                        <LinkJr2
                          className={classNames(
                            "__wab_instance",
                            sty.linkJr2___8BwG3
                          )}
                          label={"Empresas"}
                          size={"minimal" as const}
                          startIcon={
                            <Vector6Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__tKjTv
                              )}
                              role={"img"}
                            />
                          }
                        />

                        <LinkJr2
                          className={classNames(
                            "__wab_instance",
                            sty.linkJr2__m4PB1
                          )}
                          label={"Campus virtual"}
                          link={"https://campus.open-bootcamp.com/" as const}
                          size={"minimal" as const}
                          startIcon={
                            <Vector6Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__jVtGh
                              )}
                              role={"img"}
                            />
                          }
                        />
                      </React.Fragment>
                    ),
                    value: args.linksInteres
                  })}
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nrwbE)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gBAu
                )}
              >
                {"Recursos"}
              </div>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__c4WxQ)}
                >
                  <LinkJr2
                    className={classNames(
                      "__wab_instance",
                      sty.linkJr2___1ELop
                    )}
                    label={"Foro"}
                    size={"minimal" as const}
                    startIcon={
                      <Vector6Icon
                        className={classNames(projectcss.all, sty.svg__xt9Z7)}
                        role={"img"}
                      />
                    }
                  />

                  <LinkJr2
                    className={classNames("__wab_instance", sty.linkJr2__z1Yxk)}
                    label={"FaQ"}
                    size={"minimal" as const}
                    startIcon={
                      <Vector6Icon
                        className={classNames(projectcss.all, sty.svg__nfzUj)}
                        role={"img"}
                      />
                    }
                  />
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__uBgv1)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oizcI
                )}
              >
                {"Explora"}
              </div>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hd6J)}
                >
                  <LinkJr2
                    className={classNames("__wab_instance", sty.linkJr2__qlLW)}
                    label={"Acceso a campus"}
                    size={"minimal" as const}
                    startIcon={
                      <Vector6Icon
                        className={classNames(projectcss.all, sty.svg__h20KF)}
                        role={"img"}
                      />
                    }
                  />

                  <LinkJr2
                    className={classNames("__wab_instance", sty.linkJr2__utIw9)}
                    label={"Cursos"}
                    size={"minimal" as const}
                    startIcon={
                      <Vector6Icon
                        className={classNames(projectcss.all, sty.svg__t1Cnh)}
                        role={"img"}
                      />
                    }
                  />
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
        </p.Stack>

        <div
          data-plasmic-name={"copyright"}
          data-plasmic-override={overrides.copyright}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.copyright
          )}
        >
          {"© 2022 JobRun, OpenBootcamp. Todos los derechos reservados."}
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "logo", "buttonContent", "copyright"],
  logo: ["logo"],
  buttonContent: ["buttonContent"],
  copyright: ["copyright"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  logo: typeof Logo;
  buttonContent: "div";
  copyright: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    buttonContent: makeNodeComponent("buttonContent"),
    copyright: makeNodeComponent("copyright"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
