// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: upY9cnzMG3kZgeoF6ecCnw
// Component: h8MoqDT-hB
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: GfUnvF4AzI/component
import LinkJr2 from "../../LinkJr2"; // plasmic-import: tsRi3ugy1sA/component
import Button from "../../Button"; // plasmic-import: BnsO6Lq9gm/component
import Logo from "../../Logo"; // plasmic-import: EamO-yxXIE/component
import Breadcrumb from "../../Breadcrumb"; // plasmic-import: 7UcG5nMlKQ/component
import BreadcrumbItem from "../../BreadcrumbItem"; // plasmic-import: A_6EkRxcWe/component
import OfferAdvantages from "../../OfferAdvantages"; // plasmic-import: -ZrfL2sWaPT/component
import AdvantageItem from "../../AdvantageItem"; // plasmic-import: WHnW_6v_RG/component
import OfferRequirements from "../../OfferRequirements"; // plasmic-import: tbl8jcztgh/component
import ItemBadge from "../../ItemBadge"; // plasmic-import: qxyxLFpvV2/component
import CompanyDetails from "../../CompanyDetails"; // plasmic-import: Ru-AfF8KEe4/component
import ValueItem from "../../ValueItem"; // plasmic-import: sij89BGYq6/component
import CompanyLink2 from "../../CompanyLink2"; // plasmic-import: DqqFqbcMQFE/component
import RelatedOffers from "../../RelatedOffers"; // plasmic-import: F-xRm26zTCA/component
import OfferCard from "../../OfferCard"; // plasmic-import: j3ZEEkH_dZ/component
import Tag from "../../Tag"; // plasmic-import: y2UxC8Idw2/component
import OfferCardDetailsItem from "../../OfferCardDetailsItem"; // plasmic-import: E8-Ct61FHc/component
import Banner from "../../Banner"; // plasmic-import: CVyrqsg7IH/component
import Footer from "../../Footer"; // plasmic-import: JpAsUvUFqp/component

import { useScreenVariants as useScreenVariants_2SafZfzx0FlS7 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2SAFZfzx0FlS7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_job_run.module.css"; // plasmic-import: upY9cnzMG3kZgeoF6ecCnw/projectcss
import sty from "./PlasmicDetalleOferta.module.css"; // plasmic-import: h8MoqDT-hB/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: -Kyqm1yXpr_/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: -bUtD9hB_g5/icon
import Icon18Icon from "./icons/PlasmicIcon__Icon18"; // plasmic-import: urvAxVyA05/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: aq08-63-_g/icon
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: f8kb5YmyLe/icon
import Vector10Icon from "./icons/PlasmicIcon__Vector10"; // plasmic-import: m0MmFEQ7ZK/icon
import Vector6Icon from "./icons/PlasmicIcon__Vector6"; // plasmic-import: Gbkvuahq9N/icon
import Vector7Icon from "./icons/PlasmicIcon__Vector7"; // plasmic-import: 1KVijtEtSK/icon
import Vector8Icon from "./icons/PlasmicIcon__Vector8"; // plasmic-import: e2hxgpzMOc/icon

export type PlasmicDetalleOferta__VariantMembers = {};

export type PlasmicDetalleOferta__VariantsArgs = {};
type VariantPropType = keyof PlasmicDetalleOferta__VariantsArgs;
export const PlasmicDetalleOferta__VariantProps = new Array<VariantPropType>();

export type PlasmicDetalleOferta__ArgsType = {
  offerImg?: React.ReactNode;
  offerTitle?: React.ReactNode;
  detailRemote?: React.ReactNode;
  detailJornada?: React.ReactNode;
  detailSalary?: React.ReactNode;
  companyName?: React.ReactNode;
  flagIcon?: React.ReactNode;
  location?: React.ReactNode;
  companyImg?: React.ReactNode;
  numEmpleados?: React.ReactNode;
  companyFlagIcon?: React.ReactNode;
  companyLocation?: React.ReactNode;
  companyName2?: React.ReactNode;
  companyDescription?: React.ReactNode;
  requirementsContet?: React.ReactNode;
  offerAdvantages?: React.ReactNode;
  offerDescription?: React.ReactNode;
  companyDetails?: React.ReactNode;
  buttons?: React.ReactNode;
  buttonsBottom?: React.ReactNode;
  companyButton?: React.ReactNode;
  relatedOffers?: React.ReactNode;
  breadcrumb?: React.ReactNode;
  banner?: React.ReactNode;
  navbar?: React.ReactNode;
  footer?: React.ReactNode;
};

type ArgPropType = keyof PlasmicDetalleOferta__ArgsType;
export const PlasmicDetalleOferta__ArgProps = new Array<ArgPropType>(
  "offerImg",
  "offerTitle",
  "detailRemote",
  "detailJornada",
  "detailSalary",
  "companyName",
  "flagIcon",
  "location",
  "companyImg",
  "numEmpleados",
  "companyFlagIcon",
  "companyLocation",
  "companyName2",
  "companyDescription",
  "requirementsContet",
  "offerAdvantages",
  "offerDescription",
  "companyDetails",
  "buttons",
  "buttonsBottom",
  "companyButton",
  "relatedOffers",
  "breadcrumb",
  "banner",
  "navbar",
  "footer"
);

export type PlasmicDetalleOferta__OverridesType = {
  root?: p.Flex<"div">;
  ofertas?: p.Flex<"div">;
  oferta?: p.Flex<"div">;
  descripcionOferta?: p.Flex<"div">;
  pageTitleDetails?: p.Flex<"div">;
  offerTitleBox?: p.Flex<"div">;
  titleBox?: p.Flex<"div">;
  offerData?: p.Flex<"div">;
  cardDetailItem?: p.Flex<"div">;
  buttons?: p.Flex<"div">;
  offerDescription?: p.Flex<"div">;
  summary?: p.Flex<"div">;
  row?: p.Flex<"div">;
  row2?: p.Flex<"div">;
  row3?: p.Flex<"div">;
  requisitosOferta?: p.Flex<"div">;
  buttonsBottom?: p.Flex<"div">;
  acercaEmpresa?: p.Flex<"div">;
  company?: p.Flex<"div">;
  offerCompany?: p.Flex<"div">;
  companyDescription?: p.Flex<"div">;
  companyTitleBox?: p.Flex<"div">;
  titleBox4?: p.Flex<"div">;
  companyData?: p.Flex<"div">;
  cardDetailItem3?: p.Flex<"div">;
  companyButton?: p.Flex<"div">;
};

export interface DefaultDetalleOfertaProps {}

function PlasmicDetalleOferta__RenderFunc(props: {
  variants: PlasmicDetalleOferta__VariantsArgs;
  args: PlasmicDetalleOferta__ArgsType;
  overrides: PlasmicDetalleOferta__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2SafZfzx0FlS7()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__vIjL8)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <NavBar
                  className={classNames("__wab_instance", sty.navBar__xdCX)}
                  menuButton={
                    <Button
                      className={classNames("__wab_instance", sty.button__c7Eb)}
                      color={[]}
                      label={"Ãšnete a JobRun"}
                      menu={"black" as const}
                    />
                  }
                  navLogo={
                    <Logo
                      className={classNames("__wab_instance", sty.logo__wcQh2)}
                      logo={"complexWhite" as const}
                    />
                  }
                  page={"detail" as const}
                />
              ),

              value: args.navbar
            })}
          </div>

          <div
            data-plasmic-name={"ofertas"}
            data-plasmic-override={overrides.ofertas}
            className={classNames(projectcss.all, sty.ofertas)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__zPtZj)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"oferta"}
                data-plasmic-override={overrides.oferta}
                hasGap={true}
                className={classNames(projectcss.all, sty.oferta)}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"descripcionOferta"}
                    data-plasmic-override={overrides.descripcionOferta}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      sty.descripcionOferta
                    )}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <Breadcrumb
                          className={classNames(
                            "__wab_instance",
                            sty.breadcrumb__aemuB
                          )}
                        />
                      ),

                      value: args.breadcrumb
                    })}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__l1El)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"pageTitleDetails"}
                        data-plasmic-override={overrides.pageTitleDetails}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.pageTitleDetails
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"offerTitleBox"}
                          data-plasmic-override={overrides.offerTitleBox}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.offerTitleBox
                          )}
                        >
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ih0L9
                              )}
                            >
                              {p.renderPlasmicSlot({
                                defaultContents: (
                                  <p.PlasmicImg
                                    alt={""}
                                    className={classNames(sty.img__iaoK8)}
                                    displayHeight={"82px" as const}
                                    displayMaxHeight={"none" as const}
                                    displayMaxWidth={"100%" as const}
                                    displayMinHeight={"0" as const}
                                    displayMinWidth={"0" as const}
                                    displayWidth={"82px" as const}
                                    loader={"plasmic"}
                                    loading={"lazy" as const}
                                  />
                                ),

                                value: args.offerImg
                              })}
                            </div>
                          ) : null}

                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"titleBox"}
                            data-plasmic-override={overrides.titleBox}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.titleBox)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__aKmOz
                              )}
                            >
                              {p.renderPlasmicSlot({
                                defaultContents: "Title",
                                value: args.offerTitle,
                                className: classNames(sty.slotTargetOfferTitle)
                              })}
                            </div>

                            <p.Stack
                              as={"div"}
                              data-plasmic-name={"offerData"}
                              data-plasmic-override={overrides.offerData}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.offerData
                              )}
                            >
                              {p.renderPlasmicSlot({
                                defaultContents: "CompanyName",
                                value: args.companyName,
                                className: classNames(sty.slotTargetCompanyName)
                              })}

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ry0Ta
                                )}
                              >
                                {"|"}
                              </div>

                              <p.Stack
                                as={"div"}
                                data-plasmic-name={"cardDetailItem"}
                                data-plasmic-override={overrides.cardDetailItem}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.cardDetailItem
                                )}
                              >
                                {p.renderPlasmicSlot({
                                  defaultContents: (
                                    <svg
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__gthAi
                                      )}
                                      role={"img"}
                                    />
                                  ),

                                  value: args.flagIcon
                                })}

                                {p.renderPlasmicSlot({
                                  defaultContents: (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__xu6Rl
                                      )}
                                    >
                                      {"Location"}
                                    </div>
                                  ),

                                  value: args.location,
                                  className: classNames(sty.slotTargetLocation)
                                })}
                              </p.Stack>
                            </p.Stack>
                          </p.Stack>
                        </p.Stack>

                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"buttons"}
                            data-plasmic-override={overrides.buttons}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.buttons)}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: (
                                <React.Fragment>
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__xj7Vo
                                    )}
                                    color={["grey"]}
                                    label={"Label"}
                                    size={[]}
                                  />

                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__m2CqF
                                    )}
                                    color={["purple"]}
                                    label={"Label"}
                                    size={[]}
                                  />
                                </React.Fragment>
                              ),
                              value: args.buttons
                            })}
                          </p.Stack>
                        ) : null}
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"offerDescription"}
                        data-plasmic-override={overrides.offerDescription}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.offerDescription
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"summary"}
                          data-plasmic-override={overrides.summary}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.summary)}
                        >
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"row"}
                            data-plasmic-override={overrides.row}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.row)}
                          >
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ek3ZZ
                              )}
                            >
                              <Icon18Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___1Mnkw
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___4H1Ux
                                )}
                              >
                                {"Presencial / remoto:"}
                              </div>
                            </p.Stack>

                            {p.renderPlasmicSlot({
                              defaultContents: "En remoto",
                              value: args.detailRemote,
                              className: classNames(sty.slotTargetDetailRemote)
                            })}
                          </p.Stack>

                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"row2"}
                            data-plasmic-override={overrides.row2}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.row2)}
                          >
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__eVlP6
                              )}
                            >
                              <Icon19Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__tyhTe
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__bNlVd
                                )}
                              >
                                {"Tipo de jornada:"}
                              </div>
                            </p.Stack>

                            {p.renderPlasmicSlot({
                              defaultContents: "Jornada Completa",
                              value: args.detailJornada,
                              className: classNames(sty.slotTargetDetailJornada)
                            })}
                          </p.Stack>

                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"row3"}
                            data-plasmic-override={overrides.row3}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.row3)}
                          >
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__n7Vc
                              )}
                            >
                              <Icon20Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__smnpF
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qdLfy
                                )}
                              >
                                {"Rango Salarial:"}
                              </div>
                            </p.Stack>

                            {p.renderPlasmicSlot({
                              defaultContents: "30.000 - 35.000â‚¬ / AÃ±o",
                              value: args.detailSalary,
                              className: classNames(sty.slotTargetDetailSalary)
                            })}
                          </p.Stack>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jixU7
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mM0C
                            )}
                          >
                            {"DescripciÃ³n del puesto"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__f2Q4G
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents:
                                "En este puesto de trabajo aprenderÃ¡s a manejar la plataforma de colaboraciÃ³n empresarial asÃ­ como sus productos y elementos de software.\n\nPodrÃ¡s crear sitios de hosting web donde se acceda a espacios de trabajo compartido, almacenando informaciÃ³n y documentos, asÃ­ como alojar blogs o wikis.En este curso aprenderÃ¡s a manejar la plataforma de colaboraciÃ³n empresarial asÃ­ como sus productos y elementos de software.",
                              value: args.offerDescription,
                              className: classNames(
                                sty.slotTargetOfferDescription
                              )
                            })}
                          </div>
                        </p.Stack>

                        {p.renderPlasmicSlot({
                          defaultContents: (
                            <OfferAdvantages
                              className={classNames(
                                "__wab_instance",
                                sty.offerAdvantages___7Cl7X
                              )}
                            />
                          ),

                          value: args.offerAdvantages
                        })}
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                ) : null}

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"requisitosOferta"}
                  data-plasmic-override={overrides.requisitosOferta}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.requisitosOferta)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__p5V9
                    )}
                  >
                    {"Requisitos de la oferta"}
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__uQjor)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <React.Fragment>
                          <OfferRequirements
                            className={classNames(
                              "__wab_instance",
                              sty.offerRequirements__spya1
                            )}
                            type={"skills" as const}
                          />

                          <OfferRequirements
                            className={classNames(
                              "__wab_instance",
                              sty.offerRequirements__dsGzf
                            )}
                            type={"languages" as const}
                          />

                          <OfferRequirements
                            className={classNames(
                              "__wab_instance",
                              sty.offerRequirements__ibXwt
                            )}
                            type={"others" as const}
                          />
                        </React.Fragment>
                      ),
                      value: args.requirementsContet
                    })}
                  </p.Stack>
                </p.Stack>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"buttonsBottom"}
                    data-plasmic-override={overrides.buttonsBottom}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.buttonsBottom)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <React.Fragment>
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__hoUC
                            )}
                            color={["grey"]}
                            label={"Label"}
                            size={[]}
                          />

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__ovdX
                            )}
                            color={["purple"]}
                            label={"Label"}
                            size={[]}
                          />
                        </React.Fragment>
                      ),
                      value: args.buttonsBottom
                    })}
                  </p.Stack>
                ) : null}
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"acercaEmpresa"}
                data-plasmic-override={overrides.acercaEmpresa}
                hasGap={true}
                className={classNames(projectcss.all, sty.acercaEmpresa)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"company"}
                  data-plasmic-override={overrides.company}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.company)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yokaT
                    )}
                  >
                    {"Acerca de la empresa"}
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"offerCompany"}
                    data-plasmic-override={overrides.offerCompany}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.offerCompany)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"companyDescription"}
                      data-plasmic-override={overrides.companyDescription}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.companyDescription
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mp24U
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"companyTitleBox"}
                          data-plasmic-override={overrides.companyTitleBox}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.companyTitleBox
                          )}
                        >
                          {true ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__tycIs
                              )}
                            >
                              {p.renderPlasmicSlot({
                                defaultContents: (
                                  <p.PlasmicImg
                                    alt={""}
                                    className={classNames(sty.img__eBtU)}
                                    displayHeight={"62px" as const}
                                    displayMaxHeight={"none" as const}
                                    displayMaxWidth={"100%" as const}
                                    displayMinHeight={"0" as const}
                                    displayMinWidth={"0" as const}
                                    displayWidth={"62px" as const}
                                    loader={"plasmic"}
                                    loading={"lazy" as const}
                                  />
                                ),

                                value: args.companyImg
                              })}
                            </div>
                          ) : null}

                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"titleBox4"}
                            data-plasmic-override={overrides.titleBox4}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.titleBox4
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ll9E1
                              )}
                            >
                              {p.renderPlasmicSlot({
                                defaultContents: "CompanyName",
                                value: args.companyName2,
                                className: classNames(
                                  sty.slotTargetCompanyName2
                                )
                              })}
                            </div>

                            <p.Stack
                              as={"div"}
                              data-plasmic-name={"companyData"}
                              data-plasmic-override={overrides.companyData}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.companyData
                              )}
                            >
                              {p.renderPlasmicSlot({
                                defaultContents: "NÂº Empleados",
                                value: args.numEmpleados,
                                className: classNames(
                                  sty.slotTargetNumEmpleados
                                )
                              })}

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___8SiIx
                                )}
                              >
                                {"|"}
                              </div>

                              <p.Stack
                                as={"div"}
                                data-plasmic-name={"cardDetailItem3"}
                                data-plasmic-override={
                                  overrides.cardDetailItem3
                                }
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.cardDetailItem3
                                )}
                              >
                                {p.renderPlasmicSlot({
                                  defaultContents: (
                                    <svg
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__nr9S3
                                      )}
                                      role={"img"}
                                    />
                                  ),

                                  value: args.companyFlagIcon
                                })}

                                {p.renderPlasmicSlot({
                                  defaultContents: (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__fiGYb
                                      )}
                                    >
                                      {"Location"}
                                    </div>
                                  ),

                                  value: args.companyLocation,
                                  className: classNames(
                                    sty.slotTargetCompanyLocation
                                  )
                                })}
                              </p.Stack>
                            </p.Stack>
                          </p.Stack>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"companyButton"}
                          data-plasmic-override={overrides.companyButton}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.companyButton
                          )}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : true
                          )
                            ? p.renderPlasmicSlot({
                                defaultContents: (
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__lxarB
                                    )}
                                    color={["black"]}
                                    size={["strech"]}
                                  />
                                ),

                                value: args.companyButton
                              })
                            : null}
                        </p.Stack>
                      </p.Stack>

                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__svRNx
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__l3Fkz
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents:
                                "En este puesto de trabajo aprenderÃ¡s a manejar la plataforma de colaboraciÃ³n empresarial asÃ­ como sus productos y elementos de software.\n\nPodrÃ¡s crear sitios de hosting web donde se acceda a espacios de trabajo compartido, almacenando informaciÃ³n y documentos, asÃ­ como alojar blogs o wikis.En este curso aprenderÃ¡s a manejar la plataforma de colaboraciÃ³n empresarial asÃ­ como sus productos y elementos de software.",
                              value: args.companyDescription,
                              className: classNames(
                                sty.slotTargetCompanyDescription
                              )
                            })}
                          </div>

                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__c3PFi
                              )}
                            >
                              {true
                                ? p.renderPlasmicSlot({
                                    defaultContents: (
                                      <React.Fragment>
                                        {true ? (
                                          <CompanyDetails
                                            className={classNames(
                                              "__wab_instance",
                                              sty.companyDetails__qm4K
                                            )}
                                            type={"valores" as const}
                                          />
                                        ) : null}

                                        <CompanyDetails
                                          className={classNames(
                                            "__wab_instance",
                                            sty.companyDetails__xxdzI
                                          )}
                                          type={"enlaces" as const}
                                        />
                                      </React.Fragment>
                                    ),
                                    value: args.companyDetails
                                  })
                                : null}
                            </p.Stack>
                          ) : null}
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  </p.Stack>
                </p.Stack>

                {p.renderPlasmicSlot({
                  defaultContents: (
                    <RelatedOffers
                      className={classNames(
                        "__wab_instance",
                        sty.relatedOffers__wN6A
                      )}
                    />
                  ),

                  value: args.relatedOffers
                })}
              </p.Stack>
            </p.Stack>
          </div>

          {p.renderPlasmicSlot({
            defaultContents: (
              <Banner
                className={classNames("__wab_instance", sty.banner___6Kuez)}
              />
            ),

            value: args.banner
          })}

          {p.renderPlasmicSlot({
            defaultContents: (
              <Footer
                className={classNames("__wab_instance", sty.footer__pFRg)}
                linksRrss={
                  <React.Fragment>
                    <LinkJr2
                      className={classNames(
                        "__wab_instance",
                        sty.linkJr2__x8Osp
                      )}
                      label={"LinkedIn"}
                      link={
                        "https://www.linkedin.com/company/jobrundev" as const
                      }
                      showStartIcon={true}
                      size={"minimal" as const}
                      startIcon={
                        <Vector6Icon
                          className={classNames(projectcss.all, sty.svg__y58ST)}
                          role={"img"}
                        />
                      }
                    />

                    <LinkJr2
                      className={classNames(
                        "__wab_instance",
                        sty.linkJr2__lx5R6
                      )}
                      label={"Twitter"}
                      link={"https://twitter.com/JobRun_Dev" as const}
                      showStartIcon={true}
                      size={"minimal" as const}
                      startIcon={
                        <Vector7Icon
                          className={classNames(projectcss.all, sty.svg__aHopg)}
                          role={"img"}
                        />
                      }
                    />

                    <LinkJr2
                      className={classNames(
                        "__wab_instance",
                        sty.linkJr2__zn4E8
                      )}
                      label={"Instagram"}
                      link={"https://www.instagram.com/jobrundev/" as const}
                      showStartIcon={true}
                      size={"minimal" as const}
                      startIcon={
                        <Vector8Icon
                          className={classNames(projectcss.all, sty.svg__zpdsf)}
                          role={"img"}
                        />
                      }
                    />
                  </React.Fragment>
                }
              />
            ),

            value: args.footer
          })}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "ofertas",
    "oferta",
    "descripcionOferta",
    "pageTitleDetails",
    "offerTitleBox",
    "titleBox",
    "offerData",
    "cardDetailItem",
    "buttons",
    "offerDescription",
    "summary",
    "row",
    "row2",
    "row3",
    "requisitosOferta",
    "buttonsBottom",
    "acercaEmpresa",
    "company",
    "offerCompany",
    "companyDescription",
    "companyTitleBox",
    "titleBox4",
    "companyData",
    "cardDetailItem3",
    "companyButton"
  ],
  ofertas: [
    "ofertas",
    "oferta",
    "descripcionOferta",
    "pageTitleDetails",
    "offerTitleBox",
    "titleBox",
    "offerData",
    "cardDetailItem",
    "buttons",
    "offerDescription",
    "summary",
    "row",
    "row2",
    "row3",
    "requisitosOferta",
    "buttonsBottom",
    "acercaEmpresa",
    "company",
    "offerCompany",
    "companyDescription",
    "companyTitleBox",
    "titleBox4",
    "companyData",
    "cardDetailItem3",
    "companyButton"
  ],
  oferta: [
    "oferta",
    "descripcionOferta",
    "pageTitleDetails",
    "offerTitleBox",
    "titleBox",
    "offerData",
    "cardDetailItem",
    "buttons",
    "offerDescription",
    "summary",
    "row",
    "row2",
    "row3",
    "requisitosOferta",
    "buttonsBottom"
  ],
  descripcionOferta: [
    "descripcionOferta",
    "pageTitleDetails",
    "offerTitleBox",
    "titleBox",
    "offerData",
    "cardDetailItem",
    "buttons",
    "offerDescription",
    "summary",
    "row",
    "row2",
    "row3"
  ],
  pageTitleDetails: [
    "pageTitleDetails",
    "offerTitleBox",
    "titleBox",
    "offerData",
    "cardDetailItem",
    "buttons"
  ],
  offerTitleBox: ["offerTitleBox", "titleBox", "offerData", "cardDetailItem"],
  titleBox: ["titleBox", "offerData", "cardDetailItem"],
  offerData: ["offerData", "cardDetailItem"],
  cardDetailItem: ["cardDetailItem"],
  buttons: ["buttons"],
  offerDescription: ["offerDescription", "summary", "row", "row2", "row3"],
  summary: ["summary", "row", "row2", "row3"],
  row: ["row"],
  row2: ["row2"],
  row3: ["row3"],
  requisitosOferta: ["requisitosOferta"],
  buttonsBottom: ["buttonsBottom"],
  acercaEmpresa: [
    "acercaEmpresa",
    "company",
    "offerCompany",
    "companyDescription",
    "companyTitleBox",
    "titleBox4",
    "companyData",
    "cardDetailItem3",
    "companyButton"
  ],
  company: [
    "company",
    "offerCompany",
    "companyDescription",
    "companyTitleBox",
    "titleBox4",
    "companyData",
    "cardDetailItem3",
    "companyButton"
  ],
  offerCompany: [
    "offerCompany",
    "companyDescription",
    "companyTitleBox",
    "titleBox4",
    "companyData",
    "cardDetailItem3",
    "companyButton"
  ],
  companyDescription: [
    "companyDescription",
    "companyTitleBox",
    "titleBox4",
    "companyData",
    "cardDetailItem3",
    "companyButton"
  ],
  companyTitleBox: [
    "companyTitleBox",
    "titleBox4",
    "companyData",
    "cardDetailItem3"
  ],
  titleBox4: ["titleBox4", "companyData", "cardDetailItem3"],
  companyData: ["companyData", "cardDetailItem3"],
  cardDetailItem3: ["cardDetailItem3"],
  companyButton: ["companyButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  ofertas: "div";
  oferta: "div";
  descripcionOferta: "div";
  pageTitleDetails: "div";
  offerTitleBox: "div";
  titleBox: "div";
  offerData: "div";
  cardDetailItem: "div";
  buttons: "div";
  offerDescription: "div";
  summary: "div";
  row: "div";
  row2: "div";
  row3: "div";
  requisitosOferta: "div";
  buttonsBottom: "div";
  acercaEmpresa: "div";
  company: "div";
  offerCompany: "div";
  companyDescription: "div";
  companyTitleBox: "div";
  titleBox4: "div";
  companyData: "div";
  cardDetailItem3: "div";
  companyButton: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDetalleOferta__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDetalleOferta__VariantsArgs;
    args?: PlasmicDetalleOferta__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDetalleOferta__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDetalleOferta__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDetalleOferta__ArgProps,
          internalVariantPropNames: PlasmicDetalleOferta__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicDetalleOferta__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDetalleOferta";
  } else {
    func.displayName = `PlasmicDetalleOferta.${nodeName}`;
  }
  return func;
}

export const PlasmicDetalleOferta = Object.assign(
  // Top-level PlasmicDetalleOferta renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    ofertas: makeNodeComponent("ofertas"),
    oferta: makeNodeComponent("oferta"),
    descripcionOferta: makeNodeComponent("descripcionOferta"),
    pageTitleDetails: makeNodeComponent("pageTitleDetails"),
    offerTitleBox: makeNodeComponent("offerTitleBox"),
    titleBox: makeNodeComponent("titleBox"),
    offerData: makeNodeComponent("offerData"),
    cardDetailItem: makeNodeComponent("cardDetailItem"),
    buttons: makeNodeComponent("buttons"),
    offerDescription: makeNodeComponent("offerDescription"),
    summary: makeNodeComponent("summary"),
    row: makeNodeComponent("row"),
    row2: makeNodeComponent("row2"),
    row3: makeNodeComponent("row3"),
    requisitosOferta: makeNodeComponent("requisitosOferta"),
    buttonsBottom: makeNodeComponent("buttonsBottom"),
    acercaEmpresa: makeNodeComponent("acercaEmpresa"),
    company: makeNodeComponent("company"),
    offerCompany: makeNodeComponent("offerCompany"),
    companyDescription: makeNodeComponent("companyDescription"),
    companyTitleBox: makeNodeComponent("companyTitleBox"),
    titleBox4: makeNodeComponent("titleBox4"),
    companyData: makeNodeComponent("companyData"),
    cardDetailItem3: makeNodeComponent("cardDetailItem3"),
    companyButton: makeNodeComponent("companyButton"),

    // Metadata about props expected for PlasmicDetalleOferta
    internalVariantProps: PlasmicDetalleOferta__VariantProps,
    internalArgProps: PlasmicDetalleOferta__ArgProps
  }
);

export default PlasmicDetalleOferta;
/* prettier-ignore-end */
