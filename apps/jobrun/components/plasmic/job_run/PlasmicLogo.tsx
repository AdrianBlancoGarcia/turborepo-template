// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: upY9cnzMG3kZgeoF6ecCnw
// Component: EamO-yxXIE
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_job_run.module.css"; // plasmic-import: upY9cnzMG3kZgeoF6ecCnw/projectcss
import sty from "./PlasmicLogo.module.css"; // plasmic-import: EamO-yxXIE/css

export type PlasmicLogo__VariantMembers = {
  logo:
    | "simpleBlack"
    | "complexBlack"
    | "icon"
    | "complexWhite"
    | "simpleWhite";
};

export type PlasmicLogo__VariantsArgs = {
  logo?: SingleChoiceArg<
    "simpleBlack" | "complexBlack" | "icon" | "complexWhite" | "simpleWhite"
  >;
};

type VariantPropType = keyof PlasmicLogo__VariantsArgs;
export const PlasmicLogo__VariantProps = new Array<VariantPropType>("logo");

export type PlasmicLogo__ArgsType = {};
type ArgPropType = keyof PlasmicLogo__ArgsType;
export const PlasmicLogo__ArgProps = new Array<ArgPropType>();

export type PlasmicLogo__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultLogoProps {
  logo?: SingleChoiceArg<
    "simpleBlack" | "complexBlack" | "icon" | "complexWhite" | "simpleWhite"
  >;
  className?: string;
}

function PlasmicLogo__RenderFunc(props: {
  variants: PlasmicLogo__VariantsArgs;
  args: PlasmicLogo__ArgsType;
  overrides: PlasmicLogo__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootlogo_complexBlack]: hasVariant(
            variants,
            "logo",
            "complexBlack"
          ),
          [sty.rootlogo_complexWhite]: hasVariant(
            variants,
            "logo",
            "complexWhite"
          ),
          [sty.rootlogo_icon]: hasVariant(variants, "logo", "icon"),
          [sty.rootlogo_simpleBlack]: hasVariant(
            variants,
            "logo",
            "simpleBlack"
          )
        }
      )}
    >
      {(
        hasVariant(variants, "logo", "simpleWhite")
          ? true
          : hasVariant(variants, "logo", "complexWhite")
          ? true
          : hasVariant(variants, "logo", "icon")
          ? true
          : hasVariant(variants, "logo", "simpleBlack")
          ? true
          : true
      ) ? (
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__e0OLq, {
            [sty.imglogo_complexBlack__e0OLqYyaZu]: hasVariant(
              variants,
              "logo",
              "complexBlack"
            ),
            [sty.imglogo_complexWhite__e0OLqDwN8]: hasVariant(
              variants,
              "logo",
              "complexWhite"
            ),
            [sty.imglogo_icon__e0OLqEoyDj]: hasVariant(
              variants,
              "logo",
              "icon"
            ),
            [sty.imglogo_simpleBlack__e0OLqPt5R]: hasVariant(
              variants,
              "logo",
              "simpleBlack"
            ),
            [sty.imglogo_simpleWhite__e0OLqsY8S]: hasVariant(
              variants,
              "logo",
              "simpleWhite"
            )
          })}
          displayHeight={"33px" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"300px" as const}
          loader={"plasmic"}
          loading={"lazy" as const}
          src={{
            src: "https://site-assets.plasmic.app/ebd0c26a444c97aa0350deacf1fc4705.svg",
            fullWidth: 300,
            fullHeight: 33,
            aspectRatio: 9.166667
          }}
        />
      ) : null}

      {(
        hasVariant(variants, "logo", "complexWhite")
          ? true
          : hasVariant(variants, "logo", "icon")
          ? true
          : hasVariant(variants, "logo", "simpleBlack")
          ? true
          : false
      ) ? (
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__y6Fgp, {
            [sty.imglogo_complexBlack__y6FgpYyaZu]: hasVariant(
              variants,
              "logo",
              "complexBlack"
            ),
            [sty.imglogo_complexWhite__y6FgpDwN8]: hasVariant(
              variants,
              "logo",
              "complexWhite"
            ),
            [sty.imglogo_icon__y6FgpEoyDj]: hasVariant(
              variants,
              "logo",
              "icon"
            ),
            [sty.imglogo_simpleBlack__y6FgpPt5R]: hasVariant(
              variants,
              "logo",
              "simpleBlack"
            )
          })}
          displayHeight={"28px" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"54px" as const}
          loader={"plasmic"}
          loading={"lazy" as const}
          src={{
            src: "https://site-assets.plasmic.app/727c99167df455ad64d8a8e936299c95.svg",
            fullWidth: 288,
            fullHeight: 150,
            aspectRatio: 1.916667
          }}
        />
      ) : null}

      {(
        hasVariant(variants, "logo", "icon")
          ? true
          : hasVariant(variants, "logo", "simpleBlack")
          ? true
          : false
      ) ? (
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__nzAtP, {
            [sty.imglogo_icon__nzAtPEoyDj]: hasVariant(
              variants,
              "logo",
              "icon"
            ),
            [sty.imglogo_simpleBlack__nzAtPpt5R]: hasVariant(
              variants,
              "logo",
              "simpleBlack"
            )
          })}
          displayHeight={"22.9px" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"124px" as const}
          loader={"plasmic"}
          loading={"lazy" as const}
          src={{
            src: "https://site-assets.plasmic.app/c4209a5c05c204aa61c8a6676023929f.svg",
            fullWidth: 300,
            fullHeight: 58,
            aspectRatio: 5.166667
          }}
        />
      ) : null}

      {(hasVariant(variants, "logo", "complexWhite") ? true : true) ? (
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__j07E2, {
            [sty.imglogo_complexWhite__j07E2DwN8]: hasVariant(
              variants,
              "logo",
              "complexWhite"
            )
          })}
          displayHeight={"33px" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"300px" as const}
          loader={"plasmic"}
          loading={"lazy" as const}
          src={{
            src: "https://site-assets.plasmic.app/daf5339694aa3840287dc19230c3e390.svg",
            fullWidth: 300,
            fullHeight: 33,
            aspectRatio: 9.166667
          }}
        />
      ) : null}

      {(
        hasVariant(variants, "logo", "simpleWhite")
          ? true
          : hasVariant(variants, "logo", "simpleBlack")
          ? true
          : false
      ) ? (
        <p.PlasmicImg
          alt={""}
          className={classNames(sty.img__dtuhO, {
            [sty.imglogo_simpleBlack__dtuhOpt5R]: hasVariant(
              variants,
              "logo",
              "simpleBlack"
            ),
            [sty.imglogo_simpleWhite__dtuhOsY8S]: hasVariant(
              variants,
              "logo",
              "simpleWhite"
            )
          })}
          displayHeight={"22.9px" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"124px" as const}
          loader={"plasmic"}
          loading={"lazy" as const}
          src={{
            src: "https://site-assets.plasmic.app/31b7ce051c812744c8ee022b723d29d9.svg",
            fullWidth: 300,
            fullHeight: 55,
            aspectRatio: 5.416667
          }}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogo__VariantsArgs;
    args?: PlasmicLogo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLogo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLogo__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLogo__ArgProps,
          internalVariantPropNames: PlasmicLogo__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLogo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogo";
  } else {
    func.displayName = `PlasmicLogo.${nodeName}`;
  }
  return func;
}

export const PlasmicLogo = Object.assign(
  // Top-level PlasmicLogo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicLogo
    internalVariantProps: PlasmicLogo__VariantProps,
    internalArgProps: PlasmicLogo__ArgProps
  }
);

export default PlasmicLogo;
/* prettier-ignore-end */
