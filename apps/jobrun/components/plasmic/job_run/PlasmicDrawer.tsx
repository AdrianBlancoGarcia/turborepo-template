// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: upY9cnzMG3kZgeoF6ecCnw
// Component: lJW-9hB9Eh
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: BnsO6Lq9gm/component
import Logo from "../../Logo"; // plasmic-import: EamO-yxXIE/component
import ToggleRemotoFiltros from "../../ToggleRemotoFiltros"; // plasmic-import: bX4NHpd_b5/component

import { useScreenVariants as useScreenVariants_2SafZfzx0FlS7 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2SAFZfzx0FlS7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_job_run.module.css"; // plasmic-import: upY9cnzMG3kZgeoF6ecCnw/projectcss
import sty from "./PlasmicDrawer.module.css"; // plasmic-import: lJW-9hB9Eh/css

export type PlasmicDrawer__VariantMembers = {
  element: "menu" | "filtros";
};

export type PlasmicDrawer__VariantsArgs = {
  element?: SingleChoiceArg<"menu" | "filtros">;
};

type VariantPropType = keyof PlasmicDrawer__VariantsArgs;
export const PlasmicDrawer__VariantProps = new Array<VariantPropType>(
  "element"
);

export type PlasmicDrawer__ArgsType = {
  links?: React.ReactNode;
  drawerButton?: React.ReactNode;
  mNavButtons?: React.ReactNode;
  filtroremoto?: React.ReactNode;
  filtrosofertas?: React.ReactNode;
  ctaFiltros?: React.ReactNode;
  ctaBorrar?: React.ReactNode;
};

type ArgPropType = keyof PlasmicDrawer__ArgsType;
export const PlasmicDrawer__ArgProps = new Array<ArgPropType>(
  "links",
  "drawerButton",
  "mNavButtons",
  "filtroremoto",
  "filtrosofertas",
  "ctaFiltros",
  "ctaBorrar"
);

export type PlasmicDrawer__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
  logo?: p.Flex<typeof Logo>;
  cta?: p.Flex<"div">;
};

export interface DefaultDrawerProps {
  links?: React.ReactNode;
  drawerButton?: React.ReactNode;
  mNavButtons?: React.ReactNode;
  filtroremoto?: React.ReactNode;
  filtrosofertas?: React.ReactNode;
  ctaFiltros?: React.ReactNode;
  ctaBorrar?: React.ReactNode;
  element?: SingleChoiceArg<"menu" | "filtros">;
  className?: string;
}

function PlasmicDrawer__RenderFunc(props: {
  variants: PlasmicDrawer__VariantsArgs;
  args: PlasmicDrawer__ArgsType;
  overrides: PlasmicDrawer__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2SafZfzx0FlS7()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        "drawerHeight" as const,
        {
          [sty.rootelement_filtros]: hasVariant(variants, "element", "filtros")
        }
      )}
    >
      {true ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__hKbT2, {
            [sty.freeBoxelement_filtros__hKbT2MmPqh]: hasVariant(
              variants,
              "element",
              "filtros"
            )
          })}
        >
          <div
            className={classNames(projectcss.all, sty.freeBox__wC2Ei, {
              [sty.freeBoxelement_filtros__wC2EimmPqh]: hasVariant(
                variants,
                "element",
                "filtros"
              )
            })}
          >
            <div
              className={classNames(projectcss.all, sty.freeBox__jcYSo, {
                [sty.freeBoxelement_filtros__jcYSommPqh]: hasVariant(
                  variants,
                  "element",
                  "filtros"
                )
              })}
            >
              {(
                hasVariant(variants, "element", "filtros")
                  ? true
                  : hasVariant(variants, "element", "menu")
                  ? false
                  : false
              )
                ? p.renderPlasmicSlot({
                    defaultContents: (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___3RwCh
                        )}
                        color={["whiteText"]}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oawCa
                            )}
                          >
                            {"Borrar"}
                          </div>
                        }
                        size={["linkOnly"]}
                      />
                    ),

                    value: args.ctaBorrar
                  })
                : null}

              {(hasVariant(variants, "element", "filtros") ? true : true) ? (
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text,
                    {
                      [sty.textelement_filtros]: hasVariant(
                        variants,
                        "element",
                        "filtros"
                      )
                    }
                  )}
                >
                  {"Filtrar ofertas"}
                </div>
              ) : null}

              {(hasVariant(variants, "element", "filtros") ? true : true) ? (
                <Logo
                  data-plasmic-name={"logo"}
                  data-plasmic-override={overrides.logo}
                  className={classNames("__wab_instance", sty.logo, {
                    [sty.logoelement_filtros]: hasVariant(
                      variants,
                      "element",
                      "filtros"
                    )
                  })}
                  logo={
                    hasVariant(variants, "element", "filtros")
                      ? ("complexWhite" as const)
                      : ("simpleBlack" as const)
                  }
                />
              ) : null}

              {p.renderPlasmicSlot({
                defaultContents: true ? (
                  <Button
                    className={classNames("__wab_instance", sty.button___337X6)}
                    iconOnly={"black" as const}
                  />
                ) : null,
                value: args.drawerButton,
                className: classNames(sty.slotTargetDrawerButton, {
                  [sty.slotTargetDrawerButtonelement_filtros]: hasVariant(
                    variants,
                    "element",
                    "filtros"
                  ),
                  [sty.slotTargetDrawerButtonelement_menu]: hasVariant(
                    variants,
                    "element",
                    "menu"
                  )
                })
              })}
            </div>
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__exoGj, {
              [sty.freeBoxelement_filtros__exoGJmmPqh]: hasVariant(
                variants,
                "element",
                "filtros"
              ),
              [sty.freeBoxelement_menu__exoGJxLrtx]: hasVariant(
                variants,
                "element",
                "menu"
              )
            })}
          >
            {(hasVariant(variants, "element", "filtros") ? true : true) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qRg2L, {
                  [sty.freeBoxelement_filtros__qRg2LmmPqh]: hasVariant(
                    variants,
                    "element",
                    "filtros"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <ToggleRemotoFiltros
                      className={classNames(
                        "__wab_instance",
                        sty.toggleRemotoFiltros__oxaj
                      )}
                    />
                  ),

                  value: args.filtroremoto
                })}

                {p.renderPlasmicSlot({
                  defaultContents: null,
                  value: args.filtrosofertas
                })}
              </p.Stack>
            ) : null}

            {(hasVariant(variants, "element", "filtros") ? false : true)
              ? p.renderPlasmicSlot({
                  defaultContents: (
                    <React.Fragment>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9SLwI
                        )}
                      >
                        {"Ofertas de empleo"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mr4Mr
                        )}
                      >
                        {"Empresas"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wmx8
                        )}
                      >
                        {"Formación gratuita"}
                      </div>
                    </React.Fragment>
                  ),
                  value: args.links
                })
              : null}
          </p.Stack>
        </div>
      ) : null}

      {(
        hasVariant(globalVariants, "screen", "mobileOnly")
          ? true
          : hasVariant(globalVariants, "screen", "tablet")
          ? true
          : hasVariant(globalVariants, "screen", "laptopM")
          ? true
          : hasVariant(globalVariants, "screen", "laptopL")
          ? true
          : true
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"cta"}
          data-plasmic-override={overrides.cta}
          hasGap={true}
          className={classNames(projectcss.all, sty.cta, {
            [sty.ctaelement_filtros]: hasVariant(
              variants,
              "element",
              "filtros"
            ),
            [sty.ctaelement_menu]: hasVariant(variants, "element", "menu")
          })}
        >
          {(hasVariant(variants, "element", "filtros") ? true : false)
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <Button
                    className={classNames("__wab_instance", sty.button__hgJZl)}
                    color={["purple"]}
                    label={"Mostrar x resultados"}
                    size={["strech"]}
                  />
                ),

                value: args.ctaFiltros
              })
            : null}

          {(hasVariant(variants, "element", "filtros") ? false : true)
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    {true ? (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___7PwYh
                        )}
                        color={["grey"]}
                        size={["strech"]}
                      />
                    ) : null}

                    {true ? (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___0LMn
                        )}
                        color={["darkBlue"]}
                        size={["strech"]}
                      />
                    ) : null}
                  </React.Fragment>
                ),
                value: args.mNavButtons
              })
            : null}
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "logo", "cta"],
  text: ["text"],
  logo: ["logo"],
  cta: ["cta"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  logo: typeof Logo;
  cta: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDrawer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDrawer__VariantsArgs;
    args?: PlasmicDrawer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDrawer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDrawer__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDrawer__ArgProps,
          internalVariantPropNames: PlasmicDrawer__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicDrawer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDrawer";
  } else {
    func.displayName = `PlasmicDrawer.${nodeName}`;
  }
  return func;
}

export const PlasmicDrawer = Object.assign(
  // Top-level PlasmicDrawer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    logo: makeNodeComponent("logo"),
    cta: makeNodeComponent("cta"),

    // Metadata about props expected for PlasmicDrawer
    internalVariantProps: PlasmicDrawer__VariantProps,
    internalArgProps: PlasmicDrawer__ArgProps
  }
);

export default PlasmicDrawer;
/* prettier-ignore-end */
