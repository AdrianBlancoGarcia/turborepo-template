// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: upY9cnzMG3kZgeoF6ecCnw
// Component: FeLVJRc1F-3W
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: GfUnvF4AzI/component
import LinkJr2 from "../../LinkJr2"; // plasmic-import: tsRi3ugy1sA/component
import Button from "../../Button"; // plasmic-import: BnsO6Lq9gm/component
import Logo from "../../Logo"; // plasmic-import: EamO-yxXIE/component
import HeroSliderItem from "../../HeroSliderItem"; // plasmic-import: 6KsDjXRa5s/component
import CardCompanyHome from "../../CardCompanyHome"; // plasmic-import: BYBixYzlfI/component
import OffersSection from "../../OffersSection"; // plasmic-import: uha3gDiVh90/component
import TabBar from "../../TabBar"; // plasmic-import: vDEeMdDYau/component
import TabBarItem from "../../TabBarItem"; // plasmic-import: rfB9MfvQL9/component
import OfferCard from "../../OfferCard"; // plasmic-import: j3ZEEkH_dZ/component
import Tag from "../../Tag"; // plasmic-import: y2UxC8Idw2/component
import OfferCardDetailsItem from "../../OfferCardDetailsItem"; // plasmic-import: E8-Ct61FHc/component
import Banner from "../../Banner"; // plasmic-import: CVyrqsg7IH/component
import Footer from "../../Footer"; // plasmic-import: JpAsUvUFqp/component

import { useScreenVariants as useScreenVariants_2SafZfzx0FlS7 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2SAFZfzx0FlS7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_job_run.module.css"; // plasmic-import: upY9cnzMG3kZgeoF6ecCnw/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: FeLVJRc1F-3W/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: -Kyqm1yXpr_/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: -bUtD9hB_g5/icon
import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: fInQqMp9hT/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: 0ENa8p8d48/icon
import Icon2RsvgIcon from "./icons/PlasmicIcon__Icon2Rsvg"; // plasmic-import: jAPx3koGk/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: XprJXoBQrR/icon
import SubtractIcon from "./icons/PlasmicIcon__Subtract"; // plasmic-import: p9zahmGXqG/icon
import Vector10Icon from "./icons/PlasmicIcon__Vector10"; // plasmic-import: m0MmFEQ7ZK/icon
import Vector2Icon from "./icons/PlasmicIcon__Vector2"; // plasmic-import: -jI-6qkHdz/icon
import Vector3Icon from "./icons/PlasmicIcon__Vector3"; // plasmic-import: 8NeJeF-0zR/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: ffvmWixkav/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: ARJP3RN6zd/icon
import Vector6Icon from "./icons/PlasmicIcon__Vector6"; // plasmic-import: Gbkvuahq9N/icon
import Vector7Icon from "./icons/PlasmicIcon__Vector7"; // plasmic-import: 1KVijtEtSK/icon
import Vector8Icon from "./icons/PlasmicIcon__Vector8"; // plasmic-import: e2hxgpzMOc/icon

export type PlasmicHome__VariantMembers = {};

export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {
  companyLogo?: React.ReactNode;
  countryFlag?: React.ReactNode;
  children?: React.ReactNode;
  companyLogo2?: React.ReactNode;
  countryFlag2?: React.ReactNode;
  children2?: React.ReactNode;
  companyLogo3?: React.ReactNode;
  countryFlag3?: React.ReactNode;
  children3?: React.ReactNode;
  companyLogo4?: React.ReactNode;
  countryFlag4?: React.ReactNode;
  children4?: React.ReactNode;
  companyLogo5?: React.ReactNode;
  countryFlag5?: React.ReactNode;
  children5?: React.ReactNode;
  ctaHero?: React.ReactNode;
  offersSection?: React.ReactNode;
  navbar?: React.ReactNode;
  categoriasHero?: React.ReactNode;
  ctaOfertas?: React.ReactNode;
  ctaFormacion?: React.ReactNode;
  ctaTalento?: React.ReactNode;
  ctaPublicar?: React.ReactNode;
  banner?: React.ReactNode;
  ctaTalentoMobile?: React.ReactNode;
  footer?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>(
  "companyLogo",
  "countryFlag",
  "children",
  "companyLogo2",
  "countryFlag2",
  "children2",
  "companyLogo3",
  "countryFlag3",
  "children3",
  "companyLogo4",
  "countryFlag4",
  "children4",
  "companyLogo5",
  "countryFlag5",
  "children5",
  "ctaHero",
  "offersSection",
  "navbar",
  "categoriasHero",
  "ctaOfertas",
  "ctaFormacion",
  "ctaTalento",
  "ctaPublicar",
  "banner",
  "ctaTalentoMobile",
  "footer"
);

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  hero?: p.Flex<"div">;
  leftColumn?: p.Flex<"div">;
  boostClaim?: p.Flex<"div">;
  sectionTitle?: p.Flex<"h1">;
  description?: p.Flex<"div">;
  rightColumn?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  companies?: p.Flex<"div">;
  content?: p.Flex<"div">;
  ofertas?: p.Flex<"div">;
  sectionHeading2?: p.Flex<"div">;
  sectionTitle3?: p.Flex<"div">;
  upskilling?: p.Flex<"div">;
  sectionHeading?: p.Flex<"div">;
  sectionTitle2?: p.Flex<"div">;
  description2?: p.Flex<"div">;
  candidates?: p.Flex<"div">;
  sectionHeading3?: p.Flex<"div">;
  sectionTitle4?: p.Flex<"div">;
  description3?: p.Flex<"div">;
  ctAs?: p.Flex<"div">;
  ctAs2?: p.Flex<"div">;
  button3?: p.Flex<"div">;
  buttonContent3?: p.Flex<"div">;
  label3?: p.Flex<"div">;
  mobileApp?: p.Flex<"div">;
  heading?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultHomeProps {}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2SafZfzx0FlS7()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__if6Iw)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <NavBar
                  className={classNames("__wab_instance", sty.navBar__anhLh)}
                  links={
                    <React.Fragment>
                      <LinkJr2
                        className={classNames(
                          "__wab_instance",
                          sty.linkJr2__yixYa
                        )}
                        color={"clear" as const}
                        label={"Ofertas de Empleo"}
                        link={"/ofertas/[[...params]]" as const}
                      />

                      {true ? (
                        <LinkJr2
                          className={classNames(
                            "__wab_instance",
                            sty.linkJr2___05LLp
                          )}
                          color={"clear" as const}
                          label={"Empresas"}
                        />
                      ) : null}

                      <LinkJr2
                        className={classNames(
                          "__wab_instance",
                          sty.linkJr2__p9Rki
                        )}
                        color={"clear" as const}
                        label={"Formación gratuita"}
                      />
                    </React.Fragment>
                  }
                  navButtons={
                    <React.Fragment>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__hBsMj
                        )}
                        color={["grey"]}
                        label={"Soy empresa"}
                        size={[]}
                      />

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___2TPwG
                        )}
                        color={["black"]}
                        label={"Únete a JobRun"}
                        size={[]}
                      />
                    </React.Fragment>
                  }
                  navLogo={
                    <Logo
                      className={classNames("__wab_instance", sty.logo__iKkc0)}
                      logo={"complexBlack" as const}
                    />
                  }
                />
              ),

              value: args.navbar
            })}
          </div>

          {true ? (
            <div
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              className={classNames(projectcss.all, sty.hero)}
              id={"" as const}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fDD3)}
              >
                <div
                  data-plasmic-name={"leftColumn"}
                  data-plasmic-override={overrides.leftColumn}
                  className={classNames(projectcss.all, sty.leftColumn)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__xoPpa)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dE9Q1
                        )}
                      >
                        {true ? (
                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"boostClaim"}
                            data-plasmic-override={overrides.boostClaim}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.boostClaim
                            )}
                          >
                            <VectorIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__qsePd
                              )}
                              role={"img"}
                            />

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yQsw4
                              )}
                            >
                              {"Boost your Career"}
                            </div>
                          </p.Stack>
                        ) : null}

                        <h1
                          data-plasmic-name={"sectionTitle"}
                          data-plasmic-override={overrides.sectionTitle}
                          className={classNames(
                            projectcss.all,
                            projectcss.h1,
                            projectcss.__wab_text,
                            sty.sectionTitle
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "El trabajo de tus sueños te está esperando"
                            : hasVariant(globalVariants, "screen", "tablet")
                            ? "El trabajo de tus sueños te está esperando"
                            : hasVariant(globalVariants, "screen", "laptopM")
                            ? "El trabajo de tus sueños te está esperando"
                            : "Decenas de ofertas de trabajo de programador te están esperando"}
                        </h1>

                        <div
                          data-plasmic-name={"description"}
                          data-plasmic-override={overrides.description}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.description
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Consigue ofertas acordes a tu experiencia en algunas de las mejores empresas del sector tecnológico"
                            : "Consigue ofertas acordes a tu experiencia en algunas de las mejores empresas del sector tecnológico."}
                        </div>
                      </p.Stack>
                    ) : null}
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__uJzM7
                          )}
                          color={["gradientRound"]}
                          label={"Apúntate al cambio"}
                          size={["large"]}
                        />
                      ),

                      value: args.ctaHero
                    })}
                  </p.Stack>
                </div>

                {true ? (
                  <div
                    data-plasmic-name={"rightColumn"}
                    data-plasmic-override={overrides.rightColumn}
                    className={classNames(projectcss.all, sty.rightColumn)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : hasVariant(globalVariants, "screen", "tablet")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={p.PlasmicLink}
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link
                        )}
                        component={Link}
                        href={"/ofertas/[[...params]]" as const}
                        platform={"nextjs"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__nYVxc
                          )}
                        >
                          {"Ver más ofertas"}
                        </div>

                        <Icon7Icon
                          className={classNames(projectcss.all, sty.svg__jLmqQ)}
                          role={"img"}
                        />
                      </p.Stack>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__sW15D)}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yM6E
                          )}
                        >
                          {true ? (
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__vdIrg
                              )}
                            >
                              {p.renderPlasmicSlot({
                                defaultContents: (
                                  <React.Fragment>
                                    <HeroSliderItem
                                      category={"remoto" as const}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.heroSliderItem__z1MH
                                      )}
                                      ctaOfertas={
                                        <Button
                                          className={classNames(
                                            "__wab_instance",
                                            sty.button___2OXqb
                                          )}
                                          color={["whiteText"]}
                                          icon={
                                            <Icon2RsvgIcon
                                              className={classNames(
                                                projectcss.all,
                                                sty.svg__iGbiu
                                              )}
                                              role={"img"}
                                            />
                                          }
                                          label={"Ver ofertas"}
                                          showEndIcon={true}
                                          size={["linkOnly"]}
                                        />
                                      }
                                      title={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__n8YSr
                                          )}
                                        >
                                          {"En remoto"}
                                        </div>
                                      }
                                    />

                                    <HeroSliderItem
                                      category={"fullStack" as const}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.heroSliderItem__ruusW
                                      )}
                                      title={"FullStack"}
                                    />

                                    <HeroSliderItem
                                      category={"frontEnd" as const}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.heroSliderItem__qlo92
                                      )}
                                      title={"Front-End"}
                                    />

                                    <HeroSliderItem
                                      category={"backEnd" as const}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.heroSliderItem__n58Pm
                                      )}
                                      title={"Back-End"}
                                    />
                                  </React.Fragment>
                                ),
                                value: args.categoriasHero
                              })}
                            </p.Stack>
                          ) : null}
                        </div>
                      ) : null}
                    </p.Stack>
                  </div>
                ) : null}
              </p.Stack>
            </div>
          ) : null}

          <p.Stack
            as={"div"}
            data-plasmic-name={"companies"}
            data-plasmic-override={overrides.companies}
            hasGap={true}
            className={classNames(projectcss.all, sty.companies)}
            id={"empresas" as const}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jLxBd)}
            >
              {true ? (
                <SubtractIcon
                  className={classNames(projectcss.all, sty.svg__qhAf)}
                  role={"img"}
                />
              ) : null}

              <p.Stack
                as={"div"}
                data-plasmic-name={"content"}
                data-plasmic-override={overrides.content}
                hasGap={true}
                className={classNames(projectcss.all, sty.content)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__e4A91)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__l1F7L
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {"¿Eres una empresa y buscas "}
                      </React.Fragment>
                      {
                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.span__nUbh
                          )}
                        >
                          {"talento"}
                        </span>
                      }
                      <React.Fragment>{"?"}</React.Fragment>
                    </React.Fragment>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__t8Te
                    )}
                  >
                    {
                      "Únete al resto de empresas que hemos ayudado a crecer y encuentra a los profesionales que estás buscando."
                    }
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mrTwH)}
                >
                  <CardCompanyHome
                    cityName={p.renderPlasmicSlot({
                      defaultContents: "Valencia, España",
                      value: args.children
                    })}
                    className={classNames(
                      "__wab_instance",
                      sty.cardCompanyHome___7BZmr
                    )}
                    companyLogo={p.renderPlasmicSlot({
                      defaultContents: (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___0OnMk)}
                          displayHeight={"48px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"48px" as const}
                          displayMinWidth={"48px" as const}
                          displayWidth={"48px" as const}
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://img.plasmic.app/img-optimizer/v1/img/d6d573b4fb8597341278554d34a18d14.png",
                            fullWidth: 102,
                            fullHeight: 118
                          }}
                        />
                      ),

                      value: args.companyLogo
                    })}
                    companyName={"OpenBootcamp"}
                    countryFlag={p.renderPlasmicSlot({
                      defaultContents: (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hxYN
                          )}
                        >
                          {"🇪🇸"}
                        </div>
                      ),

                      value: args.countryFlag
                    })}
                  />

                  <CardCompanyHome
                    cityName={p.renderPlasmicSlot({
                      defaultContents: "Sidney, Australia",
                      value: args.children2
                    })}
                    className={classNames(
                      "__wab_instance",
                      sty.cardCompanyHome___8Lz5N
                    )}
                    companyLogo={p.renderPlasmicSlot({
                      defaultContents: (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___4MYm)}
                          displayHeight={"48px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"48px" as const}
                          displayMinWidth={"48px" as const}
                          displayWidth={"48px" as const}
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://img.plasmic.app/img-optimizer/v1/img/061c8da845e3432533ebfc11232dd2b5.png",
                            fullWidth: 114,
                            fullHeight: 116
                          }}
                        />
                      ),

                      value: args.companyLogo2
                    })}
                    companyName={"Canva"}
                    countryFlag={p.renderPlasmicSlot({
                      defaultContents: (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hlk5S
                          )}
                        >
                          {"🇹🇫"}
                        </div>
                      ),

                      value: args.countryFlag2
                    })}
                  />

                  <CardCompanyHome
                    cityName={p.renderPlasmicSlot({
                      defaultContents: "Valencia, España",
                      value: args.children3
                    })}
                    className={classNames(
                      "__wab_instance",
                      sty.cardCompanyHome__n4HVe
                    )}
                    companyLogo={p.renderPlasmicSlot({
                      defaultContents: (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__pre3Y)}
                          displayHeight={"48px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"48px" as const}
                          displayMinWidth={"48px" as const}
                          displayWidth={"48px" as const}
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://img.plasmic.app/img-optimizer/v1/img/f1f3d650ee1886f99a0164dde38381ca.png",
                            fullWidth: 116,
                            fullHeight: 116
                          }}
                        />
                      ),

                      value: args.companyLogo3
                    })}
                    companyName={"Servinform"}
                    countryFlag={p.renderPlasmicSlot({
                      defaultContents: (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zc6P1
                          )}
                        >
                          {"🇪🇸"}
                        </div>
                      ),

                      value: args.countryFlag3
                    })}
                  />

                  <CardCompanyHome
                    cityName={p.renderPlasmicSlot({
                      defaultContents: "Valencia, España",
                      value: args.children4
                    })}
                    className={classNames(
                      "__wab_instance",
                      sty.cardCompanyHome__z1Hre
                    )}
                    companyLogo={p.renderPlasmicSlot({
                      defaultContents: (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___2HhJl)}
                          displayHeight={"48px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"48px" as const}
                          displayMinWidth={"48px" as const}
                          displayWidth={"48px" as const}
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://img.plasmic.app/img-optimizer/v1/img/71c2a3f7c3f884b4982502cf41105eb6.png",
                            fullWidth: 248,
                            fullHeight: 162
                          }}
                        />
                      ),

                      value: args.companyLogo4
                    })}
                    companyName={"Voicemod"}
                    countryFlag={p.renderPlasmicSlot({
                      defaultContents: (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fjVg
                          )}
                        >
                          {"🇪🇸"}
                        </div>
                      ),

                      value: args.countryFlag4
                    })}
                  />

                  <CardCompanyHome
                    cityName={p.renderPlasmicSlot({
                      defaultContents: "California, EEUU",
                      value: args.children5
                    })}
                    className={classNames(
                      "__wab_instance",
                      sty.cardCompanyHome__aFfp
                    )}
                    companyLogo={p.renderPlasmicSlot({
                      defaultContents: (
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__fbcNa)}
                          displayHeight={"48px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"48px" as const}
                          displayMinWidth={"48px" as const}
                          displayWidth={"48px" as const}
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://img.plasmic.app/img-optimizer/v1/img/1d6c0acac69ac57a46e1f8a07e250010.png",
                            fullWidth: 162,
                            fullHeight: 112
                          }}
                        />
                      ),

                      value: args.companyLogo5
                    })}
                    companyName={"Salesforce"}
                    countryFlag={p.renderPlasmicSlot({
                      defaultContents: (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cjXaj
                          )}
                        >
                          {"🇺🇸"}
                        </div>
                      ),

                      value: args.countryFlag5
                    })}
                  />
                </p.Stack>

                {p.renderPlasmicSlot({
                  defaultContents: (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___6Xic
                      )}
                      color={["navy"]}
                      label={"Publicar una oferta"}
                      size={["medium"]}
                    />
                  ),

                  value: args.ctaPublicar
                })}
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <div
            data-plasmic-name={"ofertas"}
            data-plasmic-override={overrides.ofertas}
            className={classNames(projectcss.all, sty.ofertas)}
            id={"ofertas" as const}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wn9On)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"sectionHeading2"}
                data-plasmic-override={overrides.sectionHeading2}
                hasGap={true}
                className={classNames(projectcss.all, sty.sectionHeading2)}
              >
                <div
                  data-plasmic-name={"sectionTitle3"}
                  data-plasmic-override={overrides.sectionTitle3}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.sectionTitle3
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"Ofertas destacadas de "}</React.Fragment>
                    {
                      <span
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.span___9P4Zp
                        )}
                      >
                        {"JobRun"}
                      </span>
                    }
                    <React.Fragment>{""}</React.Fragment>
                  </React.Fragment>
                </div>
              </p.Stack>

              {p.renderPlasmicSlot({
                defaultContents: (
                  <OffersSection
                    className={classNames(
                      "__wab_instance",
                      sty.offersSection__uXoRh
                    )}
                    offerContent={
                      <React.Fragment>
                        {true ? (
                          <OfferCard
                            className={classNames(
                              "__wab_instance",
                              sty.offerCard__vwIaL
                            )}
                          />
                        ) : null}
                        {true ? (
                          <OfferCard
                            className={classNames(
                              "__wab_instance",
                              sty.offerCard__bkPma
                            )}
                          />
                        ) : null}

                        <OfferCard
                          className={classNames(
                            "__wab_instance",
                            sty.offerCard__mXzCb
                          )}
                        />

                        <OfferCard
                          className={classNames(
                            "__wab_instance",
                            sty.offerCard__saxjk
                          )}
                        />

                        <OfferCard
                          className={classNames(
                            "__wab_instance",
                            sty.offerCard__v2QPk
                          )}
                        />

                        {true ? (
                          <OfferCard
                            className={classNames(
                              "__wab_instance",
                              sty.offerCard__aY3
                            )}
                          />
                        ) : null}
                      </React.Fragment>
                    }
                    tabBar={
                      <TabBar
                        className={classNames(
                          "__wab_instance",
                          sty.tabBar__fuUcP
                        )}
                        container={
                          <React.Fragment>
                            <TabBarItem
                              className={classNames(
                                "__wab_instance",
                                sty.tabBarItem__jehPo
                              )}
                              label={"Ofertas en remoto"}
                            />

                            <TabBarItem
                              className={classNames(
                                "__wab_instance",
                                sty.tabBarItem__ix2Ku
                              )}
                              label={"Fullstack"}
                              state={"nonActive" as const}
                            />

                            <TabBarItem
                              className={classNames(
                                "__wab_instance",
                                sty.tabBarItem__t82IB
                              )}
                              label={"Frontend"}
                              state={"nonActive" as const}
                            />

                            <TabBarItem
                              className={classNames(
                                "__wab_instance",
                                sty.tabBarItem___6Z2Ag
                              )}
                              label={"Backend"}
                              state={"nonActive" as const}
                            />
                          </React.Fragment>
                        }
                      />
                    }
                  />
                ),

                value: args.offersSection
              })}

              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__eO4Vz)}>
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___4Toso
                        )}
                        color={["darkBlue"]}
                        label={"Ver todas las ofertas"}
                        size={["medium"]}
                      />
                    ),

                    value: args.ctaOfertas
                  })}
                </div>
              ) : null}
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"upskilling"}
            data-plasmic-override={overrides.upskilling}
            className={classNames(projectcss.all, sty.upskilling)}
            id={"carrera" as const}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__cu26R)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"sectionHeading"}
                data-plasmic-override={overrides.sectionHeading}
                hasGap={true}
                className={classNames(projectcss.all, sty.sectionHeading)}
              >
                <div
                  data-plasmic-name={"sectionTitle2"}
                  data-plasmic-override={overrides.sectionTitle2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.sectionTitle2
                  )}
                >
                  {"Impulsa tu carrera como Developer"}
                </div>

                <div
                  data-plasmic-name={"description2"}
                  data-plasmic-override={overrides.description2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.description2
                  )}
                >
                  {hasVariant(globalVariants, "screen", "tablet")
                    ? "Recibe formación gratuita de calidad para adquirir los conocimientos que necesitas"
                    : "Recibe formación gratuita de calidad para adquirir los conocimientos que necesitas"}
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nmvk9)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___48YC)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___3VEzo)}
                  >
                    <Vector2Icon
                      className={classNames(projectcss.all, sty.svg__qid0)}
                      role={"img"}
                    />
                  </div>

                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7Gu8X
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__s0Cn2
                        )}
                      >
                        {"Mejora tus skills"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__w1Kin
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Mejora y potencia tus habilidades como desarrollador"
                          : "Mejora y potencia tus habilidades como desarrollador."}
                      </div>
                    </p.Stack>
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__vG4Di)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__rNg7W)}
                  >
                    <Vector3Icon
                      className={classNames(projectcss.all, sty.svg__v9BKy)}
                      role={"img"}
                    />
                  </div>

                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__eYdhd)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vgBpp
                        )}
                      >
                        {"De 0 a Dev"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hg5G7
                        )}
                      >
                        {
                          "Conviértete en desarrollador (Aunque no tengas experiencia)"
                        }
                      </div>
                    </p.Stack>
                  ) : null}
                </p.Stack>
              </p.Stack>

              {p.renderPlasmicSlot({
                defaultContents: (
                  <Button
                    className={classNames("__wab_instance", sty.button___5GuJb)}
                    color={["whiteTransparent"]}
                    label={"Acceder a las formaciones"}
                    size={["medium"]}
                  />
                ),

                value: args.ctaFormacion
              })}
            </p.Stack>
          </div>

          {p.renderPlasmicSlot({
            defaultContents: (
              <Banner
                className={classNames("__wab_instance", sty.banner___6IDqf)}
              />
            ),

            value: args.banner
          })}

          <p.Stack
            as={"div"}
            data-plasmic-name={"candidates"}
            data-plasmic-override={overrides.candidates}
            hasGap={true}
            className={classNames(projectcss.all, sty.candidates)}
            id={"talento" as const}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__u4Noo)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___8GsBv)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"sectionHeading3"}
                  data-plasmic-override={overrides.sectionHeading3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.sectionHeading3)}
                >
                  <div
                    data-plasmic-name={"sectionTitle4"}
                    data-plasmic-override={overrides.sectionTitle4}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.sectionTitle4
                    )}
                  >
                    {"Encuentra la pieza que necesita tu equipo"}
                  </div>

                  <div
                    data-plasmic-name={"description3"}
                    data-plasmic-override={overrides.description3}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.description3
                    )}
                  >
                    {
                      "Encuentra a los mejores profesionales formados en las tecnologías más punteras del mercado"
                    }
                  </div>
                </p.Stack>

                {(
                  hasVariant(globalVariants, "screen", "tablet") ? true : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"ctAs"}
                    data-plasmic-override={overrides.ctAs}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.ctAs)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "laptopM")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"ctAs2"}
                        data-plasmic-override={overrides.ctAs2}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.ctAs2)}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: (
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__vSbGa
                              )}
                              color={["yellow"]}
                              label={"Contrata talento"}
                              size={["medium"]}
                            />
                          ),

                          value: args.ctaTalento
                        })}

                        {false ? (
                          <div
                            data-plasmic-name={"button3"}
                            data-plasmic-override={overrides.button3}
                            className={classNames(projectcss.all, sty.button3)}
                          >
                            <p.Stack
                              as={"div"}
                              data-plasmic-name={"buttonContent3"}
                              data-plasmic-override={overrides.buttonContent3}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.buttonContent3
                              )}
                            >
                              <Icon6Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ihVpW
                                )}
                                role={"img"}
                              />

                              <div
                                data-plasmic-name={"label3"}
                                data-plasmic-override={overrides.label3}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.label3
                                )}
                              >
                                {"Entra al Campus"}
                              </div>
                            </p.Stack>
                          </div>
                        ) : null}
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                ) : null}
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__u1KRp)}
              >
                {true ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___7NLbO)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loader={"plasmic"}
                    loading={"lazy" as const}
                  />
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___3Hrje)}
                  />
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : hasVariant(globalVariants, "screen", "laptopM")
                    ? true
                    : false
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fnEFe)}
                  />
                ) : null}
              </p.Stack>

              {(
                hasVariant(globalVariants, "screen", "laptopM")
                  ? true
                  : hasVariant(globalVariants, "screen", "laptopL")
                  ? false
                  : false
              )
                ? p.renderPlasmicSlot({
                    defaultContents: (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__bf2Q
                        )}
                        color={["yellow"]}
                        label={"Contrata talento"}
                        size={["large"]}
                      />
                    ),

                    value: args.ctaTalentoMobile
                  })
                : null}
            </p.Stack>
          </p.Stack>

          {(hasVariant(globalVariants, "screen", "laptopM") ? true : true) ? (
            <div
              data-plasmic-name={"mobileApp"}
              data-plasmic-override={overrides.mobileApp}
              className={classNames(projectcss.all, sty.mobileApp)}
            >
              {(
                hasVariant(globalVariants, "screen", "laptopM") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ghFv)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__viSg5)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1Nvmp
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__brPrb
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"heading"}
                          data-plasmic-override={overrides.heading}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.heading)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bsVcE
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "laptopM")
                              ? "Encuentra oportunidades\ndesde cualquier lugar"
                              : "Encuentra oportunidades desde cualquier lugar"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___3D1Fq
                            )}
                          >
                            {"Con la nueva app de JobRun"}
                          </div>
                        </p.Stack>

                        <Button
                          data-plasmic-name={"button"}
                          data-plasmic-override={overrides.button}
                          className={classNames("__wab_instance", sty.button)}
                          color={["white"]}
                          label={"Descarga JobRun"}
                          size={["medium"]}
                        />
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__pdKgR)}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? true
                          : hasVariant(globalVariants, "screen", "tablet")
                          ? true
                          : true
                      ) ? (
                        <Icon3Icon
                          className={classNames(projectcss.all, sty.svg__bLxZr)}
                          role={"img"}
                        />
                      ) : null}

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__qqHxb)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "tablet")
                            ? ("auto" as const)
                            : ("auto" as const)
                        }
                        loader={"plasmic"}
                        loading={"lazy" as const}
                        src={{
                          src: "https://img.plasmic.app/img-optimizer/v1/img/04d6955b586267127b728182cd08b239.png",
                          fullWidth: 1760,
                          fullHeight: 1199
                        }}
                      />
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              ) : null}
            </div>
          ) : null}
          {p.renderPlasmicSlot({
            defaultContents: (
              <Footer
                className={classNames("__wab_instance", sty.footer__hql2J)}
              />
            ),

            value: args.footer
          })}
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero",
    "leftColumn",
    "boostClaim",
    "sectionTitle",
    "description",
    "rightColumn",
    "link",
    "companies",
    "content",
    "ofertas",
    "sectionHeading2",
    "sectionTitle3",
    "upskilling",
    "sectionHeading",
    "sectionTitle2",
    "description2",
    "candidates",
    "sectionHeading3",
    "sectionTitle4",
    "description3",
    "ctAs",
    "ctAs2",
    "button3",
    "buttonContent3",
    "label3",
    "mobileApp",
    "heading",
    "button"
  ],
  hero: [
    "hero",
    "leftColumn",
    "boostClaim",
    "sectionTitle",
    "description",
    "rightColumn",
    "link"
  ],
  leftColumn: ["leftColumn", "boostClaim", "sectionTitle", "description"],
  boostClaim: ["boostClaim"],
  sectionTitle: ["sectionTitle"],
  description: ["description"],
  rightColumn: ["rightColumn", "link"],
  link: ["link"],
  companies: ["companies", "content"],
  content: ["content"],
  ofertas: ["ofertas", "sectionHeading2", "sectionTitle3"],
  sectionHeading2: ["sectionHeading2", "sectionTitle3"],
  sectionTitle3: ["sectionTitle3"],
  upskilling: ["upskilling", "sectionHeading", "sectionTitle2", "description2"],
  sectionHeading: ["sectionHeading", "sectionTitle2", "description2"],
  sectionTitle2: ["sectionTitle2"],
  description2: ["description2"],
  candidates: [
    "candidates",
    "sectionHeading3",
    "sectionTitle4",
    "description3",
    "ctAs",
    "ctAs2",
    "button3",
    "buttonContent3",
    "label3"
  ],
  sectionHeading3: ["sectionHeading3", "sectionTitle4", "description3"],
  sectionTitle4: ["sectionTitle4"],
  description3: ["description3"],
  ctAs: ["ctAs", "ctAs2", "button3", "buttonContent3", "label3"],
  ctAs2: ["ctAs2", "button3", "buttonContent3", "label3"],
  button3: ["button3", "buttonContent3", "label3"],
  buttonContent3: ["buttonContent3", "label3"],
  label3: ["label3"],
  mobileApp: ["mobileApp", "heading", "button"],
  heading: ["heading"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  hero: "div";
  leftColumn: "div";
  boostClaim: "div";
  sectionTitle: "h1";
  description: "div";
  rightColumn: "div";
  link: "a";
  companies: "div";
  content: "div";
  ofertas: "div";
  sectionHeading2: "div";
  sectionTitle3: "div";
  upskilling: "div";
  sectionHeading: "div";
  sectionTitle2: "div";
  description2: "div";
  candidates: "div";
  sectionHeading3: "div";
  sectionTitle4: "div";
  description3: "div";
  ctAs: "div";
  ctAs2: "div";
  button3: "div";
  buttonContent3: "div";
  label3: "div";
  mobileApp: "div";
  heading: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    leftColumn: makeNodeComponent("leftColumn"),
    boostClaim: makeNodeComponent("boostClaim"),
    sectionTitle: makeNodeComponent("sectionTitle"),
    description: makeNodeComponent("description"),
    rightColumn: makeNodeComponent("rightColumn"),
    link: makeNodeComponent("link"),
    companies: makeNodeComponent("companies"),
    content: makeNodeComponent("content"),
    ofertas: makeNodeComponent("ofertas"),
    sectionHeading2: makeNodeComponent("sectionHeading2"),
    sectionTitle3: makeNodeComponent("sectionTitle3"),
    upskilling: makeNodeComponent("upskilling"),
    sectionHeading: makeNodeComponent("sectionHeading"),
    sectionTitle2: makeNodeComponent("sectionTitle2"),
    description2: makeNodeComponent("description2"),
    candidates: makeNodeComponent("candidates"),
    sectionHeading3: makeNodeComponent("sectionHeading3"),
    sectionTitle4: makeNodeComponent("sectionTitle4"),
    description3: makeNodeComponent("description3"),
    ctAs: makeNodeComponent("ctAs"),
    ctAs2: makeNodeComponent("ctAs2"),
    button3: makeNodeComponent("button3"),
    buttonContent3: makeNodeComponent("buttonContent3"),
    label3: makeNodeComponent("label3"),
    mobileApp: makeNodeComponent("mobileApp"),
    heading: makeNodeComponent("heading"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
