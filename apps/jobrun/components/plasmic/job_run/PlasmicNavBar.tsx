// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: upY9cnzMG3kZgeoF6ecCnw
// Component: GfUnvF4AzI
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Logo from "../../Logo"; // plasmic-import: EamO-yxXIE/component
import Button from "../../Button"; // plasmic-import: BnsO6Lq9gm/component
import LinkJr2 from "../../LinkJr2"; // plasmic-import: tsRi3ugy1sA/component

import { useScreenVariants as useScreenVariants_2SafZfzx0FlS7 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2SAFZfzx0FlS7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_job_run.module.css"; // plasmic-import: upY9cnzMG3kZgeoF6ecCnw/projectcss
import sty from "./PlasmicNavBar.module.css"; // plasmic-import: GfUnvF4AzI/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: -Kyqm1yXpr_/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: -bUtD9hB_g5/icon

export type PlasmicNavBar__VariantMembers = {
  page: "home" | "list" | "detail";
};

export type PlasmicNavBar__VariantsArgs = {
  page?: SingleChoiceArg<"home" | "list" | "detail">;
};

type VariantPropType = keyof PlasmicNavBar__VariantsArgs;
export const PlasmicNavBar__VariantProps = new Array<VariantPropType>("page");

export type PlasmicNavBar__ArgsType = {
  links?: React.ReactNode;
  navButtons?: React.ReactNode;
  button?: React.ReactNode;
  navLogo?: React.ReactNode;
  menuButton?: React.ReactNode;
};

type ArgPropType = keyof PlasmicNavBar__ArgsType;
export const PlasmicNavBar__ArgProps = new Array<ArgPropType>(
  "links",
  "navButtons",
  "button",
  "navLogo",
  "menuButton"
);

export type PlasmicNavBar__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  leftNav?: p.Flex<"div">;
  rightNav?: p.Flex<"div">;
  links?: p.Flex<"div">;
  navButtons?: p.Flex<"div">;
};

export interface DefaultNavBarProps {
  links?: React.ReactNode;
  navButtons?: React.ReactNode;
  button?: React.ReactNode;
  navLogo?: React.ReactNode;
  menuButton?: React.ReactNode;
  page?: SingleChoiceArg<"home" | "list" | "detail">;
  className?: string;
}

function PlasmicNavBar__RenderFunc(props: {
  variants: PlasmicNavBar__VariantsArgs;
  args: PlasmicNavBar__ArgsType;
  overrides: PlasmicNavBar__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2SafZfzx0FlS7()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootpage_detail]: hasVariant(variants, "page", "detail"),
          [sty.rootpage_home]: hasVariant(variants, "page", "home"),
          [sty.rootpage_list]: hasVariant(variants, "page", "list")
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxpage_detail]: hasVariant(variants, "page", "detail"),
          [sty.freeBoxpage_home]: hasVariant(variants, "page", "home"),
          [sty.freeBoxpage_list]: hasVariant(variants, "page", "list")
        })}
      >
        {(hasVariant(variants, "page", "home") ? true : true) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"leftNav"}
            data-plasmic-override={overrides.leftNav}
            hasGap={true}
            className={classNames(projectcss.all, sty.leftNav, {
              [sty.leftNavpage_detail]: hasVariant(variants, "page", "detail"),
              [sty.leftNavpage_home]: hasVariant(variants, "page", "home"),
              [sty.leftNavpage_list]: hasVariant(variants, "page", "list")
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <Logo
                  className={classNames("__wab_instance", sty.logo___7TGea)}
                />
              ),

              value: args.navLogo
            })}

            {(hasVariant(variants, "page", "list") ? true : false)
              ? p.renderPlasmicSlot({
                  defaultContents: (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__arFz2
                      )}
                      color={["yellow"]}
                      label={"Publicar oferta"}
                      size={["small"]}
                    />
                  ),

                  value: args.button
                })
              : null}
          </p.Stack>
        ) : null}

        {(hasVariant(variants, "page", "home") ? true : true) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"rightNav"}
            data-plasmic-override={overrides.rightNav}
            hasGap={true}
            className={classNames(projectcss.all, sty.rightNav, {
              [sty.rightNavpage_detail]: hasVariant(variants, "page", "detail"),
              [sty.rightNavpage_home]: hasVariant(variants, "page", "home"),
              [sty.rightNavpage_list]: hasVariant(variants, "page", "list")
            })}
          >
            {(hasVariant(globalVariants, "screen", "laptopM") ? true : true) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"links"}
                data-plasmic-override={overrides.links}
                hasGap={true}
                className={classNames(projectcss.all, sty.links, {
                  [sty.linkspage_home]: hasVariant(variants, "page", "home"),
                  [sty.linkspage_list]: hasVariant(variants, "page", "list")
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <React.Fragment>
                      {true ? (
                        <LinkJr2
                          className={classNames(
                            "__wab_instance",
                            sty.linkJr2__gnIx1
                          )}
                          color={"white" as const}
                        />
                      ) : null}

                      {true ? (
                        <LinkJr2
                          className={classNames(
                            "__wab_instance",
                            sty.linkJr2__da9Gj
                          )}
                          color={"white" as const}
                          label={"Ofertas de empleo"}
                        />
                      ) : null}

                      {true ? (
                        <LinkJr2
                          className={classNames(
                            "__wab_instance",
                            sty.linkJr2__wwRcX
                          )}
                          color={"white" as const}
                          label={"Empresas"}
                        />
                      ) : null}

                      <LinkJr2
                        className={classNames(
                          "__wab_instance",
                          sty.linkJr2__o8NWi
                        )}
                        color={"white" as const}
                        label={"FormaciÃ³n gratuita"}
                      />
                    </React.Fragment>
                  ),
                  value: args.links
                })}
              </p.Stack>
            ) : null}

            {(
              hasVariant(variants, "page", "list")
                ? true
                : hasVariant(variants, "page", "home")
                ? true
                : hasVariant(globalVariants, "screen", "tablet")
                ? true
                : true
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"navButtons"}
                data-plasmic-override={overrides.navButtons}
                hasGap={true}
                className={classNames(projectcss.all, sty.navButtons, {
                  [sty.navButtonspage_home]: hasVariant(
                    variants,
                    "page",
                    "home"
                  ),
                  [sty.navButtonspage_list]: hasVariant(
                    variants,
                    "page",
                    "list"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <React.Fragment>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__hgDaj
                        )}
                        color={["grey"]}
                        label={"Soy empresa"}
                        size={[]}
                      />

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__jzPaL
                        )}
                        color={["gradientRound2"]}
                        label={"Ãnete a JobRun"}
                        size={[]}
                      />
                    </React.Fragment>
                  ),
                  value: args.navButtons
                })}
              </p.Stack>
            ) : null}

            {(
              hasVariant(globalVariants, "screen", "tablet")
                ? true
                : hasVariant(globalVariants, "screen", "laptopM")
                ? true
                : false
            )
              ? p.renderPlasmicSlot({
                  defaultContents: (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__vQ3An
                      )}
                      color={[]}
                      label={"Ãnete a JobRun"}
                      menu={"black" as const}
                    />
                  ),

                  value: args.menuButton
                })
              : null}
          </p.Stack>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "leftNav", "rightNav", "links", "navButtons"],
  freeBox: ["freeBox", "leftNav", "rightNav", "links", "navButtons"],
  leftNav: ["leftNav"],
  rightNav: ["rightNav", "links", "navButtons"],
  links: ["links"],
  navButtons: ["navButtons"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  leftNav: "div";
  rightNav: "div";
  links: "div";
  navButtons: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavBar__VariantsArgs;
    args?: PlasmicNavBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavBar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavBar__ArgProps,
          internalVariantPropNames: PlasmicNavBar__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNavBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavBar";
  } else {
    func.displayName = `PlasmicNavBar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavBar = Object.assign(
  // Top-level PlasmicNavBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    leftNav: makeNodeComponent("leftNav"),
    rightNav: makeNodeComponent("rightNav"),
    links: makeNodeComponent("links"),
    navButtons: makeNodeComponent("navButtons"),

    // Metadata about props expected for PlasmicNavBar
    internalVariantProps: PlasmicNavBar__VariantProps,
    internalArgProps: PlasmicNavBar__ArgProps
  }
);

export default PlasmicNavBar;
/* prettier-ignore-end */
