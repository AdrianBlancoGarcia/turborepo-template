// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: upY9cnzMG3kZgeoF6ecCnw
// Component: E8-Ct61FHc
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_job_run.module.css"; // plasmic-import: upY9cnzMG3kZgeoF6ecCnw/projectcss
import sty from "./PlasmicOfferCardDetailsItem.module.css"; // plasmic-import: E8-Ct61FHc/css

import Vector10Icon from "./icons/PlasmicIcon__Vector10"; // plasmic-import: m0MmFEQ7ZK/icon
import Vector11Icon from "./icons/PlasmicIcon__Vector11"; // plasmic-import: ui0ASakl2C/icon

export type PlasmicOfferCardDetailsItem__VariantMembers = {
  type: "jornada" | "remote" | "ciudad";
};

export type PlasmicOfferCardDetailsItem__VariantsArgs = {
  type?: MultiChoiceArg<"jornada" | "remote" | "ciudad">;
};

type VariantPropType = keyof PlasmicOfferCardDetailsItem__VariantsArgs;
export const PlasmicOfferCardDetailsItem__VariantProps =
  new Array<VariantPropType>("type");

export type PlasmicOfferCardDetailsItem__ArgsType = {
  title?: React.ReactNode;
  flagIcon?: React.ReactNode;
};

type ArgPropType = keyof PlasmicOfferCardDetailsItem__ArgsType;
export const PlasmicOfferCardDetailsItem__ArgProps = new Array<ArgPropType>(
  "title",
  "flagIcon"
);

export type PlasmicOfferCardDetailsItem__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultOfferCardDetailsItemProps {
  title?: React.ReactNode;
  flagIcon?: React.ReactNode;
  type?: MultiChoiceArg<"jornada" | "remote" | "ciudad">;
  className?: string;
}

function PlasmicOfferCardDetailsItem__RenderFunc(props: {
  variants: PlasmicOfferCardDetailsItem__VariantsArgs;
  args: PlasmicOfferCardDetailsItem__ArgsType;
  overrides: PlasmicOfferCardDetailsItem__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.roottype_remote]: hasVariant(variants, "type", "remote") }
      )}
    >
      {(
        hasVariant(variants, "type", "ciudad")
          ? true
          : hasVariant(variants, "type", "remote")
          ? true
          : true
      ) ? (
        <p.PlasmicIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          PlasmicIconType={
            hasVariant(variants, "type", "remote") ? Vector11Icon : Vector10Icon
          }
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgtype_ciudad]: hasVariant(variants, "type", "ciudad"),
            [sty.svgtype_jornada]: hasVariant(variants, "type", "jornada"),
            [sty.svgtype_remote]: hasVariant(variants, "type", "remote")
          })}
          role={"img"}
        />
      ) : null}

      {(hasVariant(variants, "type", "ciudad") ? true : false)
        ? p.renderPlasmicSlot({
            defaultContents: (
              <Vector10Icon
                className={classNames(projectcss.all, sty.svg__zHu1E)}
                role={"img"}
              />
            ),

            value: args.flagIcon
          })
        : null}

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBoxtype_ciudad]: hasVariant(variants, "type", "ciudad"),
          [sty.freeBoxtype_remote]: hasVariant(variants, "type", "remote")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Jornada",
          value: args.title,
          className: classNames(sty.slotTargetTitle, {
            [sty.slotTargetTitletype_ciudad]: hasVariant(
              variants,
              "type",
              "ciudad"
            ),
            [sty.slotTargetTitletype_jornada]: hasVariant(
              variants,
              "type",
              "jornada"
            ),
            [sty.slotTargetTitletype_remote]: hasVariant(
              variants,
              "type",
              "remote"
            )
          })
        })}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "freeBox"],
  svg: ["svg"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOfferCardDetailsItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOfferCardDetailsItem__VariantsArgs;
    args?: PlasmicOfferCardDetailsItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOfferCardDetailsItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOfferCardDetailsItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicOfferCardDetailsItem__ArgProps,
          internalVariantPropNames: PlasmicOfferCardDetailsItem__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicOfferCardDetailsItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOfferCardDetailsItem";
  } else {
    func.displayName = `PlasmicOfferCardDetailsItem.${nodeName}`;
  }
  return func;
}

export const PlasmicOfferCardDetailsItem = Object.assign(
  // Top-level PlasmicOfferCardDetailsItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicOfferCardDetailsItem
    internalVariantProps: PlasmicOfferCardDetailsItem__VariantProps,
    internalArgProps: PlasmicOfferCardDetailsItem__ArgProps
  }
);

export default PlasmicOfferCardDetailsItem;
/* prettier-ignore-end */
