// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: upY9cnzMG3kZgeoF6ecCnw
// Component: 53Ko38uc5Yv
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Logo from "../../Logo"; // plasmic-import: EamO-yxXIE/component
import Button from "../../Button"; // plasmic-import: BnsO6Lq9gm/component
import LinkJr2 from "../../LinkJr2"; // plasmic-import: tsRi3ugy1sA/component
import FilterItems from "../../FilterItems"; // plasmic-import: x9QoXVx29j/component

import { useScreenVariants as useScreenVariants_2SafZfzx0FlS7 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2SAFZfzx0FlS7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_job_run.module.css"; // plasmic-import: upY9cnzMG3kZgeoF6ecCnw/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: 53Ko38uc5Yv/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: -Kyqm1yXpr_/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: -bUtD9hB_g5/icon

export type PlasmicHeader__VariantMembers = {
  fixed: "fixed";
};

export type PlasmicHeader__VariantsArgs = {
  fixed?: SingleBooleanChoiceArg<"fixed">;
};

type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>("fixed");

export type PlasmicHeader__ArgsType = {
  filters?: React.ReactNode;
  navLogo?: React.ReactNode;
  links?: React.ReactNode;
  navButtons?: React.ReactNode;
  menuButton?: React.ReactNode;
  ctaPublish3?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>(
  "filters",
  "navLogo",
  "links",
  "navButtons",
  "menuButton",
  "ctaPublish3"
);

export type PlasmicHeader__OverridesType = {
  root?: p.Flex<"div">;
  rightNav?: p.Flex<"div">;
  links?: p.Flex<"div">;
  navButtons?: p.Flex<"div">;
  sectionHeading?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultHeaderProps {
  filters?: React.ReactNode;
  navLogo?: React.ReactNode;
  links?: React.ReactNode;
  navButtons?: React.ReactNode;
  menuButton?: React.ReactNode;
  ctaPublish3?: React.ReactNode;
  fixed?: SingleBooleanChoiceArg<"fixed">;
  className?: string;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2SafZfzx0FlS7()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootfixed]: hasVariant(variants, "fixed", "fixed") }
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          sty.freeBox__fsqDc,
          hasVariant(variants, "fixed", "fixed")
            ? ("FixedHeader" as const)
            : undefined,
          {
            [sty.freeBoxfixed__fsqDczImfc]: hasVariant(
              variants,
              "fixed",
              "fixed"
            )
          }
        )}
      >
        {true ? (
          <div
            className={classNames(projectcss.all, sty.freeBox___8Xox2, {
              [sty.freeBoxfixed___8Xox2ZImfc]: hasVariant(
                variants,
                "fixed",
                "fixed"
              )
            })}
          >
            {true ? (
              <div
                className={classNames(projectcss.all, sty.freeBox___4Hcmj, {
                  [sty.freeBoxfixed___4HcmJzImfc]: hasVariant(
                    variants,
                    "fixed",
                    "fixed"
                  )
                })}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___4ZDaS, {
                      [sty.freeBoxfixed___4ZDaSzImfc]: hasVariant(
                        variants,
                        "fixed",
                        "fixed"
                      )
                    })}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <Logo
                          className={classNames(
                            "__wab_instance",
                            sty.logo__mEbM
                          )}
                          logo={"complexWhite" as const}
                        />
                      ),

                      value: args.navLogo
                    })}

                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? false
                        : false
                    )
                      ? p.renderPlasmicSlot({
                          defaultContents: (
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button___9X041
                              )}
                              color={["yellow"]}
                              label={"Publicar oferta"}
                              size={["small"]}
                            />
                          ),

                          value: args.ctaPublish3
                        })
                      : null}
                  </p.Stack>
                ) : null}

                {true ? (
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"rightNav"}
                    data-plasmic-override={overrides.rightNav}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.rightNav)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "laptopM")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"links"}
                        data-plasmic-override={overrides.links}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.links)}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: (
                            <React.Fragment>
                              {true ? (
                                <LinkJr2
                                  className={classNames(
                                    "__wab_instance",
                                    sty.linkJr2__aUzFz
                                  )}
                                  color={"white" as const}
                                />
                              ) : null}

                              <LinkJr2
                                className={classNames(
                                  "__wab_instance",
                                  sty.linkJr2__wh0YG
                                )}
                                color={"white" as const}
                                label={"Ofertas de empleo"}
                              />

                              {true ? (
                                <LinkJr2
                                  className={classNames(
                                    "__wab_instance",
                                    sty.linkJr2__s0UuF
                                  )}
                                  color={"white" as const}
                                  label={"Empresas"}
                                />
                              ) : null}

                              <LinkJr2
                                className={classNames(
                                  "__wab_instance",
                                  sty.linkJr2__wkoOf
                                )}
                                color={"white" as const}
                                label={"FormaciÃ³n gratuita"}
                              />
                            </React.Fragment>
                          ),
                          value: args.links
                        })}
                      </p.Stack>
                    ) : null}

                    {(
                      hasVariant(globalVariants, "screen", "tablet")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"navButtons"}
                        data-plasmic-override={overrides.navButtons}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.navButtons)}
                      >
                        {p.renderPlasmicSlot({
                          defaultContents: (
                            <React.Fragment>
                              {true ? (
                                <Button
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__m97Vq
                                  )}
                                  color={["grey"]}
                                  label={"Soy empresa"}
                                  size={[]}
                                />
                              ) : null}

                              <Button
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__tqdo9
                                )}
                                color={["gradientRound2"]}
                                label={"Ãnete a JobRun"}
                                size={[]}
                              />
                            </React.Fragment>
                          ),
                          value: args.navButtons
                        })}
                      </p.Stack>
                    ) : null}

                    {(
                      hasVariant(globalVariants, "screen", "tablet")
                        ? true
                        : hasVariant(globalVariants, "screen", "laptopM")
                        ? true
                        : false
                    )
                      ? p.renderPlasmicSlot({
                          defaultContents: (
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__d0RaO
                              )}
                              color={[]}
                              label={"Ãnete a JobRun"}
                              menu={"white" as const}
                            />
                          ),

                          value: args.menuButton
                        })
                      : null}
                  </p.Stack>
                ) : null}
              </div>
            ) : null}
          </div>
        ) : null}

        {(
          hasVariant(variants, "fixed", "fixed")
            ? true
            : hasVariant(globalVariants, "screen", "mobileOnly")
            ? true
            : hasVariant(globalVariants, "screen", "tablet")
            ? true
            : true
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox___4RBkz, {
              [sty.freeBoxfixed___4RBkzzImfc]: hasVariant(
                variants,
                "fixed",
                "fixed"
              )
            })}
          >
            {(
              hasVariant(variants, "fixed", "fixed")
                ? true
                : hasVariant(globalVariants, "screen", "tablet")
                ? true
                : true
            ) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ga8Oh, {
                  [sty.freeBoxfixed__ga8OhzImfc]: hasVariant(
                    variants,
                    "fixed",
                    "fixed"
                  )
                })}
              >
                {(hasVariant(variants, "fixed", "fixed") ? true : true) ? (
                  <div
                    data-plasmic-name={"sectionHeading"}
                    data-plasmic-override={overrides.sectionHeading}
                    className={classNames(projectcss.all, sty.sectionHeading, {
                      [sty.sectionHeadingfixed]: hasVariant(
                        variants,
                        "fixed",
                        "fixed"
                      )
                    })}
                  >
                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text,
                        {
                          [sty.textfixed]: hasVariant(
                            variants,
                            "fixed",
                            "fixed"
                          )
                        }
                      )}
                    >
                      {"Encuentra el puesto que estÃ¡s buscando"}
                    </div>
                  </div>
                ) : null}

                {(
                  hasVariant(globalVariants, "screen", "tablet") ? true : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__vlVux, {
                      [sty.freeBoxfixed__vlVuxzImfc]: hasVariant(
                        variants,
                        "fixed",
                        "fixed"
                      )
                    })}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <React.Fragment>
                          <FilterItems
                            _class={["modalidad"]}
                            className={classNames(
                              "__wab_instance",
                              sty.filterItems__u49Sz
                            )}
                          />

                          <FilterItems
                            _class={["puesto"]}
                            className={classNames(
                              "__wab_instance",
                              sty.filterItems___2OWw5
                            )}
                          />
                        </React.Fragment>
                      ),
                      value: args.filters
                    })}
                  </p.Stack>
                ) : null}
              </p.Stack>
            ) : null}
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "rightNav", "links", "navButtons", "sectionHeading", "text"],
  rightNav: ["rightNav", "links", "navButtons"],
  links: ["links"],
  navButtons: ["navButtons"],
  sectionHeading: ["sectionHeading", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  rightNav: "div";
  links: "div";
  navButtons: "div";
  sectionHeading: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    rightNav: makeNodeComponent("rightNav"),
    links: makeNodeComponent("links"),
    navButtons: makeNodeComponent("navButtons"),
    sectionHeading: makeNodeComponent("sectionHeading"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
