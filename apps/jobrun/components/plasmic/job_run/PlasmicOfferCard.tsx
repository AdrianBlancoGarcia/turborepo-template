// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: upY9cnzMG3kZgeoF6ecCnw
// Component: j3ZEEkH_dZ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import OfferCardDetailsItem from "../../OfferCardDetailsItem"; // plasmic-import: E8-Ct61FHc/component
import Tag from "../../Tag"; // plasmic-import: y2UxC8Idw2/component

import { useScreenVariants as useScreenVariants_2SafZfzx0FlS7 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2SAFZfzx0FlS7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_job_run.module.css"; // plasmic-import: upY9cnzMG3kZgeoF6ecCnw/projectcss
import sty from "./PlasmicOfferCard.module.css"; // plasmic-import: j3ZEEkH_dZ/css

import Vector10Icon from "./icons/PlasmicIcon__Vector10"; // plasmic-import: m0MmFEQ7ZK/icon

export type PlasmicOfferCard__VariantMembers = {
  insideOffer: "insideOffer";
};

export type PlasmicOfferCard__VariantsArgs = {
  insideOffer?: SingleBooleanChoiceArg<"insideOffer">;
};

type VariantPropType = keyof PlasmicOfferCard__VariantsArgs;
export const PlasmicOfferCard__VariantProps = new Array<VariantPropType>(
  "insideOffer"
);

export type PlasmicOfferCard__ArgsType = {
  tags?: React.ReactNode;
  salario?: React.ReactNode;
  experiencia?: React.ReactNode;
  businessIcon?: React.ReactNode;
  businessName?: React.ReactNode;
  offerTitle?: React.ReactNode;
  detailItems?: React.ReactNode;
};

type ArgPropType = keyof PlasmicOfferCard__ArgsType;
export const PlasmicOfferCard__ArgProps = new Array<ArgPropType>(
  "tags",
  "salario",
  "experiencia",
  "businessIcon",
  "businessName",
  "offerTitle",
  "detailItems"
);

export type PlasmicOfferCard__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultOfferCardProps {
  tags?: React.ReactNode;
  salario?: React.ReactNode;
  experiencia?: React.ReactNode;
  businessIcon?: React.ReactNode;
  businessName?: React.ReactNode;
  offerTitle?: React.ReactNode;
  detailItems?: React.ReactNode;
  insideOffer?: SingleBooleanChoiceArg<"insideOffer">;
  className?: string;
}

function PlasmicOfferCard__RenderFunc(props: {
  variants: PlasmicOfferCard__VariantsArgs;
  args: PlasmicOfferCard__ArgsType;
  overrides: PlasmicOfferCard__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2SafZfzx0FlS7()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootinsideOffer]: hasVariant(
            variants,
            "insideOffer",
            "insideOffer"
          )
        }
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___8Vji7, {
            [sty.freeBoxinsideOffer___8Vji7Tm81Q]: hasVariant(
              variants,
              "insideOffer",
              "insideOffer"
            )
          })}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___3QjZp)}
          >
            {(
              hasVariant(variants, "insideOffer", "insideOffer") ? true : true
            ) ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__yyxWs, {
                  [sty.freeBoxinsideOffer__yyxWsTm81Q]: hasVariant(
                    variants,
                    "insideOffer",
                    "insideOffer"
                  )
                })}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__rXk6F, {
                    [sty.freeBoxinsideOffer__rXk6FTm81Q]: hasVariant(
                      variants,
                      "insideOffer",
                      "insideOffer"
                    )
                  })}
                >
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gfdmb)}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__eS3C)}
                            displayHeight={"52px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"100%" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"52px" as const}
                            loader={"plasmic"}
                            loading={"lazy" as const}
                          />
                        ),

                        value: args.businessIcon
                      })}
                    </div>
                  ) : null}

                  <div
                    className={classNames(projectcss.all, sty.freeBox__dUJz)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "Nombre de la empresa",
                      value: args.businessName,
                      className: classNames(sty.slotTargetBusinessName)
                    })}
                  </div>
                </div>
              </div>
            ) : null}

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mBo5H, {
                [sty.freeBoxinsideOffer__mBo5HTm81Q]: hasVariant(
                  variants,
                  "insideOffer",
                  "insideOffer"
                )
              })}
            >
              <div className={classNames(projectcss.all, sty.freeBox__zEZtJ)}>
                {p.renderPlasmicSlot({
                  defaultContents: "Puesto ofertado",
                  value: args.offerTitle,
                  className: classNames(sty.slotTargetOfferTitle, {
                    [sty.slotTargetOfferTitleinsideOffer]: hasVariant(
                      variants,
                      "insideOffer",
                      "insideOffer"
                    )
                  })
                })}
              </div>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___5OQf)}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <React.Fragment>
                      <OfferCardDetailsItem
                        className={classNames(
                          "__wab_instance",
                          sty.offerCardDetailsItem__sWj84
                        )}
                      />

                      <OfferCardDetailsItem
                        className={classNames(
                          "__wab_instance",
                          sty.offerCardDetailsItem__rRM
                        )}
                        type={["ciudad"]}
                      />

                      <OfferCardDetailsItem
                        className={classNames(
                          "__wab_instance",
                          sty.offerCardDetailsItem__eSmhA
                        )}
                        type={["remote"]}
                      />
                    </React.Fragment>
                  ),
                  value: args.detailItems
                })}
              </p.Stack>
            </p.Stack>
          </p.Stack>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mJqk, {
                [sty.freeBoxinsideOffer__mJqkTm81Q]: hasVariant(
                  variants,
                  "insideOffer",
                  "insideOffer"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    <Tag
                      className={classNames("__wab_instance", sty.tag__kAySe)}
                      content={"Typescript"}
                    />

                    <Tag
                      className={classNames("__wab_instance", sty.tag__jx23F)}
                      content={"Typescript"}
                    />

                    <Tag
                      className={classNames("__wab_instance", sty.tag__jeyK)}
                      content={"Typescript"}
                    />

                    <Tag
                      className={classNames("__wab_instance", sty.tag__xbSwq)}
                      content={"Typescript"}
                    />

                    <Tag
                      className={classNames("__wab_instance", sty.tag__vENlV)}
                      content={"Typescript"}
                    />

                    <Tag
                      className={classNames("__wab_instance", sty.tag__uQwQ)}
                      content={"Typescript"}
                    />
                  </React.Fragment>
                ),
                value: args.tags
              })}
            </p.Stack>
          ) : null}
        </p.Stack>
      ) : null}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__wq10V, {
          [sty.freeBoxinsideOffer__wq10VTm81Q]: hasVariant(
            variants,
            "insideOffer",
            "insideOffer"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Salario",
          value: args.salario,
          className: classNames(sty.slotTargetSalario)
        })}

        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          {"|"}
        </div>

        {p.renderPlasmicSlot({
          defaultContents: "Experiencia",
          value: args.experiencia,
          className: classNames(sty.slotTargetExperiencia)
        })}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOfferCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOfferCard__VariantsArgs;
    args?: PlasmicOfferCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOfferCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOfferCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicOfferCard__ArgProps,
          internalVariantPropNames: PlasmicOfferCard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicOfferCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOfferCard";
  } else {
    func.displayName = `PlasmicOfferCard.${nodeName}`;
  }
  return func;
}

export const PlasmicOfferCard = Object.assign(
  // Top-level PlasmicOfferCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicOfferCard
    internalVariantProps: PlasmicOfferCard__VariantProps,
    internalArgProps: PlasmicOfferCard__ArgProps
  }
);

export default PlasmicOfferCard;
/* prettier-ignore-end */
