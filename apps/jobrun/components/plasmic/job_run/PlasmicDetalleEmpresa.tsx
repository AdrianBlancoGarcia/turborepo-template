// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: upY9cnzMG3kZgeoF6ecCnw
// Component: jmkS1wpwGB
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: GfUnvF4AzI/component
import LinkJr2 from "../../LinkJr2"; // plasmic-import: tsRi3ugy1sA/component
import Button from "../../Button"; // plasmic-import: BnsO6Lq9gm/component
import Logo from "../../Logo"; // plasmic-import: EamO-yxXIE/component
import Breadcrumb from "../../Breadcrumb"; // plasmic-import: 7UcG5nMlKQ/component
import BreadcrumbItem from "../../BreadcrumbItem"; // plasmic-import: A_6EkRxcWe/component
import CompanyDetails from "../../CompanyDetails"; // plasmic-import: Ru-AfF8KEe4/component
import ValueItem from "../../ValueItem"; // plasmic-import: sij89BGYq6/component
import CompanyLink2 from "../../CompanyLink2"; // plasmic-import: DqqFqbcMQFE/component
import CompanyOffers from "../../CompanyOffers"; // plasmic-import: tBVNvYmRPnH/component
import OfferCard from "../../OfferCard"; // plasmic-import: j3ZEEkH_dZ/component
import Tag from "../../Tag"; // plasmic-import: y2UxC8Idw2/component
import OfferCardDetailsItem from "../../OfferCardDetailsItem"; // plasmic-import: E8-Ct61FHc/component
import Banner from "../../Banner"; // plasmic-import: CVyrqsg7IH/component
import Footer from "../../Footer"; // plasmic-import: JpAsUvUFqp/component

import { useScreenVariants as useScreenVariants_2SafZfzx0FlS7 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2SAFZfzx0FlS7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_job_run.module.css"; // plasmic-import: upY9cnzMG3kZgeoF6ecCnw/projectcss
import sty from "./PlasmicDetalleEmpresa.module.css"; // plasmic-import: jmkS1wpwGB/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: -Kyqm1yXpr_/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: -bUtD9hB_g5/icon
import Vector10Icon from "./icons/PlasmicIcon__Vector10"; // plasmic-import: m0MmFEQ7ZK/icon
import Vector6Icon from "./icons/PlasmicIcon__Vector6"; // plasmic-import: Gbkvuahq9N/icon
import Vector7Icon from "./icons/PlasmicIcon__Vector7"; // plasmic-import: 1KVijtEtSK/icon
import Vector8Icon from "./icons/PlasmicIcon__Vector8"; // plasmic-import: e2hxgpzMOc/icon

export type PlasmicDetalleEmpresa__VariantMembers = {};

export type PlasmicDetalleEmpresa__VariantsArgs = {};
type VariantPropType = keyof PlasmicDetalleEmpresa__VariantsArgs;
export const PlasmicDetalleEmpresa__VariantProps = new Array<VariantPropType>();

export type PlasmicDetalleEmpresa__ArgsType = {
  companyImg?: React.ReactNode;
  companyTitle?: React.ReactNode;
  workers?: React.ReactNode;
  flagIcon?: React.ReactNode;
  location?: React.ReactNode;
  companyDescription?: React.ReactNode;
  companyDetails2?: React.ReactNode;
  companyOffers?: React.ReactNode;
  breadcrumb?: React.ReactNode;
  navbar?: React.ReactNode;
  banner?: React.ReactNode;
  footer?: React.ReactNode;
  heading?: React.ReactNode;
};

type ArgPropType = keyof PlasmicDetalleEmpresa__ArgsType;
export const PlasmicDetalleEmpresa__ArgProps = new Array<ArgPropType>(
  "companyImg",
  "companyTitle",
  "workers",
  "flagIcon",
  "location",
  "companyDescription",
  "companyDetails2",
  "companyOffers",
  "breadcrumb",
  "navbar",
  "banner",
  "footer",
  "heading"
);

export type PlasmicDetalleEmpresa__OverridesType = {
  root?: p.Flex<"div">;
  offers?: p.Flex<"div">;
  empresa?: p.Flex<"div">;
  descripcionOferta?: p.Flex<"div">;
  pageTitleDetails?: p.Flex<"div">;
  offerTitleBox?: p.Flex<"div">;
  titleBox?: p.Flex<"div">;
  offerData?: p.Flex<"div">;
  cardDetailItem?: p.Flex<"div">;
  offerDescription?: p.Flex<"div">;
};

export interface DefaultDetalleEmpresaProps {}

function PlasmicDetalleEmpresa__RenderFunc(props: {
  variants: PlasmicDetalleEmpresa__VariantsArgs;
  args: PlasmicDetalleEmpresa__ArgsType;
  overrides: PlasmicDetalleEmpresa__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2SafZfzx0FlS7()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox___682Jh)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <NavBar
                  className={classNames("__wab_instance", sty.navBar__rpgtx)}
                  menuButton={
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__uMrMn
                      )}
                      color={[]}
                      label={"Ãšnete a JobRun"}
                      menu={"black" as const}
                    />
                  }
                  navLogo={
                    <Logo
                      className={classNames("__wab_instance", sty.logo__h4Zx)}
                      logo={"complexWhite" as const}
                    />
                  }
                  page={"detail" as const}
                />
              ),

              value: args.navbar
            })}
          </div>

          <div
            data-plasmic-name={"offers"}
            data-plasmic-override={overrides.offers}
            className={classNames(projectcss.all, sty.offers)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jkrsl)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"empresa"}
                data-plasmic-override={overrides.empresa}
                hasGap={true}
                className={classNames(projectcss.all, sty.empresa)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"descripcionOferta"}
                  data-plasmic-override={overrides.descripcionOferta}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.descripcionOferta)}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <Breadcrumb
                        className={classNames(
                          "__wab_instance",
                          sty.breadcrumb___81Aj8
                        )}
                      />
                    ),

                    value: args.breadcrumb
                  })}

                  <div
                    className={classNames(projectcss.all, sty.freeBox__svtD9)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "Heading",
                      value: args.heading,
                      className: classNames(sty.slotTargetHeading)
                    })}
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__rp3)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"pageTitleDetails"}
                      data-plasmic-override={overrides.pageTitleDetails}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.pageTitleDetails
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"offerTitleBox"}
                        data-plasmic-override={overrides.offerTitleBox}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.offerTitleBox
                        )}
                      >
                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fuZ1V
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: (
                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__zUzDx)}
                                  displayHeight={"82px" as const}
                                  displayMaxHeight={"none" as const}
                                  displayMaxWidth={"100%" as const}
                                  displayMinHeight={"0" as const}
                                  displayMinWidth={"0" as const}
                                  displayWidth={"82px" as const}
                                  loader={"plasmic"}
                                  loading={"lazy" as const}
                                />
                              ),

                              value: args.companyImg
                            })}
                          </div>
                        ) : null}

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"titleBox"}
                          data-plasmic-override={overrides.titleBox}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.titleBox)}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__afR7V
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: "Title",
                              value: args.companyTitle,
                              className: classNames(sty.slotTargetCompanyTitle)
                            })}
                          </div>

                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"offerData"}
                            data-plasmic-override={overrides.offerData}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.offerData
                            )}
                          >
                            {p.renderPlasmicSlot({
                              defaultContents: "WorkersNumber",
                              value: args.workers,
                              className: classNames(sty.slotTargetWorkers)
                            })}

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qnFdl
                              )}
                            >
                              {"|"}
                            </div>

                            <p.Stack
                              as={"div"}
                              data-plasmic-name={"cardDetailItem"}
                              data-plasmic-override={overrides.cardDetailItem}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.cardDetailItem
                              )}
                            >
                              {p.renderPlasmicSlot({
                                defaultContents: (
                                  <svg
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__f00CH
                                    )}
                                    role={"img"}
                                  />
                                ),

                                value: args.flagIcon
                              })}

                              {p.renderPlasmicSlot({
                                defaultContents: (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__i2Q2F
                                    )}
                                  >
                                    {"Location"}
                                  </div>
                                ),

                                value: args.location,
                                className: classNames(sty.slotTargetLocation)
                              })}
                            </p.Stack>
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"offerDescription"}
                      data-plasmic-override={overrides.offerDescription}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.offerDescription
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___9Stv
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__qYu8S
                          )}
                        >
                          {"DescripciÃ³n de la empresa"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__fWrYo
                          )}
                        >
                          {p.renderPlasmicSlot({
                            defaultContents:
                              "En este puesto de trabajo aprenderÃ¡s a manejar la plataforma de colaboraciÃ³n empresarial asÃ­ como sus productos y elementos de software.\n\nPodrÃ¡s crear sitios de hosting web donde se acceda a espacios de trabajo compartido, almacenando informaciÃ³n y documentos, asÃ­ como alojar blogs o wikis.En este curso aprenderÃ¡s a manejar la plataforma de colaboraciÃ³n empresarial asÃ­ como sus productos y elementos de software.",
                            value: args.companyDescription,
                            className: classNames(
                              sty.slotTargetCompanyDescription
                            )
                          })}
                        </div>
                      </p.Stack>

                      {true ? (
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qBNa5
                          )}
                        >
                          {true
                            ? p.renderPlasmicSlot({
                                defaultContents: (
                                  <React.Fragment>
                                    {true ? (
                                      <CompanyDetails
                                        className={classNames(
                                          "__wab_instance",
                                          sty.companyDetails__ojEWz
                                        )}
                                        companyValues={
                                          <React.Fragment>
                                            <ValueItem
                                              className={classNames(
                                                "__wab_instance",
                                                sty.valueItem__lNXsV
                                              )}
                                              color={"grey" as const}
                                            />

                                            <ValueItem
                                              className={classNames(
                                                "__wab_instance",
                                                sty.valueItem__gQ5Iy
                                              )}
                                              color={"grey" as const}
                                            />

                                            <ValueItem
                                              className={classNames(
                                                "__wab_instance",
                                                sty.valueItem__v1Uew
                                              )}
                                              color={"grey" as const}
                                            />

                                            <ValueItem
                                              className={classNames(
                                                "__wab_instance",
                                                sty.valueItem__adAtx
                                              )}
                                              color={"grey" as const}
                                            />

                                            <ValueItem
                                              className={classNames(
                                                "__wab_instance",
                                                sty.valueItem__ph5UM
                                              )}
                                              color={"grey" as const}
                                            />

                                            <ValueItem
                                              className={classNames(
                                                "__wab_instance",
                                                sty.valueItem__hYvPv
                                              )}
                                              color={"grey" as const}
                                            />

                                            <ValueItem
                                              className={classNames(
                                                "__wab_instance",
                                                sty.valueItem__k7Nwa
                                              )}
                                              color={"grey" as const}
                                            />

                                            <ValueItem
                                              className={classNames(
                                                "__wab_instance",
                                                sty.valueItem___5QtgZ
                                              )}
                                              color={"grey" as const}
                                            />

                                            <ValueItem
                                              className={classNames(
                                                "__wab_instance",
                                                sty.valueItem___0VlWm
                                              )}
                                              color={"grey" as const}
                                            />
                                          </React.Fragment>
                                        }
                                        type={"valores" as const}
                                      />
                                    ) : null}

                                    <CompanyDetails
                                      className={classNames(
                                        "__wab_instance",
                                        sty.companyDetails___8Wj1M
                                      )}
                                      companyLinks={
                                        <React.Fragment>
                                          <CompanyLink2
                                            className={classNames(
                                              "__wab_instance",
                                              sty.companyLink2__xjEeI
                                            )}
                                            color={"grey" as const}
                                            showEndIcon={true}
                                            showStartIcon={true}
                                          />

                                          <CompanyLink2
                                            className={classNames(
                                              "__wab_instance",
                                              sty.companyLink2__lPuLh
                                            )}
                                            color={"grey" as const}
                                            showEndIcon={true}
                                            showStartIcon={true}
                                          />

                                          <CompanyLink2
                                            className={classNames(
                                              "__wab_instance",
                                              sty.companyLink2__oO6EY
                                            )}
                                            color={"grey" as const}
                                            showEndIcon={true}
                                            showStartIcon={true}
                                          />

                                          <CompanyLink2
                                            className={classNames(
                                              "__wab_instance",
                                              sty.companyLink2__nfYWl
                                            )}
                                            color={"grey" as const}
                                            showEndIcon={true}
                                            showStartIcon={true}
                                          />

                                          <CompanyLink2
                                            className={classNames(
                                              "__wab_instance",
                                              sty.companyLink2__giQxb
                                            )}
                                            color={"grey" as const}
                                            showEndIcon={true}
                                            showStartIcon={true}
                                          />

                                          <CompanyLink2
                                            className={classNames(
                                              "__wab_instance",
                                              sty.companyLink2__fsqUu
                                            )}
                                            color={"grey" as const}
                                            showEndIcon={true}
                                            showStartIcon={true}
                                          />

                                          <CompanyLink2
                                            className={classNames(
                                              "__wab_instance",
                                              sty.companyLink2__tEp0U
                                            )}
                                            color={"grey" as const}
                                            showEndIcon={true}
                                            showStartIcon={true}
                                          />

                                          <CompanyLink2
                                            className={classNames(
                                              "__wab_instance",
                                              sty.companyLink2__t8KE
                                            )}
                                            color={"grey" as const}
                                            showEndIcon={true}
                                            showStartIcon={true}
                                          />

                                          <CompanyLink2
                                            className={classNames(
                                              "__wab_instance",
                                              sty.companyLink2__vcgtB
                                            )}
                                            color={"grey" as const}
                                            showEndIcon={true}
                                            showStartIcon={true}
                                          />

                                          <CompanyLink2
                                            className={classNames(
                                              "__wab_instance",
                                              sty.companyLink2___4Vp7C
                                            )}
                                            color={"grey" as const}
                                            showEndIcon={true}
                                            showStartIcon={true}
                                          />

                                          <CompanyLink2
                                            className={classNames(
                                              "__wab_instance",
                                              sty.companyLink2___8KQxX
                                            )}
                                            color={"grey" as const}
                                            showEndIcon={true}
                                            showStartIcon={true}
                                          />

                                          <CompanyLink2
                                            className={classNames(
                                              "__wab_instance",
                                              sty.companyLink2__zUpwq
                                            )}
                                            color={"grey" as const}
                                            showEndIcon={true}
                                            showStartIcon={true}
                                          />
                                        </React.Fragment>
                                      }
                                      companyValues={
                                        <React.Fragment>
                                          <ValueItem
                                            className={classNames(
                                              "__wab_instance",
                                              sty.valueItem__d6GPr
                                            )}
                                            color={"grey" as const}
                                          />

                                          <ValueItem
                                            className={classNames(
                                              "__wab_instance",
                                              sty.valueItem__gQ5Iy
                                            )}
                                            color={"grey" as const}
                                          />

                                          <ValueItem
                                            className={classNames(
                                              "__wab_instance",
                                              sty.valueItem__v1Uew
                                            )}
                                            color={"grey" as const}
                                          />

                                          <ValueItem
                                            className={classNames(
                                              "__wab_instance",
                                              sty.valueItem__adAtx
                                            )}
                                            color={"grey" as const}
                                          />

                                          <ValueItem
                                            className={classNames(
                                              "__wab_instance",
                                              sty.valueItem__ph5UM
                                            )}
                                            color={"grey" as const}
                                          />

                                          <ValueItem
                                            className={classNames(
                                              "__wab_instance",
                                              sty.valueItem__hYvPv
                                            )}
                                            color={"grey" as const}
                                          />

                                          <ValueItem
                                            className={classNames(
                                              "__wab_instance",
                                              sty.valueItem__k7Nwa
                                            )}
                                            color={"grey" as const}
                                          />

                                          <ValueItem
                                            className={classNames(
                                              "__wab_instance",
                                              sty.valueItem___5QtgZ
                                            )}
                                            color={"grey" as const}
                                          />

                                          <ValueItem
                                            className={classNames(
                                              "__wab_instance",
                                              sty.valueItem___0VlWm
                                            )}
                                            color={"grey" as const}
                                          />
                                        </React.Fragment>
                                      }
                                      type={"enlaces" as const}
                                    />
                                  </React.Fragment>
                                ),
                                value: args.companyDetails2
                              })
                            : null}
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              {p.renderPlasmicSlot({
                defaultContents: (
                  <CompanyOffers
                    className={classNames(
                      "__wab_instance",
                      sty.companyOffers__pF7Rj
                    )}
                  />
                ),

                value: args.companyOffers
              })}
            </p.Stack>
          </div>

          {p.renderPlasmicSlot({
            defaultContents: (
              <Banner
                className={classNames("__wab_instance", sty.banner__d6Il)}
              />
            ),

            value: args.banner
          })}

          {p.renderPlasmicSlot({
            defaultContents: (
              <Footer
                className={classNames("__wab_instance", sty.footer___3RT5T)}
              />
            ),

            value: args.footer
          })}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "offers",
    "empresa",
    "descripcionOferta",
    "pageTitleDetails",
    "offerTitleBox",
    "titleBox",
    "offerData",
    "cardDetailItem",
    "offerDescription"
  ],
  offers: [
    "offers",
    "empresa",
    "descripcionOferta",
    "pageTitleDetails",
    "offerTitleBox",
    "titleBox",
    "offerData",
    "cardDetailItem",
    "offerDescription"
  ],
  empresa: [
    "empresa",
    "descripcionOferta",
    "pageTitleDetails",
    "offerTitleBox",
    "titleBox",
    "offerData",
    "cardDetailItem",
    "offerDescription"
  ],
  descripcionOferta: [
    "descripcionOferta",
    "pageTitleDetails",
    "offerTitleBox",
    "titleBox",
    "offerData",
    "cardDetailItem",
    "offerDescription"
  ],
  pageTitleDetails: [
    "pageTitleDetails",
    "offerTitleBox",
    "titleBox",
    "offerData",
    "cardDetailItem"
  ],
  offerTitleBox: ["offerTitleBox", "titleBox", "offerData", "cardDetailItem"],
  titleBox: ["titleBox", "offerData", "cardDetailItem"],
  offerData: ["offerData", "cardDetailItem"],
  cardDetailItem: ["cardDetailItem"],
  offerDescription: ["offerDescription"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  offers: "div";
  empresa: "div";
  descripcionOferta: "div";
  pageTitleDetails: "div";
  offerTitleBox: "div";
  titleBox: "div";
  offerData: "div";
  cardDetailItem: "div";
  offerDescription: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDetalleEmpresa__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDetalleEmpresa__VariantsArgs;
    args?: PlasmicDetalleEmpresa__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDetalleEmpresa__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDetalleEmpresa__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDetalleEmpresa__ArgProps,
          internalVariantPropNames: PlasmicDetalleEmpresa__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicDetalleEmpresa__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDetalleEmpresa";
  } else {
    func.displayName = `PlasmicDetalleEmpresa.${nodeName}`;
  }
  return func;
}

export const PlasmicDetalleEmpresa = Object.assign(
  // Top-level PlasmicDetalleEmpresa renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    offers: makeNodeComponent("offers"),
    empresa: makeNodeComponent("empresa"),
    descripcionOferta: makeNodeComponent("descripcionOferta"),
    pageTitleDetails: makeNodeComponent("pageTitleDetails"),
    offerTitleBox: makeNodeComponent("offerTitleBox"),
    titleBox: makeNodeComponent("titleBox"),
    offerData: makeNodeComponent("offerData"),
    cardDetailItem: makeNodeComponent("cardDetailItem"),
    offerDescription: makeNodeComponent("offerDescription"),

    // Metadata about props expected for PlasmicDetalleEmpresa
    internalVariantProps: PlasmicDetalleEmpresa__VariantProps,
    internalArgProps: PlasmicDetalleEmpresa__ArgProps
  }
);

export default PlasmicDetalleEmpresa;
/* prettier-ignore-end */
