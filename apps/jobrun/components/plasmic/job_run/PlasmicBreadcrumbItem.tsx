// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: upY9cnzMG3kZgeoF6ecCnw
// Component: A_6EkRxcWe
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_job_run.module.css"; // plasmic-import: upY9cnzMG3kZgeoF6ecCnw/projectcss
import sty from "./PlasmicBreadcrumbItem.module.css"; // plasmic-import: A_6EkRxcWe/css

import NextIcon from "./icons/PlasmicIcon__Next"; // plasmic-import: vuj_EqxsH/icon

export type PlasmicBreadcrumbItem__VariantMembers = {
  hierarchy: "parent" | "child" | "childLast";
};

export type PlasmicBreadcrumbItem__VariantsArgs = {
  hierarchy?: SingleChoiceArg<"parent" | "child" | "childLast">;
};

type VariantPropType = keyof PlasmicBreadcrumbItem__VariantsArgs;
export const PlasmicBreadcrumbItem__VariantProps = new Array<VariantPropType>(
  "hierarchy"
);

export type PlasmicBreadcrumbItem__ArgsType = {
  breadcrumbParent?: React.ReactNode;
  breadcrumbChild?: React.ReactNode;
  breadcrumbChildLast?: React.ReactNode;
};

type ArgPropType = keyof PlasmicBreadcrumbItem__ArgsType;
export const PlasmicBreadcrumbItem__ArgProps = new Array<ArgPropType>(
  "breadcrumbParent",
  "breadcrumbChild",
  "breadcrumbChildLast"
);

export type PlasmicBreadcrumbItem__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  svg?: p.Flex<"svg">;
};

export interface DefaultBreadcrumbItemProps {
  breadcrumbParent?: React.ReactNode;
  breadcrumbChild?: React.ReactNode;
  breadcrumbChildLast?: React.ReactNode;
  hierarchy?: SingleChoiceArg<"parent" | "child" | "childLast">;
  className?: string;
}

function PlasmicBreadcrumbItem__RenderFunc(props: {
  variants: PlasmicBreadcrumbItem__VariantsArgs;
  args: PlasmicBreadcrumbItem__ArgsType;
  overrides: PlasmicBreadcrumbItem__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.roothierarchy_childLast]: hasVariant(
            variants,
            "hierarchy",
            "childLast"
          )
        }
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___5J96P, {
          [sty.freeBoxhierarchy_childLast___5J96PjFpbx]: hasVariant(
            variants,
            "hierarchy",
            "childLast"
          ),
          [sty.freeBoxhierarchy_parent___5J96PDwhxY]: hasVariant(
            variants,
            "hierarchy",
            "parent"
          )
        })}
      >
        {(
          hasVariant(variants, "hierarchy", "childLast")
            ? true
            : hasVariant(variants, "hierarchy", "child")
            ? true
            : true
        ) ? (
          <p.PlasmicLink
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.all, projectcss.a, sty.link, {
              [sty.linkhierarchy_childLast]: hasVariant(
                variants,
                "hierarchy",
                "childLast"
              ),
              [sty.linkhierarchy_child]: hasVariant(
                variants,
                "hierarchy",
                "child"
              ),
              [sty.linkhierarchy_parent]: hasVariant(
                variants,
                "hierarchy",
                "parent"
              )
            })}
            component={Link}
            href={"https://www.plasmic.app/" as const}
            platform={"nextjs"}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Parent",
              value: args.breadcrumbParent,
              className: classNames(sty.slotTargetBreadcrumbParent, {
                [sty.slotTargetBreadcrumbParenthierarchy_childLast]: hasVariant(
                  variants,
                  "hierarchy",
                  "childLast"
                ),
                [sty.slotTargetBreadcrumbParenthierarchy_child]: hasVariant(
                  variants,
                  "hierarchy",
                  "child"
                ),
                [sty.slotTargetBreadcrumbParenthierarchy_parent]: hasVariant(
                  variants,
                  "hierarchy",
                  "parent"
                )
              })
            })}
          </p.PlasmicLink>
        ) : null}

        {(
          hasVariant(variants, "hierarchy", "childLast")
            ? true
            : hasVariant(variants, "hierarchy", "child")
            ? true
            : true
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox___5L2Vi, {
              [sty.freeBoxhierarchy_childLast___5L2ViJFpbx]: hasVariant(
                variants,
                "hierarchy",
                "childLast"
              ),
              [sty.freeBoxhierarchy_child___5L2ViN1Xb9]: hasVariant(
                variants,
                "hierarchy",
                "child"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "",
              value: args.breadcrumbChild,
              className: classNames(sty.slotTargetBreadcrumbChild, {
                [sty.slotTargetBreadcrumbChildhierarchy_childLast]: hasVariant(
                  variants,
                  "hierarchy",
                  "childLast"
                ),
                [sty.slotTargetBreadcrumbChildhierarchy_child]: hasVariant(
                  variants,
                  "hierarchy",
                  "child"
                )
              })
            })}
          </div>
        ) : null}

        {(hasVariant(variants, "hierarchy", "child") ? true : true) ? (
          <NextIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg, {
              [sty.svghierarchy_childLast]: hasVariant(
                variants,
                "hierarchy",
                "childLast"
              ),
              [sty.svghierarchy_child]: hasVariant(
                variants,
                "hierarchy",
                "child"
              ),
              [sty.svghierarchy_parent]: hasVariant(
                variants,
                "hierarchy",
                "parent"
              )
            })}
            role={"img"}
          />
        ) : null}

        {(hasVariant(variants, "hierarchy", "childLast") ? true : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox___9GUn, {
              [sty.freeBoxhierarchy_childLast___9GUnJFpbx]: hasVariant(
                variants,
                "hierarchy",
                "childLast"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "",
              value: args.breadcrumbChildLast,
              className: classNames(sty.slotTargetBreadcrumbChildLast, {
                [sty.slotTargetBreadcrumbChildLasthierarchy_childLast]:
                  hasVariant(variants, "hierarchy", "childLast")
              })
            })}
          </div>
        ) : null}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "svg"],
  link: ["link"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBreadcrumbItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBreadcrumbItem__VariantsArgs;
    args?: PlasmicBreadcrumbItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBreadcrumbItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBreadcrumbItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBreadcrumbItem__ArgProps,
          internalVariantPropNames: PlasmicBreadcrumbItem__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBreadcrumbItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBreadcrumbItem";
  } else {
    func.displayName = `PlasmicBreadcrumbItem.${nodeName}`;
  }
  return func;
}

export const PlasmicBreadcrumbItem = Object.assign(
  // Top-level PlasmicBreadcrumbItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicBreadcrumbItem
    internalVariantProps: PlasmicBreadcrumbItem__VariantProps,
    internalArgProps: PlasmicBreadcrumbItem__ArgProps
  }
);

export default PlasmicBreadcrumbItem;
/* prettier-ignore-end */
