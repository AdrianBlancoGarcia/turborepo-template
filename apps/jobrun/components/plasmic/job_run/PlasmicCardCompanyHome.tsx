// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: upY9cnzMG3kZgeoF6ecCnw
// Component: BYBixYzlfI
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariants_2SafZfzx0FlS7 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 2SAFZfzx0FlS7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_job_run.module.css"; // plasmic-import: upY9cnzMG3kZgeoF6ecCnw/projectcss
import sty from "./PlasmicCardCompanyHome.module.css"; // plasmic-import: BYBixYzlfI/css

export type PlasmicCardCompanyHome__VariantMembers = {};

export type PlasmicCardCompanyHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicCardCompanyHome__VariantsArgs;
export const PlasmicCardCompanyHome__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCardCompanyHome__ArgsType = {
  companyLogo?: React.ReactNode;
  countryFlag?: React.ReactNode;
  cityName?: React.ReactNode;
  companyName?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCardCompanyHome__ArgsType;
export const PlasmicCardCompanyHome__ArgProps = new Array<ArgPropType>(
  "companyLogo",
  "countryFlag",
  "cityName",
  "companyName"
);

export type PlasmicCardCompanyHome__OverridesType = {
  root?: p.Flex<"div">;
  logoBox?: p.Flex<"div">;
  textBox?: p.Flex<"div">;
  cardDetailItem?: p.Flex<"div">;
  location?: p.Flex<"div">;
};

export interface DefaultCardCompanyHomeProps {
  companyLogo?: React.ReactNode;
  countryFlag?: React.ReactNode;
  cityName?: React.ReactNode;
  companyName?: React.ReactNode;
  className?: string;
}

function PlasmicCardCompanyHome__RenderFunc(props: {
  variants: PlasmicCardCompanyHome__VariantsArgs;
  args: PlasmicCardCompanyHome__ArgsType;
  overrides: PlasmicCardCompanyHome__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_2SafZfzx0FlS7()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"logoBox"}
        data-plasmic-override={overrides.logoBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.logoBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__bJcLq)}
              displayHeight={"32px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"32px" as const}
              displayMinWidth={"32px" as const}
              displayWidth={"32px" as const}
              loader={"plasmic"}
              loading={"lazy" as const}
            />
          ),

          value: args.companyLogo
        })}
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"textBox"}
        data-plasmic-override={overrides.textBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.textBox)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__pxEbv)}>
          {p.renderPlasmicSlot({
            defaultContents: "CompanyName",
            value: args.companyName,
            className: classNames(sty.slotTargetCompanyName)
          })}
        </div>

        <p.Stack
          as={"div"}
          data-plasmic-name={"cardDetailItem"}
          data-plasmic-override={overrides.cardDetailItem}
          hasGap={true}
          className={classNames(projectcss.all, sty.cardDetailItem)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__dgoLx)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__awKcM
                  )}
                >
                  {"ðŸ‡ªðŸ‡¸"}
                </div>
              ),

              value: args.countryFlag,
              className: classNames(sty.slotTargetCountryFlag)
            })}
          </div>

          <div
            data-plasmic-name={"location"}
            data-plasmic-override={overrides.location}
            className={classNames(projectcss.all, sty.location)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Location",
              value: args.cityName,
              className: classNames(sty.slotTargetCityName)
            })}
          </div>
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "logoBox", "textBox", "cardDetailItem", "location"],
  logoBox: ["logoBox"],
  textBox: ["textBox", "cardDetailItem", "location"],
  cardDetailItem: ["cardDetailItem", "location"],
  location: ["location"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  logoBox: "div";
  textBox: "div";
  cardDetailItem: "div";
  location: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardCompanyHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardCompanyHome__VariantsArgs;
    args?: PlasmicCardCompanyHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCardCompanyHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardCompanyHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCardCompanyHome__ArgProps,
          internalVariantPropNames: PlasmicCardCompanyHome__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCardCompanyHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardCompanyHome";
  } else {
    func.displayName = `PlasmicCardCompanyHome.${nodeName}`;
  }
  return func;
}

export const PlasmicCardCompanyHome = Object.assign(
  // Top-level PlasmicCardCompanyHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logoBox: makeNodeComponent("logoBox"),
    textBox: makeNodeComponent("textBox"),
    cardDetailItem: makeNodeComponent("cardDetailItem"),
    location: makeNodeComponent("location"),

    // Metadata about props expected for PlasmicCardCompanyHome
    internalVariantProps: PlasmicCardCompanyHome__VariantProps,
    internalArgProps: PlasmicCardCompanyHome__ArgProps
  }
);

export default PlasmicCardCompanyHome;
/* prettier-ignore-end */
