// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fxuAGcsah199rVCjPzGTfY
// Component: bpZukpM1tJlDbv
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Logo from "../../Logo"; // plasmic-import: UL0COo2QPDWZ4b/component
import Button from "../../Button"; // plasmic-import: xxIo1oxPKF17E6/component

import { useScreenVariants as useScreenVariantsngzoyd6GPz8Rig } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Ngzoyd6gPZ8rig/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_marketers.module.css"; // plasmic-import: fxuAGcsah199rVCjPzGTfY/projectcss
import sty from "./PlasmicFooterSection.module.css"; // plasmic-import: bpZukpM1tJlDbv/css

import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: bSsTEcq38cO9yG/icon

export type PlasmicFooterSection__VariantMembers = {};

export type PlasmicFooterSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooterSection__VariantsArgs;
export const PlasmicFooterSection__VariantProps = new Array<VariantPropType>();

export type PlasmicFooterSection__ArgsType = {
  footerLinks?: React.ReactNode;
};

type ArgPropType = keyof PlasmicFooterSection__ArgsType;
export const PlasmicFooterSection__ArgProps = new Array<ArgPropType>(
  "footerLinks"
);

export type PlasmicFooterSection__OverridesType = {
  root?: p.Flex<"div">;
  leftSection?: p.Flex<"div">;
  logo?: p.Flex<typeof Logo>;
  leftSection2?: p.Flex<"div">;
  text?: p.Flex<"div">;
  links?: p.Flex<"div">;
  button?: p.Flex<"div">;
  buttonContent?: p.Flex<"div">;
  label?: p.Flex<"div">;
  button2?: p.Flex<"div">;
  buttonContent2?: p.Flex<"div">;
  label2?: p.Flex<"div">;
  _2021LandifyUiKitAllRightsReserved?: p.Flex<"div">;
};

export interface DefaultFooterSectionProps {
  footerLinks?: React.ReactNode;
  className?: string;
}

function PlasmicFooterSection__RenderFunc(props: {
  variants: PlasmicFooterSection__VariantsArgs;
  args: PlasmicFooterSection__ArgsType;
  overrides: PlasmicFooterSection__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsngzoyd6GPz8Rig()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__r2B87)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__jvvwr)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"leftSection"}
            data-plasmic-override={overrides.leftSection}
            hasGap={true}
            className={classNames(projectcss.all, sty.leftSection)}
          >
            <Logo
              data-plasmic-name={"logo"}
              data-plasmic-override={overrides.logo}
            />
          </p.Stack>

          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"leftSection2"}
              data-plasmic-override={overrides.leftSection2}
              hasGap={true}
              className={classNames(projectcss.all, sty.leftSection2)}
            >
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Políticas"}
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"links"}
                data-plasmic-override={overrides.links}
                hasGap={true}
                className={classNames(projectcss.all, sty.links)}
              >
                <div
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames(projectcss.all, sty.button)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"buttonContent"}
                    data-plasmic-override={overrides.buttonContent}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.buttonContent)}
                  >
                    <div
                      data-plasmic-name={"label"}
                      data-plasmic-override={overrides.label}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label
                      )}
                    >
                      {"Política de cookies"}
                    </div>
                  </p.Stack>
                </div>

                <div
                  data-plasmic-name={"button2"}
                  data-plasmic-override={overrides.button2}
                  className={classNames(projectcss.all, sty.button2)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"buttonContent2"}
                    data-plasmic-override={overrides.buttonContent2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.buttonContent2)}
                  >
                    <div
                      data-plasmic-name={"label2"}
                      data-plasmic-override={overrides.label2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.label2
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Política de privacidad"
                        : "Política de privacidad"}
                    </div>
                  </p.Stack>
                </div>
              </p.Stack>
            </p.Stack>
          ) : null}
        </p.Stack>

        <div
          data-plasmic-name={"_2021LandifyUiKitAllRightsReserved"}
          data-plasmic-override={overrides._2021LandifyUiKitAllRightsReserved}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty._2021LandifyUiKitAllRightsReserved
          )}
        >
          {"© 2022 OpenMarketers. Todos los derechos reservados"}
        </div>

        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__w6TjR)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <Button
                    className={classNames("__wab_instance", sty.button___66Mt3)}
                    color={"navLink" as const}
                    size={"small" as const}
                  >
                    {"Política de cookies"}
                  </Button>

                  <Button
                    className={classNames("__wab_instance", sty.button__bcC4P)}
                    color={"navLink" as const}
                    size={"small" as const}
                  >
                    {"Política de Privacidad"}
                  </Button>

                  <Button
                    className={classNames("__wab_instance", sty.button__wvsWr)}
                    color={"navLink" as const}
                    size={"small" as const}
                  >
                    {"Términos y Condiciones"}
                  </Button>
                </React.Fragment>
              ),
              value: args.footerLinks
            })}
          </p.Stack>
        ) : null}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "leftSection",
    "logo",
    "leftSection2",
    "text",
    "links",
    "button",
    "buttonContent",
    "label",
    "button2",
    "buttonContent2",
    "label2",
    "_2021LandifyUiKitAllRightsReserved"
  ],
  leftSection: ["leftSection", "logo"],
  logo: ["logo"],
  leftSection2: [
    "leftSection2",
    "text",
    "links",
    "button",
    "buttonContent",
    "label",
    "button2",
    "buttonContent2",
    "label2"
  ],
  text: ["text"],
  links: [
    "links",
    "button",
    "buttonContent",
    "label",
    "button2",
    "buttonContent2",
    "label2"
  ],
  button: ["button", "buttonContent", "label"],
  buttonContent: ["buttonContent", "label"],
  label: ["label"],
  button2: ["button2", "buttonContent2", "label2"],
  buttonContent2: ["buttonContent2", "label2"],
  label2: ["label2"],
  _2021LandifyUiKitAllRightsReserved: ["_2021LandifyUiKitAllRightsReserved"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  leftSection: "div";
  logo: typeof Logo;
  leftSection2: "div";
  text: "div";
  links: "div";
  button: "div";
  buttonContent: "div";
  label: "div";
  button2: "div";
  buttonContent2: "div";
  label2: "div";
  _2021LandifyUiKitAllRightsReserved: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooterSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooterSection__VariantsArgs;
    args?: PlasmicFooterSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooterSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooterSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooterSection__ArgProps,
          internalVariantPropNames: PlasmicFooterSection__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicFooterSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterSection";
  } else {
    func.displayName = `PlasmicFooterSection.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterSection = Object.assign(
  // Top-level PlasmicFooterSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    leftSection: makeNodeComponent("leftSection"),
    logo: makeNodeComponent("logo"),
    leftSection2: makeNodeComponent("leftSection2"),
    text: makeNodeComponent("text"),
    links: makeNodeComponent("links"),
    button: makeNodeComponent("button"),
    buttonContent: makeNodeComponent("buttonContent"),
    label: makeNodeComponent("label"),
    button2: makeNodeComponent("button2"),
    buttonContent2: makeNodeComponent("buttonContent2"),
    label2: makeNodeComponent("label2"),
    _2021LandifyUiKitAllRightsReserved: makeNodeComponent(
      "_2021LandifyUiKitAllRightsReserved"
    ),

    // Metadata about props expected for PlasmicFooterSection
    internalVariantProps: PlasmicFooterSection__VariantProps,
    internalArgProps: PlasmicFooterSection__ArgProps
  }
);

export default PlasmicFooterSection;
/* prettier-ignore-end */
