// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fxuAGcsah199rVCjPzGTfY
// Component: Ye9aVWVYDq
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_marketers.module.css"; // plasmic-import: fxuAGcsah199rVCjPzGTfY/projectcss
import sty from "./PlasmicFaq.module.css"; // plasmic-import: Ye9aVWVYDq/css

export type PlasmicFaq__VariantMembers = {};

export type PlasmicFaq__VariantsArgs = {};
type VariantPropType = keyof PlasmicFaq__VariantsArgs;
export const PlasmicFaq__VariantProps = new Array<VariantPropType>();

export type PlasmicFaq__ArgsType = {
  children?: React.ReactNode;
  subtitle?: React.ReactNode;
  content?: React.ReactNode;
};

type ArgPropType = keyof PlasmicFaq__ArgsType;
export const PlasmicFaq__ArgProps = new Array<ArgPropType>(
  "children",
  "subtitle",
  "content"
);

export type PlasmicFaq__OverridesType = {
  root?: p.Flex<"div">;
  sectionHeading?: p.Flex<"div">;
  title?: p.Flex<"div">;
  subtitle?: p.Flex<"div">;
  content?: p.Flex<"div">;
};

export interface DefaultFaqProps {
  children?: React.ReactNode;
  subtitle?: React.ReactNode;
  content?: React.ReactNode;
  className?: string;
}

function PlasmicFaq__RenderFunc(props: {
  variants: PlasmicFaq__VariantsArgs;
  args: PlasmicFaq__ArgsType;
  overrides: PlasmicFaq__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"sectionHeading"}
        data-plasmic-override={overrides.sectionHeading}
        hasGap={true}
        className={classNames(projectcss.all, sty.sectionHeading)}
      >
        <div
          data-plasmic-name={"title"}
          data-plasmic-override={overrides.title}
          className={classNames(projectcss.all, sty.title)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Â¿Tienes dudas sobre OpenMarketers?",
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </div>

        <div
          data-plasmic-name={"subtitle"}
          data-plasmic-override={overrides.subtitle}
          className={classNames(projectcss.all, sty.subtitle)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Subtitle",
            value: args.subtitle,
            className: classNames(sty.slotTargetSubtitle)
          })}
        </div>
      </p.Stack>

      <div
        data-plasmic-name={"content"}
        data-plasmic-override={overrides.content}
        className={classNames(projectcss.all, sty.content)}
      >
        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.content
        })}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "sectionHeading", "title", "subtitle", "content"],
  sectionHeading: ["sectionHeading", "title", "subtitle"],
  title: ["title"],
  subtitle: ["subtitle"],
  content: ["content"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sectionHeading: "div";
  title: "div";
  subtitle: "div";
  content: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFaq__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFaq__VariantsArgs;
    args?: PlasmicFaq__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFaq__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFaq__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFaq__ArgProps,
      internalVariantPropNames: PlasmicFaq__VariantProps
    });

    return PlasmicFaq__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaq";
  } else {
    func.displayName = `PlasmicFaq.${nodeName}`;
  }
  return func;
}

export const PlasmicFaq = Object.assign(
  // Top-level PlasmicFaq renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionHeading: makeNodeComponent("sectionHeading"),
    title: makeNodeComponent("title"),
    subtitle: makeNodeComponent("subtitle"),
    content: makeNodeComponent("content"),

    // Metadata about props expected for PlasmicFaq
    internalVariantProps: PlasmicFaq__VariantProps,
    internalArgProps: PlasmicFaq__ArgProps
  }
);

export default PlasmicFaq;
/* prettier-ignore-end */
