// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fxuAGcsah199rVCjPzGTfY
// Component: qE3YWQny7R
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsngzoyd6GPz8Rig } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Ngzoyd6gPZ8rig/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_marketers.module.css"; // plasmic-import: fxuAGcsah199rVCjPzGTfY/projectcss
import sty from "./PlasmicModuleItemCard.module.css"; // plasmic-import: qE3YWQny7R/css

import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: CuFslScVrbs/icon

export type PlasmicModuleItemCard__VariantMembers = {};

export type PlasmicModuleItemCard__VariantsArgs = {};
type VariantPropType = keyof PlasmicModuleItemCard__VariantsArgs;
export const PlasmicModuleItemCard__VariantProps = new Array<VariantPropType>();

export type PlasmicModuleItemCard__ArgsType = {
  titulo?: React.ReactNode;
  moduleIcon?: React.ReactNode;
  detailsTitle?: React.ReactNode;
};

type ArgPropType = keyof PlasmicModuleItemCard__ArgsType;
export const PlasmicModuleItemCard__ArgProps = new Array<ArgPropType>(
  "titulo",
  "moduleIcon",
  "detailsTitle"
);

export type PlasmicModuleItemCard__OverridesType = {
  root?: p.Flex<"div">;
  titleContainer?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  moduleTitle?: p.Flex<"div">;
  detailsContainer?: p.Flex<"div">;
  icon?: p.Flex<"svg">;
};

export interface DefaultModuleItemCardProps {
  titulo?: React.ReactNode;
  moduleIcon?: React.ReactNode;
  detailsTitle?: React.ReactNode;
  className?: string;
}

function PlasmicModuleItemCard__RenderFunc(props: {
  variants: PlasmicModuleItemCard__VariantsArgs;
  args: PlasmicModuleItemCard__ArgsType;
  overrides: PlasmicModuleItemCard__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsngzoyd6GPz8Rig()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"titleContainer"}
        data-plasmic-override={overrides.titleContainer}
        hasGap={true}
        className={classNames(projectcss.all, sty.titleContainer)}
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__nquu)}
                displayHeight={"100%" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                loader={"plasmic"}
                loading={"lazy" as const}
              />
            ),

            value: args.moduleIcon
          })}
        </div>

        <p.Stack
          as={"div"}
          data-plasmic-name={"moduleTitle"}
          data-plasmic-override={overrides.moduleTitle}
          hasGap={true}
          className={classNames(projectcss.all, sty.moduleTitle)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Title",
            value: args.titulo,
            className: classNames(sty.slotTargetTitulo)
          })}

          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"detailsContainer"}
              data-plasmic-override={overrides.detailsContainer}
              hasGap={true}
              className={classNames(projectcss.all, sty.detailsContainer)}
            >
              <Icon6Icon
                data-plasmic-name={"icon"}
                data-plasmic-override={overrides.icon}
                className={classNames(projectcss.all, sty.icon)}
                role={"img"}
              />

              {p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__u7GxL
                    )}
                  >
                    {"6h"}
                  </div>
                ),

                value: args.detailsTitle,
                className: classNames(sty.slotTargetDetailsTitle)
              })}
            </p.Stack>
          ) : null}
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "titleContainer",
    "freeBox",
    "moduleTitle",
    "detailsContainer",
    "icon"
  ],
  titleContainer: [
    "titleContainer",
    "freeBox",
    "moduleTitle",
    "detailsContainer",
    "icon"
  ],
  freeBox: ["freeBox"],
  moduleTitle: ["moduleTitle", "detailsContainer", "icon"],
  detailsContainer: ["detailsContainer", "icon"],
  icon: ["icon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  titleContainer: "div";
  freeBox: "div";
  moduleTitle: "div";
  detailsContainer: "div";
  icon: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicModuleItemCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicModuleItemCard__VariantsArgs;
    args?: PlasmicModuleItemCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicModuleItemCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicModuleItemCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicModuleItemCard__ArgProps,
          internalVariantPropNames: PlasmicModuleItemCard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicModuleItemCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicModuleItemCard";
  } else {
    func.displayName = `PlasmicModuleItemCard.${nodeName}`;
  }
  return func;
}

export const PlasmicModuleItemCard = Object.assign(
  // Top-level PlasmicModuleItemCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    titleContainer: makeNodeComponent("titleContainer"),
    freeBox: makeNodeComponent("freeBox"),
    moduleTitle: makeNodeComponent("moduleTitle"),
    detailsContainer: makeNodeComponent("detailsContainer"),
    icon: makeNodeComponent("icon"),

    // Metadata about props expected for PlasmicModuleItemCard
    internalVariantProps: PlasmicModuleItemCard__VariantProps,
    internalArgProps: PlasmicModuleItemCard__ArgProps
  }
);

export default PlasmicModuleItemCard;
/* prettier-ignore-end */
