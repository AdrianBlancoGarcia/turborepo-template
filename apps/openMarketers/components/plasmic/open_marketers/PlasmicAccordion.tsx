// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fxuAGcsah199rVCjPzGTfY
// Component: vthZQMbuqd
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_marketers.module.css"; // plasmic-import: fxuAGcsah199rVCjPzGTfY/projectcss
import sty from "./PlasmicAccordion.module.css"; // plasmic-import: vthZQMbuqd/css

import Ellipse75Icon from "./icons/PlasmicIcon__Ellipse75"; // plasmic-import: Qunc7PiYp0/icon

export type PlasmicAccordion__VariantMembers = {};

export type PlasmicAccordion__VariantsArgs = {};
type VariantPropType = keyof PlasmicAccordion__VariantsArgs;
export const PlasmicAccordion__VariantProps = new Array<VariantPropType>();

export type PlasmicAccordion__ArgsType = {
  numeroLecciones?: React.ReactNode;
  numeroHoras?: React.ReactNode;
  accordionContent?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAccordion__ArgsType;
export const PlasmicAccordion__ArgProps = new Array<ArgPropType>(
  "numeroLecciones",
  "numeroHoras",
  "accordionContent"
);

export type PlasmicAccordion__OverridesType = {
  root?: p.Flex<"div">;
  sectionHeading?: p.Flex<"div">;
  text?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  content?: p.Flex<"div">;
};

export interface DefaultAccordionProps {
  numeroLecciones?: React.ReactNode;
  numeroHoras?: React.ReactNode;
  accordionContent?: React.ReactNode;
  className?: string;
}

function PlasmicAccordion__RenderFunc(props: {
  variants: PlasmicAccordion__VariantsArgs;
  args: PlasmicAccordion__ArgsType;
  overrides: PlasmicAccordion__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__gKtVc)}
      >
        <div
          data-plasmic-name={"sectionHeading"}
          data-plasmic-override={overrides.sectionHeading}
          className={classNames(projectcss.all, sty.sectionHeading)}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Contenido del curso"}
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__gb27B)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__tz6W8)}>
              {p.renderPlasmicSlot({
                defaultContents: "N lecciones",
                value: args.numeroLecciones,
                className: classNames(sty.slotTargetNumeroLecciones)
              })}
            </div>

            <Ellipse75Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__eoj)}>
              {p.renderPlasmicSlot({
                defaultContents: "N horas del curso",
                value: args.numeroHoras,
                className: classNames(sty.slotTargetNumeroHoras)
              })}
            </div>
          </p.Stack>
        </div>

        <div
          data-plasmic-name={"content"}
          data-plasmic-override={overrides.content}
          className={classNames(projectcss.all, sty.content)}
        >
          {p.renderPlasmicSlot({
            defaultContents: null,
            value: args.accordionContent
          })}
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "sectionHeading", "text", "svg", "content"],
  sectionHeading: ["sectionHeading", "text", "svg"],
  text: ["text"],
  svg: ["svg"],
  content: ["content"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sectionHeading: "div";
  text: "div";
  svg: "svg";
  content: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccordion__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccordion__VariantsArgs;
    args?: PlasmicAccordion__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccordion__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAccordion__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAccordion__ArgProps,
          internalVariantPropNames: PlasmicAccordion__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAccordion__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccordion";
  } else {
    func.displayName = `PlasmicAccordion.${nodeName}`;
  }
  return func;
}

export const PlasmicAccordion = Object.assign(
  // Top-level PlasmicAccordion renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionHeading: makeNodeComponent("sectionHeading"),
    text: makeNodeComponent("text"),
    svg: makeNodeComponent("svg"),
    content: makeNodeComponent("content"),

    // Metadata about props expected for PlasmicAccordion
    internalVariantProps: PlasmicAccordion__VariantProps,
    internalArgProps: PlasmicAccordion__ArgProps
  }
);

export default PlasmicAccordion;
/* prettier-ignore-end */
