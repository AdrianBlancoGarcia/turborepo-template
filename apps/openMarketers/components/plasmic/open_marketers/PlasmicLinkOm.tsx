// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fxuAGcsah199rVCjPzGTfY
// Component: 1gULMJc0uv
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_marketers.module.css"; // plasmic-import: fxuAGcsah199rVCjPzGTfY/projectcss
import sty from "./PlasmicLinkOm.module.css"; // plasmic-import: 1gULMJc0uv/css

import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: 1LQtfIq6-_/icon
import ArrowDownIcon from "./icons/PlasmicIcon__ArrowDown"; // plasmic-import: bZvSWSgpr/icon

export type PlasmicLinkOm__VariantMembers = {
  showStartIcon: "showStartIcon";
  size: "normal" | "small" | "large";
  showIcon: "start" | "end";
  iconOnly: "close" | "caretDown";
};

export type PlasmicLinkOm__VariantsArgs = {
  showStartIcon?: SingleBooleanChoiceArg<"showStartIcon">;
  size?: MultiChoiceArg<"normal" | "small" | "large">;
  showIcon?: MultiChoiceArg<"start" | "end">;
  iconOnly?: MultiChoiceArg<"close" | "caretDown">;
};

type VariantPropType = keyof PlasmicLinkOm__VariantsArgs;
export const PlasmicLinkOm__VariantProps = new Array<VariantPropType>(
  "showStartIcon",
  "size",
  "showIcon",
  "iconOnly"
);

export type PlasmicLinkOm__ArgsType = {
  children?: React.ReactNode;
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLinkOm__ArgsType;
export const PlasmicLinkOm__ArgProps = new Array<ArgPropType>(
  "children",
  "startIcon",
  "endIcon"
);

export type PlasmicLinkOm__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
  svg?: p.Flex<"svg">;
};

export interface DefaultLinkOmProps {
  children?: React.ReactNode;
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
  showStartIcon?: SingleBooleanChoiceArg<"showStartIcon">;
  size?: MultiChoiceArg<"normal" | "small" | "large">;
  showIcon?: MultiChoiceArg<"start" | "end">;
  iconOnly?: MultiChoiceArg<"close" | "caretDown">;
  className?: string;
}

function PlasmicLinkOm__RenderFunc(props: {
  variants: PlasmicLinkOm__VariantsArgs;
  args: PlasmicLinkOm__ArgsType;
  overrides: PlasmicLinkOm__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rooticonOnly_caretDown]: hasVariant(
            variants,
            "iconOnly",
            "caretDown"
          ),
          [sty.rootshowIcon_end]: hasVariant(variants, "showIcon", "end"),
          [sty.rootshowIcon_start]: hasVariant(variants, "showIcon", "start"),
          [sty.rootshowStartIcon]: hasVariant(
            variants,
            "showStartIcon",
            "showStartIcon"
          ),
          [sty.rootsize_large]: hasVariant(variants, "size", "large")
        }
      )}
      component={Link}
      platform={"nextjs"}
    >
      {(
        hasVariant(variants, "iconOnly", "caretDown")
          ? true
          : hasVariant(variants, "iconOnly", "close")
          ? true
          : hasVariant(variants, "showStartIcon", "showStartIcon")
          ? true
          : true
      ) ? (
        <p.PlasmicIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          PlasmicIconType={
            hasVariant(variants, "iconOnly", "caretDown")
              ? ArrowDownIcon
              : Icon15Icon
          }
          className={classNames(projectcss.all, sty.svg, {
            [sty.svgiconOnly_caretDown]: hasVariant(
              variants,
              "iconOnly",
              "caretDown"
            ),
            [sty.svgiconOnly_close]: hasVariant(variants, "iconOnly", "close"),
            [sty.svgshowStartIcon]: hasVariant(
              variants,
              "showStartIcon",
              "showStartIcon"
            )
          })}
          role={"img"}
        />
      ) : null}
      {(
        hasVariant(variants, "showIcon", "end")
          ? false
          : hasVariant(variants, "showIcon", "start")
          ? true
          : hasVariant(variants, "showStartIcon", "showStartIcon")
          ? true
          : false
      )
        ? p.renderPlasmicSlot({
            defaultContents: true ? (
              <Icon15Icon
                className={classNames(projectcss.all, sty.svg__q8RBq)}
                role={"img"}
              />
            ) : null,
            value: args.startIcon
          })
        : null}
      {(
        hasVariant(variants, "iconOnly", "caretDown")
          ? false
          : hasVariant(variants, "iconOnly", "close")
          ? false
          : true
      )
        ? p.renderPlasmicSlot({
            defaultContents: "Label",
            value: args.children,
            className: classNames(sty.slotTargetChildren, {
              [sty.slotTargetChildreniconOnly_caretDown]: hasVariant(
                variants,
                "iconOnly",
                "caretDown"
              ),
              [sty.slotTargetChildreniconOnly_close]: hasVariant(
                variants,
                "iconOnly",
                "close"
              ),
              [sty.slotTargetChildrenshowIcon_end]: hasVariant(
                variants,
                "showIcon",
                "end"
              ),
              [sty.slotTargetChildrenshowIcon_start]: hasVariant(
                variants,
                "showIcon",
                "start"
              ),
              [sty.slotTargetChildrenshowStartIcon]: hasVariant(
                variants,
                "showStartIcon",
                "showStartIcon"
              ),
              [sty.slotTargetChildrensize_large]: hasVariant(
                variants,
                "size",
                "large"
              ),
              [sty.slotTargetChildrensize_normal]: hasVariant(
                variants,
                "size",
                "normal"
              ),
              [sty.slotTargetChildrensize_small]: hasVariant(
                variants,
                "size",
                "small"
              )
            })
          })
        : null}
      {(
        hasVariant(variants, "showIcon", "end")
          ? true
          : hasVariant(variants, "showIcon", "start")
          ? false
          : hasVariant(variants, "size", "large")
          ? false
          : hasVariant(variants, "size", "small")
          ? false
          : hasVariant(variants, "size", "normal")
          ? false
          : hasVariant(variants, "showStartIcon", "showStartIcon")
          ? false
          : false
      )
        ? p.renderPlasmicSlot({
            defaultContents: (
              <Icon15Icon
                className={classNames(projectcss.all, sty.svg__vXysM)}
                role={"img"}
              />
            ),

            value: args.endIcon
          })
        : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLinkOm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLinkOm__VariantsArgs;
    args?: PlasmicLinkOm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLinkOm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLinkOm__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLinkOm__ArgProps,
          internalVariantPropNames: PlasmicLinkOm__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLinkOm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLinkOm";
  } else {
    func.displayName = `PlasmicLinkOm.${nodeName}`;
  }
  return func;
}

export const PlasmicLinkOm = Object.assign(
  // Top-level PlasmicLinkOm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicLinkOm
    internalVariantProps: PlasmicLinkOm__VariantProps,
    internalArgProps: PlasmicLinkOm__ArgProps
  }
);

export default PlasmicLinkOm;
/* prettier-ignore-end */
