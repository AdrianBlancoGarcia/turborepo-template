// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fxuAGcsah199rVCjPzGTfY
// Component: qwicWrMKkQ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: xxIo1oxPKF17E6/component

import { useScreenVariants as useScreenVariantsngzoyd6GPz8Rig } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Ngzoyd6gPZ8rig/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_marketers.module.css"; // plasmic-import: fxuAGcsah199rVCjPzGTfY/projectcss
import sty from "./PlasmicDrawer.module.css"; // plasmic-import: qwicWrMKkQ/css

import Group2Icon from "./icons/PlasmicIcon__Group2"; // plasmic-import: yeRku5or0y/icon
import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: bSsTEcq38cO9yG/icon

export type PlasmicDrawer__VariantMembers = {};

export type PlasmicDrawer__VariantsArgs = {};
type VariantPropType = keyof PlasmicDrawer__VariantsArgs;
export const PlasmicDrawer__VariantProps = new Array<VariantPropType>();

export type PlasmicDrawer__ArgsType = {
  drawerButton?: React.ReactNode;
  links?: React.ReactNode;
  buttons?: React.ReactNode;
};

type ArgPropType = keyof PlasmicDrawer__ArgsType;
export const PlasmicDrawer__ArgProps = new Array<ArgPropType>(
  "drawerButton",
  "links",
  "buttons"
);

export type PlasmicDrawer__OverridesType = {
  root?: p.Flex<"div">;
  leftNav?: p.Flex<"div">;
  openMarketersLogo?: p.Flex<"a"> & Partial<LinkProps>;
  group?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  svg?: p.Flex<"svg">;
};

export interface DefaultDrawerProps {
  drawerButton?: React.ReactNode;
  links?: React.ReactNode;
  buttons?: React.ReactNode;
  className?: string;
}

function PlasmicDrawer__RenderFunc(props: {
  variants: PlasmicDrawer__VariantsArgs;
  args: PlasmicDrawer__ArgsType;
  overrides: PlasmicDrawer__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsngzoyd6GPz8Rig()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__erUa5)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"leftNav"}
          data-plasmic-override={overrides.leftNav}
          hasGap={true}
          className={classNames(projectcss.all, sty.leftNav)}
        >
          <p.PlasmicLink
            data-plasmic-name={"openMarketersLogo"}
            data-plasmic-override={overrides.openMarketersLogo}
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.openMarketersLogo
            )}
            component={Link}
            href={"/" as const}
            platform={"nextjs"}
          >
            <div
              data-plasmic-name={"group"}
              data-plasmic-override={overrides.group}
              className={classNames(projectcss.all, sty.group)}
            >
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"33px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"33px" as const}
                loader={"plasmic"}
                loading={"lazy" as const}
                src={{
                  src: "https://site-assets.plasmic.app/27594bfa2d8be5cf82287fe877cded5a.svg",
                  fullWidth: 33,
                  fullHeight: 32.5,
                  aspectRatio: 1
                }}
              />

              <Group2Icon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            </div>
          </p.PlasmicLink>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__wrZzs)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <Button
                className={classNames("__wab_instance", sty.button__hD8Pd)}
                drawer={"close" as const}
              />
            ),

            value: args.drawerButton
          })}
        </p.Stack>
      </p.Stack>

      <div className={classNames(projectcss.all, sty.freeBox___4TIcZ)}>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___3JiGu)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rM1Kg
                  )}
                >
                  {"Link 1"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mb6Dk
                  )}
                >
                  {"Link 1"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wnXgJ
                  )}
                >
                  {"Link 1"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kvkGa
                  )}
                >
                  {"Link 1"}
                </div>
              </React.Fragment>
            ),
            value: args.links
          })}
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__clhSc)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <Button
                  className={classNames("__wab_instance", sty.button__jRj4E)}
                  color={"gradient" as const}
                />

                <Button
                  className={classNames("__wab_instance", sty.button__l9CV)}
                  color={"gradient" as const}
                />
              </React.Fragment>
            ),
            value: args.buttons
          })}
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "leftNav", "openMarketersLogo", "group", "img", "svg"],
  leftNav: ["leftNav", "openMarketersLogo", "group", "img", "svg"],
  openMarketersLogo: ["openMarketersLogo", "group", "img", "svg"],
  group: ["group", "img", "svg"],
  img: ["img"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  leftNav: "div";
  openMarketersLogo: "a";
  group: "div";
  img: typeof p.PlasmicImg;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDrawer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDrawer__VariantsArgs;
    args?: PlasmicDrawer__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDrawer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDrawer__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDrawer__ArgProps,
          internalVariantPropNames: PlasmicDrawer__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicDrawer__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDrawer";
  } else {
    func.displayName = `PlasmicDrawer.${nodeName}`;
  }
  return func;
}

export const PlasmicDrawer = Object.assign(
  // Top-level PlasmicDrawer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    leftNav: makeNodeComponent("leftNav"),
    openMarketersLogo: makeNodeComponent("openMarketersLogo"),
    group: makeNodeComponent("group"),
    img: makeNodeComponent("img"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicDrawer
    internalVariantProps: PlasmicDrawer__VariantProps,
    internalArgProps: PlasmicDrawer__ArgProps
  }
);

export default PlasmicDrawer;
/* prettier-ignore-end */
