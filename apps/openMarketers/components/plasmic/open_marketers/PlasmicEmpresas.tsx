// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fxuAGcsah199rVCjPzGTfY
// Component: Au1qpp6vUYln
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: uEAoMM34trbb9e/component
import LinkOm from "../../LinkOm"; // plasmic-import: 1gULMJc0uv/component
import Button from "../../Button"; // plasmic-import: xxIo1oxPKF17E6/component
import ImageTextCardItem from "../../ImageTextCardItem"; // plasmic-import: fJPSJOFKZX/component
import FooterSection from "../../FooterSection"; // plasmic-import: bpZukpM1tJlDbv/component

import { useScreenVariants as useScreenVariantsngzoyd6GPz8Rig } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Ngzoyd6gPZ8rig/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_open_marketers.module.css"; // plasmic-import: fxuAGcsah199rVCjPzGTfY/projectcss
import sty from "./PlasmicEmpresas.module.css"; // plasmic-import: Au1qpp6vUYln/css

import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: 1LQtfIq6-_/icon
import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: bSsTEcq38cO9yG/icon
import Vector19Icon from "./icons/PlasmicIcon__Vector19"; // plasmic-import: zVoJGVzezP/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: IZkUgTNXAd/icon
import Vector22Icon from "./icons/PlasmicIcon__Vector22"; // plasmic-import: B1ZKvNdoWk/icon
import Vector20Icon from "./icons/PlasmicIcon__Vector20"; // plasmic-import: P1Jh_a_zt3/icon
import Vector21Icon from "./icons/PlasmicIcon__Vector21"; // plasmic-import: WpUc8c4-Mp/icon
import Vector23Icon from "./icons/PlasmicIcon__Vector23"; // plasmic-import: MB3JWB6w_F/icon
import Icon18Icon from "./icons/PlasmicIcon__Icon18"; // plasmic-import: tcn2DZ0dps/icon
import Vector18Icon from "./icons/PlasmicIcon__Vector18"; // plasmic-import: 6SGxxDo1I1/icon
import Vector17Icon from "./icons/PlasmicIcon__Vector17"; // plasmic-import: oj0747Pscj/icon
import Vector16Icon from "./icons/PlasmicIcon__Vector16"; // plasmic-import: nevcOZaDtn/icon

export type PlasmicEmpresas__VariantMembers = {};

export type PlasmicEmpresas__VariantsArgs = {};
type VariantPropType = keyof PlasmicEmpresas__VariantsArgs;
export const PlasmicEmpresas__VariantProps = new Array<VariantPropType>();

export type PlasmicEmpresas__ArgsType = {
  navbar?: React.ReactNode;
  breadCrumb?: React.ReactNode;
  formButton?: React.ReactNode;
};

type ArgPropType = keyof PlasmicEmpresas__ArgsType;
export const PlasmicEmpresas__ArgProps = new Array<ArgPropType>(
  "navbar",
  "breadCrumb",
  "formButton"
);

export type PlasmicEmpresas__OverridesType = {
  root?: p.Flex<"div">;
  headerHeroSection?: p.Flex<"div">;
  content?: p.Flex<"div">;
  breadCrumb?: p.Flex<"div">;
  header?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  span?: p.Flex<"span">;
  omHiring?: p.Flex<"div">;
  container3?: p.Flex<"div">;
  container4?: p.Flex<"div">;
  sectionHeading3?: p.Flex<"div">;
  sectionTitle3?: p.Flex<"h2">;
  description3?: p.Flex<"div">;
  profile2?: p.Flex<"div">;
  omFeatures?: p.Flex<"div">;
  heading?: p.Flex<"div">;
  sectionTitle4?: p.Flex<"h3">;
  icon4?: p.Flex<"div">;
  sectionheading?: p.Flex<"div">;
  icon5?: p.Flex<"div">;
  sectionheading2?: p.Flex<"div">;
  icon6?: p.Flex<"div">;
  sectionheading3?: p.Flex<"div">;
  icon7?: p.Flex<"div">;
  icon8?: p.Flex<"div">;
  icon9?: p.Flex<"div">;
  icon10?: p.Flex<"div">;
  icon11?: p.Flex<"div">;
  icon12?: p.Flex<"div">;
  omCertifications?: p.Flex<"div">;
  container7?: p.Flex<"div">;
  container8?: p.Flex<"div">;
  sectionHeading5?: p.Flex<"div">;
  sectionTitle8?: p.Flex<"h3">;
  description5?: p.Flex<"div">;
  omPlatform?: p.Flex<"div">;
  heading2?: p.Flex<"div">;
  sectionTitle5?: p.Flex<"h4">;
  frame?: p.Flex<"div">;
  omAdvantages?: p.Flex<"div">;
  heading3?: p.Flex<"div">;
  sectionTitle7?: p.Flex<"h4">;
  omOutro?: p.Flex<"div">;
  container5?: p.Flex<"div">;
  container6?: p.Flex<"div">;
  sectionHeading4?: p.Flex<"div">;
  sectionTitle6?: p.Flex<"h5">;
  description4?: p.Flex<"div">;
  omOutro2?: p.Flex<"div">;
  container9?: p.Flex<"div">;
  container10?: p.Flex<"div">;
  sectionHeading6?: p.Flex<"div">;
  sectionTitle9?: p.Flex<"h5">;
  description6?: p.Flex<"div">;
  foreground?: p.Flex<"div">;
  emailInput?: p.Flex<"input">;
  footerSection?: p.Flex<typeof FooterSection>;
};

export interface DefaultEmpresasProps {}

function PlasmicEmpresas__RenderFunc(props: {
  variants: PlasmicEmpresas__VariantsArgs;
  args: PlasmicEmpresas__ArgsType;
  overrides: PlasmicEmpresas__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsngzoyd6GPz8Rig()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">
          {"Curso intensivo de Marketing Digital y trabajo ¡GRATIS!"}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={"Curso intensivo de Marketing Digital y trabajo ¡GRATIS!"}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={"Curso intensivo de Marketing Digital y trabajo ¡GRATIS!"}
        />
        <meta
          key="description"
          name="description"
          content={
            "Aprende +10 especialidades del Marketing digital y consigue trabajo de forma gratuita."
          }
        />
        <meta
          key="og:description"
          property="og:description"
          content={
            "Aprende +10 especialidades del Marketing digital y consigue trabajo de forma gratuita."
          }
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={
            "Aprende +10 especialidades del Marketing digital y consigue trabajo de forma gratuita."
          }
        />
        <meta
          key="og:image"
          property="og:image"
          content={
            "https://site-assets.plasmic.app/37ae570b068686f525b61b777f5b8c6b.png"
          }
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={
            "https://site-assets.plasmic.app/37ae570b068686f525b61b777f5b8c6b.png"
          }
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <Navbar
                className={classNames("__wab_instance", sty.navbar__ri8R6)}
                loginButton={
                  true ? (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__oj9JT
                      )}
                      color={"darkGray" as const}
                      link={"https://campus.open-marketers.com/login" as const}
                      size={"small" as const}
                    >
                      {"Ir al campus"}
                    </Button>
                  ) : null
                }
                navButton={
                  <Button
                    className={classNames("__wab_instance", sty.button__g7DZ9)}
                    color={"gradient" as const}
                    link={"https://campus.open-marketers.com/register" as const}
                    size={"small" as const}
                  >
                    {"Contratar talento"}
                  </Button>
                }
              />
            ),

            value: args.navbar
          })}

          <p.Stack
            as={"div"}
            data-plasmic-name={"headerHeroSection"}
            data-plasmic-override={overrides.headerHeroSection}
            hasGap={true}
            className={classNames(projectcss.all, sty.headerHeroSection)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__r4D)}
            >
              {(
                hasVariant(globalVariants, "screen", "laptopL") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"content"}
                  data-plasmic-override={overrides.content}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.content)}
                >
                  <div
                    data-plasmic-name={"breadCrumb"}
                    data-plasmic-override={overrides.breadCrumb}
                    className={classNames(projectcss.all, sty.breadCrumb)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: null,
                      value: args.breadCrumb
                    })}
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"header"}
                    data-plasmic-override={overrides.header}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.header)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                        <React.Fragment>
                          <React.Fragment>{"Encuentra el "}</React.Fragment>
                          {
                            <span
                              data-plasmic-name={"span"}
                              data-plasmic-override={overrides.span}
                              className={classNames(
                                projectcss.all,
                                projectcss.span,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.span
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? "perfil de marketing"
                                : hasVariant(globalVariants, "screen", "tablet")
                                ? "perfil de marketing"
                                : "perfil de marketing"}
                            </span>
                          }
                          <React.Fragment>
                            {" que más se ajuste a tus necesidades de negocio"}
                          </React.Fragment>
                        </React.Fragment>
                      ) : hasVariant(globalVariants, "screen", "tablet") ? (
                        <React.Fragment>
                          <React.Fragment>{"Encuentra el "}</React.Fragment>
                          {
                            <span
                              data-plasmic-name={"span"}
                              data-plasmic-override={overrides.span}
                              className={classNames(
                                projectcss.all,
                                projectcss.span,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.span
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? "perfil de marketing"
                                : hasVariant(globalVariants, "screen", "tablet")
                                ? "perfil de marketing"
                                : "perfil de marketing"}
                            </span>
                          }
                          <React.Fragment>
                            {" que más se ajuste a tus necesidades de negocio"}
                          </React.Fragment>
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          <React.Fragment>{"Encuentra el "}</React.Fragment>
                          {
                            <span
                              data-plasmic-name={"span"}
                              data-plasmic-override={overrides.span}
                              className={classNames(
                                projectcss.all,
                                projectcss.span,
                                projectcss.__wab_text,
                                projectcss.plasmic_default__inline,
                                sty.span
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? "perfil de marketing"
                                : hasVariant(globalVariants, "screen", "tablet")
                                ? "perfil de marketing"
                                : "perfil de marketing"}
                            </span>
                          }
                          <React.Fragment>
                            {
                              " \nque más se ajuste a tus \nnecesidades de negocio"
                            }
                          </React.Fragment>
                        </React.Fragment>
                      )}
                    </h1>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3C78M
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "laptopM")
                        ? "Seleccionamos a los profesionales que mejor encajen con tus vacantes. Formamos marketers en base a distintas especialidades en marketing para que sean eficientes desde su incorporación."
                        : hasVariant(globalVariants, "screen", "laptopL")
                        ? "Seleccionamos a los profesionales que mejor encajen con tus vacantes. Formamos marketers en base a distintas especialidades en marketing para que sean eficientes desde su incorporación."
                        : "Seleccionamos a los profesionales que mejor encajen con tus vacantes. Formamos marketers en base a distintas especialidades en marketing para que sean eficientes desde su incorporación."}
                    </div>

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__jpqV5
                      )}
                      color={"darkGray" as const}
                      link={
                        "https://forms.zohopublic.eu/openmarketers/form/FormularioCaptacinEmpresas/formperma/RJgBmrkSQK0RE5V_AuiSph8Hfe7Bn9NqP_qEVbXuEh0" as const
                      }
                    >
                      {"Contratar talento"}
                    </Button>
                  </p.Stack>
                </p.Stack>
              ) : null}
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"omHiring"}
            data-plasmic-override={overrides.omHiring}
            hasGap={true}
            className={classNames(projectcss.all, sty.omHiring)}
            id={"empleo" as const}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"container3"}
              data-plasmic-override={overrides.container3}
              hasGap={true}
              className={classNames(projectcss.all, sty.container3)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"container4"}
                data-plasmic-override={overrides.container4}
                hasGap={true}
                className={classNames(projectcss.all, sty.container4)}
              >
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__hdHO)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"sectionHeading3"}
                      data-plasmic-override={overrides.sectionHeading3}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.sectionHeading3
                      )}
                    >
                      <h2
                        data-plasmic-name={"sectionTitle3"}
                        data-plasmic-override={overrides.sectionTitle3}
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.sectionTitle3
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "tablet")
                          ? "Accede a un servicio único y  diferencial"
                          : hasVariant(globalVariants, "screen", "laptopL")
                          ? "Accede a un servicio \núnico y diferencial"
                          : "Accede a un servicio \núnico y diferencial"}
                      </h2>

                      <div
                        data-plasmic-name={"description3"}
                        data-plasmic-override={overrides.description3}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.description3
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          <React.Fragment>
                            <React.Fragment>
                              {"En OpenMarketers hemos reinventado el"}
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {" hiring "}
                            </span>
                            <React.Fragment>
                              {
                                "para adecuarnos a las nuevas necesidades de las empresas. Construye un equipo sólido y competitivo de marketers, con los que podrás mejorar tus objetivos de negocio."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        ) : hasVariant(globalVariants, "screen", "tablet") ? (
                          <React.Fragment>
                            <React.Fragment>
                              {"En OpenMarketers hemos reinventado el"}
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {" hiring "}
                            </span>
                            <React.Fragment>
                              {
                                "\npara adecuarnos a las nuevas necesidades de las empresas. Construye un equipo sólido y competitivo de marketers, con los que podrás mejorar tus objetivos de negocio."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        ) : hasVariant(globalVariants, "screen", "laptopM") ? (
                          <React.Fragment>
                            <React.Fragment>
                              {"En OpenMarketers hemos reinventado el"}
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {" hiring "}
                            </span>
                            <React.Fragment>
                              {
                                "\npara adecuarnos a las nuevas necesidades de las empresas. Construye un equipo sólido y competitivo de marketers, con los que podrás mejorar tus objetivos de negocio."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        ) : hasVariant(globalVariants, "screen", "laptopL") ? (
                          <React.Fragment>
                            <React.Fragment>
                              {"En OpenMarketers hemos reinventado el"}
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {" hiring "}
                            </span>
                            <React.Fragment>
                              {
                                "\npara adecuarnos a las nuevas necesidades de las empresas. Construye un equipo sólido y competitivo de marketers, con \nlos que podrás mejorar tus objetivos de negocio."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            <React.Fragment>
                              {"En OpenMarketers hemos reinventado el"}
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {" "}
                            </span>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"hiring"}
                            </span>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {" "}
                            </span>
                            <React.Fragment>
                              {
                                "\npara adecuarnos a las nuevas necesidades de las empresas.\nConstruye un equipo sólido y competitivo de marketers, con \nlos que podrás mejorar tus objetivos de negocio."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        )}
                      </div>
                    </p.Stack>
                  </p.Stack>
                ) : null}

                <Button
                  className={classNames("__wab_instance", sty.button__zrT33)}
                  color={"darkGray" as const}
                  link={
                    "https://forms.zohopublic.eu/openmarketers/form/FormularioCaptacinEmpresas/formperma/RJgBmrkSQK0RE5V_AuiSph8Hfe7Bn9NqP_qEVbXuEh0" as const
                  }
                >
                  {"Contratar Marketers"}
                </Button>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"profile2"}
                data-plasmic-override={overrides.profile2}
                hasGap={true}
                className={classNames(projectcss.all, sty.profile2)}
              >
                <p.PlasmicImg
                  alt={"servicio diferencial" as const}
                  className={classNames(sty.img___5Tvxv)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? ("100%" as const)
                      : hasVariant(globalVariants, "screen", "laptopL")
                      ? ("auto" as const)
                      : ("100%" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? ("100%" as const)
                      : hasVariant(globalVariants, "screen", "laptopL")
                      ? ("auto" as const)
                      : ("auto" as const)
                  }
                  loader={"plasmic"}
                  loading={"lazy" as const}
                  src={{
                    src: "https://img.plasmic.app/img-optimizer/v1/img/50b92e1b84a3f2d1ed9edeb600fabd2c.png",
                    fullWidth: 1126,
                    fullHeight: 1200
                  }}
                />

                {true ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__dv2Wu)}
                    displayHeight={"701px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("100vw" as const)
                        : hasVariant(globalVariants, "screen", "laptopL")
                        ? ("100%" as const)
                        : ("54vw" as const)
                    }
                    loader={"plasmic"}
                    src={{
                      src: "https://img.plasmic.app/img-optimizer/v1/img/b6269fb87610777b97193310759e4da9.jpg",
                      fullWidth: 4096,
                      fullHeight: 2730
                    }}
                  />
                ) : null}
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <div
            data-plasmic-name={"omFeatures"}
            data-plasmic-override={overrides.omFeatures}
            className={classNames(projectcss.all, sty.omFeatures)}
            id={"caracteristicas" as const}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___9L5Y2)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"heading"}
                data-plasmic-override={overrides.heading}
                hasGap={true}
                className={classNames(projectcss.all, sty.heading)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__jvbjK)}
                  displayHeight={"10px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"69px" as const}
                  loader={"plasmic"}
                  loading={"lazy" as const}
                  src={{
                    src: "https://site-assets.plasmic.app/67d8117ddfd18c9a3beba320d705e50c.svg",
                    fullWidth: 69,
                    fullHeight: 10,
                    aspectRatio: 6.9
                  }}
                />

                <h3
                  data-plasmic-name={"sectionTitle4"}
                  data-plasmic-override={overrides.sectionTitle4}
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.sectionTitle4
                  )}
                >
                  {hasVariant(globalVariants, "screen", "laptopL")
                    ? "¿Qué hace especial a OpenMarketers?"
                    : "¿Qué hace especial a OpenMarketers?"}
                </h3>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___66Ygc
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Nuestros candidatos están especializados en las distintas áreas de Marketing siguiendo los requisitos de nuestros clientes y del sector, mezclando conocimientos de negocio y técnicos. Con ese objetivo, preparamos a nuestros Marketers en áreas específicas de cada posición antes e presentarlos como candidatos."
                    : "Nuestros candidatos están especializados en las distintas áreas de Marketing siguiendo los requisitos de nuestros clientes y del sector, mezclando conocimientos de negocio y técnicos. Con ese objetivo, preparamos a nuestros Marketers en áreas específicas de cada posición antes e presentarlos como candidatos."}
                </div>
              </p.Stack>

              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__p6Klt)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hc7M)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__pyaGh)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"icon4"}
                        data-plasmic-override={overrides.icon4}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon4)}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__kzdjq)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "tablet")
                              ? ("30px" as const)
                              : ("40px" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "tablet")
                              ? ("61px" as const)
                              : ("55px" as const)
                          }
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://site-assets.plasmic.app/10daf2c00dd74bd46d5ebdd4f0bd6609.svg",
                            fullWidth: 50,
                            fullHeight: 38,
                            aspectRatio: 1.315789
                          }}
                        />
                      </p.Stack>

                      {true ? (
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"sectionheading"}
                          data-plasmic-override={overrides.sectionheading}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.sectionheading
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4HbXp
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"Gran Comunidad"}
                              </span>
                            </React.Fragment>
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bcyRp
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "tablet")
                              ? "Disponemos de una gran cantidad de candidatos formados en las especialidades más demandadas."
                              : hasVariant(globalVariants, "screen", "laptopL")
                              ? "Disponemos de una gran cantidad de candidatos formados en las especialidades más demandadas."
                              : "Disponemos de una gran cantidad de candidatos formados en las especialidades más demandadas."}
                          </div>
                        </p.Stack>
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__hFjNg)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"icon5"}
                        data-plasmic-override={overrides.icon5}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon5)}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__kK1K)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "tablet")
                              ? ("30px" as const)
                              : ("40px" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "tablet")
                              ? ("30px" as const)
                              : ("40px" as const)
                          }
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://site-assets.plasmic.app/912b9f08a2ecb36716e3a4944388b2e6.svg",
                            fullWidth: 50,
                            fullHeight: 50,
                            aspectRatio: 1
                          }}
                        />
                      </p.Stack>

                      {true ? (
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"sectionheading2"}
                          data-plasmic-override={overrides.sectionheading2}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.sectionheading2
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hRggu
                            )}
                          >
                            {"Selección rigurosa"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__y7N1H
                            )}
                          >
                            {
                              "OpenMarketers filtra y valida a los profesionales para que encajen en tus proyectos, con garantía de restitución."
                            }
                          </div>
                        </p.Stack>
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__jxrZ9)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"icon6"}
                        data-plasmic-override={overrides.icon6}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon6)}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___5JhSk)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "tablet")
                              ? ("30px" as const)
                              : ("40px" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={
                            hasVariant(globalVariants, "screen", "tablet")
                              ? ("30px" as const)
                              : ("40px" as const)
                          }
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://site-assets.plasmic.app/bcbab886fe3cc0f6e7e7762c1b9405ef.svg",
                            fullWidth: 50,
                            fullHeight: 50,
                            aspectRatio: 1
                          }}
                        />
                      </p.Stack>

                      {true ? (
                        <p.Stack
                          as={"div"}
                          data-plasmic-name={"sectionheading3"}
                          data-plasmic-override={overrides.sectionheading3}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.sectionheading3
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__m1X16
                            )}
                          >
                            {"Candidatos en una semana"}
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___9CVtT
                            )}
                          >
                            {
                              "Te presentamos a los candidatos que mejor encajan con tu solicitud en tiempo record."
                            }
                          </div>
                        </p.Stack>
                      ) : null}
                    </p.Stack>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__rSaSq)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__brHt)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"icon7"}
                        data-plasmic-override={overrides.icon7}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon7)}
                      >
                        <Vector19Icon
                          className={classNames(projectcss.all, sty.svg__gb7N0)}
                          role={"img"}
                        />
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zMtgc
                        )}
                      >
                        {"Somos Marketers y formadores"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__b7PXw)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"icon8"}
                        data-plasmic-override={overrides.icon8}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon8)}
                      >
                        <Icon19Icon
                          className={classNames(projectcss.all, sty.svg__qGj4Y)}
                          role={"img"}
                        />
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rDbwW
                        )}
                      >
                        {"Validamos CVs"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__pxvlQ)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"icon9"}
                        data-plasmic-override={overrides.icon9}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon9)}
                      >
                        <Vector22Icon
                          className={classNames(projectcss.all, sty.svg__s4U0Z)}
                          role={"img"}
                        />
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1YSsq
                        )}
                      >
                        {"Externalizamos costes"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___12Yi5
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"icon10"}
                        data-plasmic-override={overrides.icon10}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon10)}
                      >
                        <Vector20Icon
                          className={classNames(projectcss.all, sty.svg__yy0Vz)}
                          role={"img"}
                        />
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__acEy6
                        )}
                      >
                        {"Centenares de Candidatos"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__eW4Dr)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"icon11"}
                        data-plasmic-override={overrides.icon11}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon11)}
                      >
                        <Vector21Icon
                          className={classNames(projectcss.all, sty.svg___7BRb)}
                          role={"img"}
                        />
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rufhk
                        )}
                      >
                        {"Optimizamos procesos "}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4Yjdx
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"icon12"}
                        data-plasmic-override={overrides.icon12}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon12)}
                      >
                        <Vector23Icon
                          className={classNames(projectcss.all, sty.svg__gnwUs)}
                          role={"img"}
                        />
                      </p.Stack>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rtAgn
                        )}
                      >
                        {"Proceso a éxito"}
                      </div>
                    </p.Stack>
                  </div>
                </div>
              ) : null}
            </p.Stack>
          </div>

          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"omCertifications"}
              data-plasmic-override={overrides.omCertifications}
              hasGap={true}
              className={classNames(projectcss.all, sty.omCertifications)}
              id={"certificado" as const}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"container7"}
                data-plasmic-override={overrides.container7}
                hasGap={true}
                className={classNames(projectcss.all, sty.container7)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__lx4N9)}>
                  <p.PlasmicImg
                    alt={"Profesionales certificados" as const}
                    className={classNames(sty.img__oNl)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("219px" as const)
                        : hasVariant(globalVariants, "screen", "tablet")
                        ? ("100%" as const)
                        : hasVariant(globalVariants, "screen", "laptopM")
                        ? ("auto" as const)
                        : hasVariant(globalVariants, "screen", "laptopL")
                        ? ("auto" as const)
                        : ("auto" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("100%" as const)
                        : hasVariant(globalVariants, "screen", "tablet")
                        ? ("100%" as const)
                        : hasVariant(globalVariants, "screen", "laptopM")
                        ? ("auto" as const)
                        : hasVariant(globalVariants, "screen", "laptopL")
                        ? ("auto" as const)
                        : ("100%" as const)
                    }
                    loader={"plasmic"}
                    loading={"lazy" as const}
                    src={{
                      src: "https://img.plasmic.app/img-optimizer/v1/img/d873c57aff241d00c68637909a6fdf6f.png",
                      fullWidth: 1126,
                      fullHeight: 1200
                    }}
                  />
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"container8"}
                  data-plasmic-override={overrides.container8}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.container8)}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__kIUcX)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"sectionHeading5"}
                        data-plasmic-override={overrides.sectionHeading5}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.sectionHeading5
                        )}
                      >
                        <h3
                          data-plasmic-name={"sectionTitle8"}
                          data-plasmic-override={overrides.sectionTitle8}
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.sectionTitle8
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "tablet")
                            ? "Nuestros Marketers están certificados"
                            : hasVariant(globalVariants, "screen", "laptopL")
                            ? "Nuestros Marketers \nestán certificados"
                            : "Nuestros Marketers \nestán certificados"}
                        </h3>

                        <div
                          data-plasmic-name={"description5"}
                          data-plasmic-override={overrides.description5}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.description5
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "tablet") ? (
                            <React.Fragment>
                              <React.Fragment>
                                {
                                  "Formamos a nuestros profesionales en las últimas tendencias de marketing.  Antes de poder acceder a los procesos de selección deben realizar "
                                }
                              </React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"rigurosas pruebas"}
                              </span>
                              <React.Fragment>
                                {
                                  " para obtener las certificaciones correspondientes."
                                }
                              </React.Fragment>
                            </React.Fragment>
                          ) : hasVariant(
                              globalVariants,
                              "screen",
                              "laptopM"
                            ) ? (
                            <React.Fragment>
                              <React.Fragment>
                                {
                                  "Formamos a nuestros profesionales en las últimas tendencias de marketing. Antes de poder acceder a los procesos de selección deben realizar "
                                }
                              </React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"rigurosas pruebas"}
                              </span>
                              <React.Fragment>
                                {
                                  " para obtener las certificaciones correspondientes."
                                }
                              </React.Fragment>
                            </React.Fragment>
                          ) : hasVariant(
                              globalVariants,
                              "screen",
                              "laptopL"
                            ) ? (
                            <React.Fragment>
                              <React.Fragment>
                                {
                                  "Formamos a nuestros profesionales en las últimas tendencias de marketing. \n\nAntes de poder acceder a los procesos de selección deben realizar "
                                }
                              </React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"rigurosas pruebas"}
                              </span>
                              <React.Fragment>
                                {
                                  " para obtener las certificaciones correspondientes."
                                }
                              </React.Fragment>
                            </React.Fragment>
                          ) : (
                            <React.Fragment>
                              <React.Fragment>
                                {
                                  "Formamos a nuestros profesionales en las últimas tendencias de marketing. \n\nAntes de poder acceder a los procesos de selección deben realizar "
                                }
                              </React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ fontWeight: 700 }}
                              >
                                {"rigurosas pruebas"}
                              </span>
                              <React.Fragment>
                                {
                                  " para obtener las certificaciones correspondientes."
                                }
                              </React.Fragment>
                            </React.Fragment>
                          )}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  ) : null}

                  <Button
                    className={classNames("__wab_instance", sty.button__nopFu)}
                    color={"darkGray" as const}
                    link={
                      "https://forms.zohopublic.eu/openmarketers/form/FormularioCaptacinEmpresas/formperma/RJgBmrkSQK0RE5V_AuiSph8Hfe7Bn9NqP_qEVbXuEh0" as const
                    }
                  >
                    {"Contratar talento"}
                  </Button>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          ) : null}

          <div
            data-plasmic-name={"omPlatform"}
            data-plasmic-override={overrides.omPlatform}
            className={classNames(projectcss.all, sty.omPlatform)}
            id={"plataforma" as const}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__pUsD9)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"heading2"}
                data-plasmic-override={overrides.heading2}
                hasGap={true}
                className={classNames(projectcss.all, sty.heading2)}
              >
                <h4
                  data-plasmic-name={"sectionTitle5"}
                  data-plasmic-override={overrides.sectionTitle5}
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.sectionTitle5
                  )}
                >
                  {"Software propio de formación"}
                </h4>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__be2Z2
                  )}
                >
                  {
                    "• Desarrollado por OpenMarketers y OpenBootcamp\n• La primera plataforma de formación tecnológica gratuita\n• Para Marketers de España y América"
                  }
                </div>

                <Button
                  className={classNames("__wab_instance", sty.button___8V15G)}
                  color={"darkGray" as const}
                  link={
                    "https://forms.zohopublic.eu/openmarketers/form/FormularioCaptacinEmpresas/formperma/RJgBmrkSQK0RE5V_AuiSph8Hfe7Bn9NqP_qEVbXuEh0" as const
                  }
                >
                  {hasVariant(globalVariants, "screen", "laptopL")
                    ? "Contratar Marketers"
                    : "Contratar Marketers"}
                </Button>
              </p.Stack>

              <div className={classNames(projectcss.all, sty.freeBox___65A8Q)}>
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame"}
                  data-plasmic-override={overrides.frame}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame)}
                >
                  <Icon18Icon
                    className={classNames(projectcss.all, sty.svg__jzY1O)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__noVPb
                    )}
                  >
                    {"12 Meses"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jMlPu
                    )}
                  >
                    {"de formación continua"}
                  </div>
                </p.Stack>

                <p.PlasmicImg
                  alt={"Software propio de formacion" as const}
                  className={classNames(sty.img__lOA)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("auto" as const)
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? ("auto" as const)
                      : hasVariant(globalVariants, "screen", "laptopM")
                      ? ("auto" as const)
                      : ("351px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loader={"plasmic"}
                  loading={"lazy" as const}
                  src={{
                    src: "https://img.plasmic.app/img-optimizer/v1/img/dd7f5089537979e94244f145c7cdfc49.png",
                    fullWidth: 1824,
                    fullHeight: 527
                  }}
                />
              </div>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"omAdvantages"}
            data-plasmic-override={overrides.omAdvantages}
            className={classNames(projectcss.all, sty.omAdvantages)}
            id={"como-funciona" as const}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__f2Mq)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"heading3"}
                data-plasmic-override={overrides.heading3}
                hasGap={true}
                className={classNames(projectcss.all, sty.heading3)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__jIvYs)}
                  displayHeight={"10px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"69px" as const}
                  loader={"plasmic"}
                  loading={"lazy" as const}
                  src={{
                    src: "https://site-assets.plasmic.app/67d8117ddfd18c9a3beba320d705e50c.svg",
                    fullWidth: 69,
                    fullHeight: 10,
                    aspectRatio: 6.9
                  }}
                />

                <h4
                  data-plasmic-name={"sectionTitle7"}
                  data-plasmic-override={overrides.sectionTitle7}
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.sectionTitle7
                  )}
                >
                  {"¿Qué vas a conseguir con OpenMarketers?"}
                </h4>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ig6Jq
                  )}
                >
                  {
                    "Algunas de las ventajas que te ofrece OpenMarketers son la obtención de perfiles comprometidos y favorecer la eliminación de la rotación."
                  }
                </div>
              </p.Stack>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__nmS8A)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__k18D)}
                  >
                    <ImageTextCardItem
                      className={classNames(
                        "__wab_instance",
                        sty.imageTextCardItem__dlVi
                      )}
                      description={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__z1ViO
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{"Aumentando la "}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"motivación"}
                            </span>
                            <React.Fragment>{" y la "}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"versatilidad"}
                            </span>
                            <React.Fragment>
                              {" de los perfiles contratados."}
                            </React.Fragment>
                          </React.Fragment>
                        </div>
                      }
                      featureImg={
                        <p.PlasmicImg
                          alt={"Marketers comprometidos" as const}
                          className={classNames(sty.img__yFiSu)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("150px" as const)
                              : hasVariant(globalVariants, "screen", "tablet")
                              ? ("235px" as const)
                              : ("none" as const)
                          }
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://img.plasmic.app/img-optimizer/v1/img/4eb0c493abbf800ea59390636b0da4e4.png",
                            fullWidth: 771,
                            fullHeight: 480
                          }}
                        />
                      }
                      icon={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tHb8Q
                          )}
                        >
                          <Vector18Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__mWCwG
                            )}
                            role={"img"}
                          />
                        </div>
                      }
                      title={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rnbIn
                          )}
                        >
                          {"Marketers comprometidos"}
                        </div>
                      }
                    />

                    <ImageTextCardItem
                      className={classNames(
                        "__wab_instance",
                        sty.imageTextCardItem__eksnZ
                      )}
                      description={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wiJg9
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{"Gracias a los "}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"compromisos de permanencia"}
                            </span>
                            <React.Fragment>
                              {
                                " vinculados a la inversión realizada en su formación."
                              }
                            </React.Fragment>
                          </React.Fragment>
                        </div>
                      }
                      featureImg={
                        <p.PlasmicImg
                          alt={"Reduce la rotación" as const}
                          className={classNames(sty.img___2Lc40)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("150px" as const)
                              : hasVariant(globalVariants, "screen", "tablet")
                              ? ("235px" as const)
                              : ("none" as const)
                          }
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://img.plasmic.app/img-optimizer/v1/img/312a802f3c722aa6f209a1308730a53f.png",
                            fullWidth: 771,
                            fullHeight: 480
                          }}
                        />
                      }
                      icon={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___9MIT
                          )}
                        >
                          <Vector17Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__dJdpr
                            )}
                            role={"img"}
                          />
                        </div>
                      }
                      title={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iypiH
                          )}
                        >
                          {"Reduce la rotación fidelizando a tus empleados"}
                        </div>
                      }
                    />

                    <ImageTextCardItem
                      className={classNames(
                        "__wab_instance",
                        sty.imageTextCardItem__qJdwS
                      )}
                      description={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6HxV
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>
                              {"Contamos con más de "}
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"200 profesionales "}
                            </span>
                            <React.Fragment>{"formados."}</React.Fragment>
                          </React.Fragment>
                        </div>
                      }
                      featureImg={
                        <p.PlasmicImg
                          alt={"Perfiles en una semana" as const}
                          className={classNames(sty.img__lEocM)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("150px" as const)
                              : hasVariant(globalVariants, "screen", "tablet")
                              ? ("235px" as const)
                              : ("none" as const)
                          }
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"100%" as const}
                          loader={"plasmic"}
                          loading={"lazy" as const}
                          src={{
                            src: "https://img.plasmic.app/img-optimizer/v1/img/76c6f50ed0750c06327a6f959fc76492.png",
                            fullWidth: 771,
                            fullHeight: 480
                          }}
                        />
                      }
                      icon={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bsOF
                          )}
                        >
                          <Vector16Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__mIw2I
                            )}
                            role={"img"}
                          />
                        </div>
                      }
                      title={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6QDvn
                          )}
                        >
                          {"Te presentamos a los perfiles en una semana"}
                        </div>
                      }
                    />
                  </p.Stack>
                </p.Stack>
              ) : null}
            </p.Stack>
          </div>

          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"omOutro"}
              data-plasmic-override={overrides.omOutro}
              hasGap={true}
              className={classNames(projectcss.all, sty.omOutro)}
              id={"empleo" as const}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"container5"}
                data-plasmic-override={overrides.container5}
                hasGap={true}
                className={classNames(projectcss.all, sty.container5)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"container6"}
                  data-plasmic-override={overrides.container6}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.container6)}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__sDuAn)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"sectionHeading4"}
                        data-plasmic-override={overrides.sectionHeading4}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.sectionHeading4
                        )}
                      >
                        <h5
                          data-plasmic-name={"sectionTitle6"}
                          data-plasmic-override={overrides.sectionTitle6}
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.sectionTitle6
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "¿Quieres saber más?"
                            : hasVariant(globalVariants, "screen", "tablet")
                            ? "¿Quieres saber más?"
                            : hasVariant(globalVariants, "screen", "laptopM")
                            ? "¿Quieres saber más?"
                            : hasVariant(globalVariants, "screen", "laptopL")
                            ? "¿Quieres saber más?"
                            : "¿Quieres saber más?"}
                        </h5>

                        <div
                          data-plasmic-name={"description4"}
                          data-plasmic-override={overrides.description4}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.description4
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Si necesitas a personal cualificado que cubra las necesidades de cualquier departamento de marketing actual, este es el lugar adecuado. Cuéntanos un poco más acerca de tus necesidades y trabajaremos para hacerte llegar a los mejores profesionales."
                            : hasVariant(globalVariants, "screen", "tablet")
                            ? "Si necesitas a personal cualificado que cubra las necesidades de cualquier departamento de marketing actual, este es el lugar adecuado. Cuéntanos un poco más acerca de tus necesidades y trabajaremos para hacerte llegar a los mejores profesionales."
                            : hasVariant(globalVariants, "screen", "laptopL")
                            ? "Si necesitas a personal cualificado que cubra las necesidades de cualquier departamento de marketing actual, este es el lugar adecuado.\n\nCuéntanos un poco más acerca de tus necesidades y trabajaremos para hacerte llegar a los mejores profesionales."
                            : "Si necesitas a personal cualificado que cubra las necesidades de cualquier departamento de marketing actual, este es el lugar adecuado.\n\nCuéntanos un poco más acerca de tus necesidades y trabajaremos para hacerte llegar a los mejores profesionales."}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  ) : null}

                  <Button
                    className={classNames("__wab_instance", sty.button__bZHp7)}
                    color={"darkGray" as const}
                    link={
                      hasVariant(globalVariants, "screen", "laptopL")
                        ? ("https://forms.zohopublic.eu/openmarketers/form/FormularioCaptacinEmpresas/formperma/RJgBmrkSQK0RE5V_AuiSph8Hfe7Bn9NqP_qEVbXuEh0" as const)
                        : ("https://forms.zohopublic.eu/openmarketers/form/FormularioCaptacinEmpresas/formperma/RJgBmrkSQK0RE5V_AuiSph8Hfe7Bn9NqP_qEVbXuEh0" as const)
                    }
                  >
                    {"Contactar con nosotros"}
                  </Button>
                </p.Stack>

                <div
                  className={classNames(projectcss.all, sty.freeBox___23Apn)}
                >
                  <p.PlasmicImg
                    alt={"Contacta con nosotros" as const}
                    className={classNames(sty.img__tmIiH)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "tablet")
                        ? ("auto" as const)
                        : hasVariant(globalVariants, "screen", "laptopM")
                        ? ("454px" as const)
                        : ("646px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "tablet")
                        ? ("none" as const)
                        : ("187%" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "tablet")
                        ? ("130%" as const)
                        : ("50vw" as const)
                    }
                    loader={"plasmic"}
                    loading={"lazy" as const}
                    src={{
                      src: "https://img.plasmic.app/img-optimizer/v1/img/b3f1134faa9263eb4fb754c52b7134af.png",
                      fullWidth: 915,
                      fullHeight: 646
                    }}
                  />
                </div>
              </p.Stack>
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"omOutro2"}
              data-plasmic-override={overrides.omOutro2}
              hasGap={true}
              className={classNames(projectcss.all, sty.omOutro2)}
              id={"empleo" as const}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"container9"}
                data-plasmic-override={overrides.container9}
                hasGap={true}
                className={classNames(projectcss.all, sty.container9)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"container10"}
                  data-plasmic-override={overrides.container10}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.container10)}
                >
                  {true ? (
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__kmUQ)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"sectionHeading6"}
                        data-plasmic-override={overrides.sectionHeading6}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.sectionHeading6
                        )}
                      >
                        <h5
                          data-plasmic-name={"sectionTitle9"}
                          data-plasmic-override={overrides.sectionTitle9}
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.sectionTitle9
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "¿Quieres saber más?"
                            : hasVariant(globalVariants, "screen", "tablet")
                            ? "¿Quieres saber más?"
                            : hasVariant(globalVariants, "screen", "laptopM")
                            ? "¿Quieres saber más?"
                            : hasVariant(globalVariants, "screen", "laptopL")
                            ? "¿Quieres saber más?"
                            : "¿Quieres saber más?"}
                        </h5>

                        <div
                          data-plasmic-name={"description6"}
                          data-plasmic-override={overrides.description6}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.description6
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "Si necesitas a personal cualificado que cubra las necesidades de cualquier departamento de marketing actual, este es el lugar adecuado. Cuéntanos un poco más acerca de tus necesidades y trabajaremos para hacerte llegar a los mejores profesionales."
                            : hasVariant(globalVariants, "screen", "tablet")
                            ? "Si necesitas a personal cualificado que cubra las necesidades de cualquier departamento de marketing actual, este es el lugar adecuado. Cuéntanos un poco más acerca de tus necesidades y trabajaremos para hacerte llegar a los mejores profesionales."
                            : hasVariant(globalVariants, "screen", "laptopM")
                            ? "Si necesitas a personal cualificado que cubra las necesidades de cualquier departamento de marketing actual, este es el lugar adecuado. Cuéntanos un poco más acerca de tus necesidades y trabajaremos para hacerte llegar a los mejores profesionales."
                            : hasVariant(globalVariants, "screen", "laptopL")
                            ? "Si necesitas a personal cualificado que cubra las necesidades de cualquier departamento de marketing actual, este es el lugar adecuado.\n\nCuéntanos un poco más acerca de tus necesidades y trabajaremos para hacerte llegar a los mejores profesionales."
                            : "Si necesitas a personal cualificado que cubra las necesidades de cualquier departamento de marketing actual, este es el lugar adecuado.\n\nCuéntanos un poco más acerca de tus necesidades y trabajaremos para hacerte llegar a los mejores profesionales."}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  ) : null}
                </p.Stack>

                <div
                  className={classNames(projectcss.all, sty.freeBox___1493D)}
                >
                  <div className={classNames(projectcss.all, sty.freeBox__f7A)}>
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ro4Ev)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"foreground"}
                        data-plasmic-override={overrides.foreground}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.foreground)}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qbhgi
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__domn6
                            )}
                          >
                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__wRWiO
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___1DdT
                                )}
                              >
                                {"Contacto"}
                              </div>

                              <p.Stack
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__nv0PS
                                )}
                              >
                                <input
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.input,
                                    sty.textInput___1KTg
                                  )}
                                  placeholder={"Nombre" as const}
                                  size={1 as const}
                                  type={"text" as const}
                                  value={"" as const}
                                />

                                <input
                                  data-plasmic-name={"emailInput"}
                                  data-plasmic-override={overrides.emailInput}
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.input,
                                    sty.emailInput
                                  )}
                                  placeholder={"Correo electrónico" as const}
                                  size={1 as const}
                                  type={"email" as const}
                                  value={"" as const}
                                />

                                <input
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.input,
                                    sty.textInput__abf5U
                                  )}
                                  placeholder={
                                    "Cuéntanos con qué te podemos ayudar" as const
                                  }
                                  size={1 as const}
                                  type={"text" as const}
                                  value={"" as const}
                                />
                              </p.Stack>

                              {p.renderPlasmicSlot({
                                defaultContents: (
                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__lPxcc
                                    )}
                                    color={"darkGray" as const}
                                    link={
                                      "https://forms.zohopublic.eu/openmarketers/form/FormularioCaptacinEmpresas/formperma/RJgBmrkSQK0RE5V_AuiSph8Hfe7Bn9NqP_qEVbXuEh0" as const
                                    }
                                  >
                                    {"Contactar con nosotros"}
                                  </Button>
                                ),

                                value: args.formButton
                              })}
                            </p.Stack>

                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__bjL1Y
                              )}
                            />

                            {true ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__m4P2W
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__moGTy
                                  )}
                                >
                                  {
                                    "El equipo de OpenMarketers se pondrá en contacto contigo en el menor tiempo posible."
                                  }
                                </div>
                              </div>
                            ) : null}
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </div>
                </div>
              </p.Stack>
            </p.Stack>
          ) : null}

          <FooterSection
            data-plasmic-name={"footerSection"}
            data-plasmic-override={overrides.footerSection}
            className={classNames("__wab_instance", sty.footerSection)}
            footerLinks={
              <React.Fragment>
                <Button
                  className={classNames("__wab_instance", sty.button__j7AFh)}
                  color={"navLink" as const}
                  link={"/politica-cookies" as const}
                  size={"small" as const}
                >
                  {"Política de cookies"}
                </Button>

                <Button
                  className={classNames("__wab_instance", sty.button__xuTdg)}
                  color={"navLink" as const}
                  link={"/politica-privacidad" as const}
                  size={"small" as const}
                >
                  {"Política de Privacidad"}
                </Button>

                <Button
                  className={classNames("__wab_instance", sty.button__mjiPo)}
                  color={"navLink" as const}
                  link={"/terminos-condiciones" as const}
                  size={"small" as const}
                >
                  {"Términos y Condiciones"}
                </Button>
              </React.Fragment>
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerHeroSection",
    "content",
    "breadCrumb",
    "header",
    "h1",
    "span",
    "omHiring",
    "container3",
    "container4",
    "sectionHeading3",
    "sectionTitle3",
    "description3",
    "profile2",
    "omFeatures",
    "heading",
    "sectionTitle4",
    "icon4",
    "sectionheading",
    "icon5",
    "sectionheading2",
    "icon6",
    "sectionheading3",
    "icon7",
    "icon8",
    "icon9",
    "icon10",
    "icon11",
    "icon12",
    "omCertifications",
    "container7",
    "container8",
    "sectionHeading5",
    "sectionTitle8",
    "description5",
    "omPlatform",
    "heading2",
    "sectionTitle5",
    "frame",
    "omAdvantages",
    "heading3",
    "sectionTitle7",
    "omOutro",
    "container5",
    "container6",
    "sectionHeading4",
    "sectionTitle6",
    "description4",
    "omOutro2",
    "container9",
    "container10",
    "sectionHeading6",
    "sectionTitle9",
    "description6",
    "foreground",
    "emailInput",
    "footerSection"
  ],
  headerHeroSection: [
    "headerHeroSection",
    "content",
    "breadCrumb",
    "header",
    "h1",
    "span"
  ],
  content: ["content", "breadCrumb", "header", "h1", "span"],
  breadCrumb: ["breadCrumb"],
  header: ["header", "h1", "span"],
  h1: ["h1", "span"],
  span: ["span"],
  omHiring: [
    "omHiring",
    "container3",
    "container4",
    "sectionHeading3",
    "sectionTitle3",
    "description3",
    "profile2"
  ],
  container3: [
    "container3",
    "container4",
    "sectionHeading3",
    "sectionTitle3",
    "description3",
    "profile2"
  ],
  container4: [
    "container4",
    "sectionHeading3",
    "sectionTitle3",
    "description3"
  ],
  sectionHeading3: ["sectionHeading3", "sectionTitle3", "description3"],
  sectionTitle3: ["sectionTitle3"],
  description3: ["description3"],
  profile2: ["profile2"],
  omFeatures: [
    "omFeatures",
    "heading",
    "sectionTitle4",
    "icon4",
    "sectionheading",
    "icon5",
    "sectionheading2",
    "icon6",
    "sectionheading3",
    "icon7",
    "icon8",
    "icon9",
    "icon10",
    "icon11",
    "icon12"
  ],
  heading: ["heading", "sectionTitle4"],
  sectionTitle4: ["sectionTitle4"],
  icon4: ["icon4"],
  sectionheading: ["sectionheading"],
  icon5: ["icon5"],
  sectionheading2: ["sectionheading2"],
  icon6: ["icon6"],
  sectionheading3: ["sectionheading3"],
  icon7: ["icon7"],
  icon8: ["icon8"],
  icon9: ["icon9"],
  icon10: ["icon10"],
  icon11: ["icon11"],
  icon12: ["icon12"],
  omCertifications: [
    "omCertifications",
    "container7",
    "container8",
    "sectionHeading5",
    "sectionTitle8",
    "description5"
  ],
  container7: [
    "container7",
    "container8",
    "sectionHeading5",
    "sectionTitle8",
    "description5"
  ],
  container8: [
    "container8",
    "sectionHeading5",
    "sectionTitle8",
    "description5"
  ],
  sectionHeading5: ["sectionHeading5", "sectionTitle8", "description5"],
  sectionTitle8: ["sectionTitle8"],
  description5: ["description5"],
  omPlatform: ["omPlatform", "heading2", "sectionTitle5", "frame"],
  heading2: ["heading2", "sectionTitle5"],
  sectionTitle5: ["sectionTitle5"],
  frame: ["frame"],
  omAdvantages: ["omAdvantages", "heading3", "sectionTitle7"],
  heading3: ["heading3", "sectionTitle7"],
  sectionTitle7: ["sectionTitle7"],
  omOutro: [
    "omOutro",
    "container5",
    "container6",
    "sectionHeading4",
    "sectionTitle6",
    "description4"
  ],
  container5: [
    "container5",
    "container6",
    "sectionHeading4",
    "sectionTitle6",
    "description4"
  ],
  container6: [
    "container6",
    "sectionHeading4",
    "sectionTitle6",
    "description4"
  ],
  sectionHeading4: ["sectionHeading4", "sectionTitle6", "description4"],
  sectionTitle6: ["sectionTitle6"],
  description4: ["description4"],
  omOutro2: [
    "omOutro2",
    "container9",
    "container10",
    "sectionHeading6",
    "sectionTitle9",
    "description6",
    "foreground",
    "emailInput"
  ],
  container9: [
    "container9",
    "container10",
    "sectionHeading6",
    "sectionTitle9",
    "description6",
    "foreground",
    "emailInput"
  ],
  container10: [
    "container10",
    "sectionHeading6",
    "sectionTitle9",
    "description6"
  ],
  sectionHeading6: ["sectionHeading6", "sectionTitle9", "description6"],
  sectionTitle9: ["sectionTitle9"],
  description6: ["description6"],
  foreground: ["foreground", "emailInput"],
  emailInput: ["emailInput"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerHeroSection: "div";
  content: "div";
  breadCrumb: "div";
  header: "div";
  h1: "h1";
  span: "span";
  omHiring: "div";
  container3: "div";
  container4: "div";
  sectionHeading3: "div";
  sectionTitle3: "h2";
  description3: "div";
  profile2: "div";
  omFeatures: "div";
  heading: "div";
  sectionTitle4: "h3";
  icon4: "div";
  sectionheading: "div";
  icon5: "div";
  sectionheading2: "div";
  icon6: "div";
  sectionheading3: "div";
  icon7: "div";
  icon8: "div";
  icon9: "div";
  icon10: "div";
  icon11: "div";
  icon12: "div";
  omCertifications: "div";
  container7: "div";
  container8: "div";
  sectionHeading5: "div";
  sectionTitle8: "h3";
  description5: "div";
  omPlatform: "div";
  heading2: "div";
  sectionTitle5: "h4";
  frame: "div";
  omAdvantages: "div";
  heading3: "div";
  sectionTitle7: "h4";
  omOutro: "div";
  container5: "div";
  container6: "div";
  sectionHeading4: "div";
  sectionTitle6: "h5";
  description4: "div";
  omOutro2: "div";
  container9: "div";
  container10: "div";
  sectionHeading6: "div";
  sectionTitle9: "h5";
  description6: "div";
  foreground: "div";
  emailInput: "input";
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEmpresas__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEmpresas__VariantsArgs;
    args?: PlasmicEmpresas__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEmpresas__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEmpresas__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicEmpresas__ArgProps,
          internalVariantPropNames: PlasmicEmpresas__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicEmpresas__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEmpresas";
  } else {
    func.displayName = `PlasmicEmpresas.${nodeName}`;
  }
  return func;
}

export const PlasmicEmpresas = Object.assign(
  // Top-level PlasmicEmpresas renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerHeroSection: makeNodeComponent("headerHeroSection"),
    content: makeNodeComponent("content"),
    breadCrumb: makeNodeComponent("breadCrumb"),
    header: makeNodeComponent("header"),
    h1: makeNodeComponent("h1"),
    span: makeNodeComponent("span"),
    omHiring: makeNodeComponent("omHiring"),
    container3: makeNodeComponent("container3"),
    container4: makeNodeComponent("container4"),
    sectionHeading3: makeNodeComponent("sectionHeading3"),
    sectionTitle3: makeNodeComponent("sectionTitle3"),
    description3: makeNodeComponent("description3"),
    profile2: makeNodeComponent("profile2"),
    omFeatures: makeNodeComponent("omFeatures"),
    heading: makeNodeComponent("heading"),
    sectionTitle4: makeNodeComponent("sectionTitle4"),
    icon4: makeNodeComponent("icon4"),
    sectionheading: makeNodeComponent("sectionheading"),
    icon5: makeNodeComponent("icon5"),
    sectionheading2: makeNodeComponent("sectionheading2"),
    icon6: makeNodeComponent("icon6"),
    sectionheading3: makeNodeComponent("sectionheading3"),
    icon7: makeNodeComponent("icon7"),
    icon8: makeNodeComponent("icon8"),
    icon9: makeNodeComponent("icon9"),
    icon10: makeNodeComponent("icon10"),
    icon11: makeNodeComponent("icon11"),
    icon12: makeNodeComponent("icon12"),
    omCertifications: makeNodeComponent("omCertifications"),
    container7: makeNodeComponent("container7"),
    container8: makeNodeComponent("container8"),
    sectionHeading5: makeNodeComponent("sectionHeading5"),
    sectionTitle8: makeNodeComponent("sectionTitle8"),
    description5: makeNodeComponent("description5"),
    omPlatform: makeNodeComponent("omPlatform"),
    heading2: makeNodeComponent("heading2"),
    sectionTitle5: makeNodeComponent("sectionTitle5"),
    frame: makeNodeComponent("frame"),
    omAdvantages: makeNodeComponent("omAdvantages"),
    heading3: makeNodeComponent("heading3"),
    sectionTitle7: makeNodeComponent("sectionTitle7"),
    omOutro: makeNodeComponent("omOutro"),
    container5: makeNodeComponent("container5"),
    container6: makeNodeComponent("container6"),
    sectionHeading4: makeNodeComponent("sectionHeading4"),
    sectionTitle6: makeNodeComponent("sectionTitle6"),
    description4: makeNodeComponent("description4"),
    omOutro2: makeNodeComponent("omOutro2"),
    container9: makeNodeComponent("container9"),
    container10: makeNodeComponent("container10"),
    sectionHeading6: makeNodeComponent("sectionHeading6"),
    sectionTitle9: makeNodeComponent("sectionTitle9"),
    description6: makeNodeComponent("description6"),
    foreground: makeNodeComponent("foreground"),
    emailInput: makeNodeComponent("emailInput"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicEmpresas
    internalVariantProps: PlasmicEmpresas__VariantProps,
    internalArgProps: PlasmicEmpresas__ArgProps
  }
);

export default PlasmicEmpresas;
/* prettier-ignore-end */
